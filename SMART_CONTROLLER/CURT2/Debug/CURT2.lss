
CURT2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00004d8c  00004e20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000050  00800170  00800170  00004f30  2**0
                  ALLOC
  3 .stab         00002eb0  00000000  00000000  00004f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015ec  00000000  00000000  00007de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000260  00000000  00000000  000093cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002b7  00000000  00000000  0000962c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003396  00000000  00000000  000098e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000019ee  00000000  00000000  0000cc79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000183d  00000000  00000000  0000e667  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000280  00000000  00000000  0000fea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003c7  00000000  00000000  00010124  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001d34  00000000  00000000  000104eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0001221f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b6 18 	jmp	0x316c	; 0x316c <__vector_1>
       8:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__vector_2>
       c:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 06 21 	jmp	0x420c	; 0x420c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 79 20 	jmp	0x40f2	; 0x40f2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	fd e4       	ldi	r31, 0x4D	; 77
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 14 26 	call	0x4c28	; 0x4c28 <main>
      8a:	0c 94 c4 26 	jmp	0x4d88	; 0x4d88 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__muldi3>:
      92:	a0 e3       	ldi	r26, 0x30	; 48
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__prologue_saves__>
      9e:	a8 e0       	ldi	r26, 0x08	; 8
      a0:	4e 01       	movw	r8, r28
      a2:	08 94       	sec
      a4:	81 1c       	adc	r8, r1
      a6:	91 1c       	adc	r9, r1
      a8:	f4 01       	movw	r30, r8
      aa:	ba 2f       	mov	r27, r26
      ac:	11 92       	st	Z+, r1
      ae:	ba 95       	dec	r27
      b0:	e9 f7       	brne	.-6      	; 0xac <__muldi3+0x1a>
      b2:	29 83       	std	Y+1, r18	; 0x01
      b4:	3a 83       	std	Y+2, r19	; 0x02
      b6:	4b 83       	std	Y+3, r20	; 0x03
      b8:	5c 83       	std	Y+4, r21	; 0x04
      ba:	6d 83       	std	Y+5, r22	; 0x05
      bc:	7e 83       	std	Y+6, r23	; 0x06
      be:	8f 83       	std	Y+7, r24	; 0x07
      c0:	98 87       	std	Y+8, r25	; 0x08
      c2:	ce 01       	movw	r24, r28
      c4:	09 96       	adiw	r24, 0x09	; 9
      c6:	fc 01       	movw	r30, r24
      c8:	11 92       	st	Z+, r1
      ca:	aa 95       	dec	r26
      cc:	e9 f7       	brne	.-6      	; 0xc8 <__muldi3+0x36>
      ce:	a9 86       	std	Y+9, r10	; 0x09
      d0:	ba 86       	std	Y+10, r11	; 0x0a
      d2:	cb 86       	std	Y+11, r12	; 0x0b
      d4:	dc 86       	std	Y+12, r13	; 0x0c
      d6:	ed 86       	std	Y+13, r14	; 0x0d
      d8:	fe 86       	std	Y+14, r15	; 0x0e
      da:	0f 87       	std	Y+15, r16	; 0x0f
      dc:	18 8b       	std	Y+16, r17	; 0x10
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	3a 81       	ldd	r19, Y+2	; 0x02
      e2:	4b 81       	ldd	r20, Y+3	; 0x03
      e4:	5c 81       	ldd	r21, Y+4	; 0x04
      e6:	2d a7       	std	Y+45, r18	; 0x2d
      e8:	3e a7       	std	Y+46, r19	; 0x2e
      ea:	4f a7       	std	Y+47, r20	; 0x2f
      ec:	58 ab       	std	Y+48, r21	; 0x30
      ee:	79 01       	movw	r14, r18
      f0:	8a 01       	movw	r16, r20
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	9f ef       	ldi	r25, 0xFF	; 255
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e8 22       	and	r14, r24
      fc:	f9 22       	and	r15, r25
      fe:	0a 23       	and	r16, r26
     100:	1b 23       	and	r17, r27
     102:	1a 01       	movw	r2, r20
     104:	44 24       	eor	r4, r4
     106:	55 24       	eor	r5, r5
     108:	29 85       	ldd	r18, Y+9	; 0x09
     10a:	3a 85       	ldd	r19, Y+10	; 0x0a
     10c:	4b 85       	ldd	r20, Y+11	; 0x0b
     10e:	5c 85       	ldd	r21, Y+12	; 0x0c
     110:	29 a7       	std	Y+41, r18	; 0x29
     112:	3a a7       	std	Y+42, r19	; 0x2a
     114:	4b a7       	std	Y+43, r20	; 0x2b
     116:	5c a7       	std	Y+44, r21	; 0x2c
     118:	59 01       	movw	r10, r18
     11a:	6a 01       	movw	r12, r20
     11c:	a8 22       	and	r10, r24
     11e:	b9 22       	and	r11, r25
     120:	ca 22       	and	r12, r26
     122:	db 22       	and	r13, r27
     124:	3a 01       	movw	r6, r20
     126:	88 24       	eor	r8, r8
     128:	99 24       	eor	r9, r9
     12a:	c6 01       	movw	r24, r12
     12c:	b5 01       	movw	r22, r10
     12e:	a8 01       	movw	r20, r16
     130:	97 01       	movw	r18, r14
     132:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
     136:	6d a3       	std	Y+37, r22	; 0x25
     138:	7e a3       	std	Y+38, r23	; 0x26
     13a:	8f a3       	std	Y+39, r24	; 0x27
     13c:	98 a7       	std	Y+40, r25	; 0x28
     13e:	c4 01       	movw	r24, r8
     140:	b3 01       	movw	r22, r6
     142:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
     146:	69 a3       	std	Y+33, r22	; 0x21
     148:	7a a3       	std	Y+34, r23	; 0x22
     14a:	8b a3       	std	Y+35, r24	; 0x23
     14c:	9c a3       	std	Y+36, r25	; 0x24
     14e:	c6 01       	movw	r24, r12
     150:	b5 01       	movw	r22, r10
     152:	a2 01       	movw	r20, r4
     154:	91 01       	movw	r18, r2
     156:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
     15a:	7b 01       	movw	r14, r22
     15c:	8c 01       	movw	r16, r24
     15e:	c4 01       	movw	r24, r8
     160:	b3 01       	movw	r22, r6
     162:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
     166:	5b 01       	movw	r10, r22
     168:	6c 01       	movw	r12, r24
     16a:	89 a1       	ldd	r24, Y+33	; 0x21
     16c:	9a a1       	ldd	r25, Y+34	; 0x22
     16e:	ab a1       	ldd	r26, Y+35	; 0x23
     170:	bc a1       	ldd	r27, Y+36	; 0x24
     172:	8e 0d       	add	r24, r14
     174:	9f 1d       	adc	r25, r15
     176:	a0 1f       	adc	r26, r16
     178:	b1 1f       	adc	r27, r17
     17a:	89 a3       	std	Y+33, r24	; 0x21
     17c:	9a a3       	std	Y+34, r25	; 0x22
     17e:	ab a3       	std	Y+35, r26	; 0x23
     180:	bc a3       	std	Y+36, r27	; 0x24
     182:	2d a1       	ldd	r18, Y+37	; 0x25
     184:	3e a1       	ldd	r19, Y+38	; 0x26
     186:	4f a1       	ldd	r20, Y+39	; 0x27
     188:	58 a5       	ldd	r21, Y+40	; 0x28
     18a:	ca 01       	movw	r24, r20
     18c:	aa 27       	eor	r26, r26
     18e:	bb 27       	eor	r27, r27
     190:	29 a1       	ldd	r18, Y+33	; 0x21
     192:	3a a1       	ldd	r19, Y+34	; 0x22
     194:	4b a1       	ldd	r20, Y+35	; 0x23
     196:	5c a1       	ldd	r21, Y+36	; 0x24
     198:	28 0f       	add	r18, r24
     19a:	39 1f       	adc	r19, r25
     19c:	4a 1f       	adc	r20, r26
     19e:	5b 1f       	adc	r21, r27
     1a0:	29 a3       	std	Y+33, r18	; 0x21
     1a2:	3a a3       	std	Y+34, r19	; 0x22
     1a4:	4b a3       	std	Y+35, r20	; 0x23
     1a6:	5c a3       	std	Y+36, r21	; 0x24
     1a8:	2e 15       	cp	r18, r14
     1aa:	3f 05       	cpc	r19, r15
     1ac:	40 07       	cpc	r20, r16
     1ae:	51 07       	cpc	r21, r17
     1b0:	40 f4       	brcc	.+16     	; 0x1c2 <__muldi3+0x130>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	a1 e0       	ldi	r26, 0x01	; 1
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	a8 0e       	add	r10, r24
     1bc:	b9 1e       	adc	r11, r25
     1be:	ca 1e       	adc	r12, r26
     1c0:	db 1e       	adc	r13, r27
     1c2:	89 a1       	ldd	r24, Y+33	; 0x21
     1c4:	9a a1       	ldd	r25, Y+34	; 0x22
     1c6:	ab a1       	ldd	r26, Y+35	; 0x23
     1c8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ca:	9d 01       	movw	r18, r26
     1cc:	44 27       	eor	r20, r20
     1ce:	55 27       	eor	r21, r21
     1d0:	2a 0d       	add	r18, r10
     1d2:	3b 1d       	adc	r19, r11
     1d4:	4c 1d       	adc	r20, r12
     1d6:	5d 1d       	adc	r21, r13
     1d8:	2d 8f       	std	Y+29, r18	; 0x1d
     1da:	3e 8f       	std	Y+30, r19	; 0x1e
     1dc:	4f 8f       	std	Y+31, r20	; 0x1f
     1de:	58 a3       	std	Y+32, r21	; 0x20
     1e0:	6c 01       	movw	r12, r24
     1e2:	bb 24       	eor	r11, r11
     1e4:	aa 24       	eor	r10, r10
     1e6:	8d a1       	ldd	r24, Y+37	; 0x25
     1e8:	9e a1       	ldd	r25, Y+38	; 0x26
     1ea:	af a1       	ldd	r26, Y+39	; 0x27
     1ec:	b8 a5       	ldd	r27, Y+40	; 0x28
     1ee:	a0 70       	andi	r26, 0x00	; 0
     1f0:	b0 70       	andi	r27, 0x00	; 0
     1f2:	a8 0e       	add	r10, r24
     1f4:	b9 1e       	adc	r11, r25
     1f6:	ca 1e       	adc	r12, r26
     1f8:	db 1e       	adc	r13, r27
     1fa:	a9 8e       	std	Y+25, r10	; 0x19
     1fc:	ba 8e       	std	Y+26, r11	; 0x1a
     1fe:	cb 8e       	std	Y+27, r12	; 0x1b
     200:	dc 8e       	std	Y+28, r13	; 0x1c
     202:	9a 8c       	ldd	r9, Y+26	; 0x1a
     204:	8b 8c       	ldd	r8, Y+27	; 0x1b
     206:	7c 8c       	ldd	r7, Y+28	; 0x1c
     208:	9e 8d       	ldd	r25, Y+30	; 0x1e
     20a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     20c:	78 a1       	ldd	r23, Y+32	; 0x20
     20e:	fe 01       	movw	r30, r28
     210:	71 96       	adiw	r30, 0x11	; 17
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	df 01       	movw	r26, r30
     216:	1d 92       	st	X+, r1
     218:	8a 95       	dec	r24
     21a:	e9 f7       	brne	.-6      	; 0x216 <__muldi3+0x184>
     21c:	2d 8b       	std	Y+21, r18	; 0x15
     21e:	9e 8b       	std	Y+22, r25	; 0x16
     220:	6f 8b       	std	Y+23, r22	; 0x17
     222:	78 8f       	std	Y+24, r23	; 0x18
     224:	2d 85       	ldd	r18, Y+13	; 0x0d
     226:	3e 85       	ldd	r19, Y+14	; 0x0e
     228:	4f 85       	ldd	r20, Y+15	; 0x0f
     22a:	58 89       	ldd	r21, Y+16	; 0x10
     22c:	6d a5       	ldd	r22, Y+45	; 0x2d
     22e:	7e a5       	ldd	r23, Y+46	; 0x2e
     230:	8f a5       	ldd	r24, Y+47	; 0x2f
     232:	98 a9       	ldd	r25, Y+48	; 0x30
     234:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
     238:	7b 01       	movw	r14, r22
     23a:	8c 01       	movw	r16, r24
     23c:	2d 81       	ldd	r18, Y+5	; 0x05
     23e:	3e 81       	ldd	r19, Y+6	; 0x06
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 a5       	ldd	r22, Y+41	; 0x29
     246:	7a a5       	ldd	r23, Y+42	; 0x2a
     248:	8b a5       	ldd	r24, Y+43	; 0x2b
     24a:	9c a5       	ldd	r25, Y+44	; 0x2c
     24c:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
     250:	e6 0e       	add	r14, r22
     252:	f7 1e       	adc	r15, r23
     254:	08 1f       	adc	r16, r24
     256:	19 1f       	adc	r17, r25
     258:	6d 89       	ldd	r22, Y+21	; 0x15
     25a:	7e 89       	ldd	r23, Y+22	; 0x16
     25c:	8f 89       	ldd	r24, Y+23	; 0x17
     25e:	98 8d       	ldd	r25, Y+24	; 0x18
     260:	6e 0d       	add	r22, r14
     262:	7f 1d       	adc	r23, r15
     264:	80 1f       	adc	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	6d 8b       	std	Y+21, r22	; 0x15
     26a:	7e 8b       	std	Y+22, r23	; 0x16
     26c:	8f 8b       	std	Y+23, r24	; 0x17
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	ee 89       	ldd	r30, Y+22	; 0x16
     272:	2a 2d       	mov	r18, r10
     274:	39 2d       	mov	r19, r9
     276:	48 2d       	mov	r20, r8
     278:	57 2d       	mov	r21, r7
     27a:	7e 2f       	mov	r23, r30
     27c:	8f 89       	ldd	r24, Y+23	; 0x17
     27e:	98 8d       	ldd	r25, Y+24	; 0x18
     280:	e0 96       	adiw	r28, 0x30	; 48
     282:	e2 e1       	ldi	r30, 0x12	; 18
     284:	0c 94 a9 26 	jmp	0x4d52	; 0x4d52 <__epilogue_restores__>

00000288 <__ashldi3>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	60 97       	sbiw	r28, 0x10	; 16
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	a8 2f       	mov	r26, r24
     2a4:	00 23       	and	r16, r16
     2a6:	09 f4       	brne	.+2      	; 0x2aa <__ashldi3+0x22>
     2a8:	61 c0       	rjmp	.+194    	; 0x36c <__ashldi3+0xe4>
     2aa:	7e 01       	movw	r14, r28
     2ac:	08 94       	sec
     2ae:	e1 1c       	adc	r14, r1
     2b0:	f1 1c       	adc	r15, r1
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	f7 01       	movw	r30, r14
     2b6:	11 92       	st	Z+, r1
     2b8:	8a 95       	dec	r24
     2ba:	e9 f7       	brne	.-6      	; 0x2b6 <__ashldi3+0x2e>
     2bc:	29 83       	std	Y+1, r18	; 0x01
     2be:	3a 83       	std	Y+2, r19	; 0x02
     2c0:	4b 83       	std	Y+3, r20	; 0x03
     2c2:	5c 83       	std	Y+4, r21	; 0x04
     2c4:	6d 83       	std	Y+5, r22	; 0x05
     2c6:	7e 83       	std	Y+6, r23	; 0x06
     2c8:	af 83       	std	Y+7, r26	; 0x07
     2ca:	98 87       	std	Y+8, r25	; 0x08
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	80 1b       	sub	r24, r16
     2d0:	e8 2f       	mov	r30, r24
     2d2:	ff 27       	eor	r31, r31
     2d4:	e7 fd       	sbrc	r30, 7
     2d6:	f0 95       	com	r31
     2d8:	49 81       	ldd	r20, Y+1	; 0x01
     2da:	5a 81       	ldd	r21, Y+2	; 0x02
     2dc:	6b 81       	ldd	r22, Y+3	; 0x03
     2de:	7c 81       	ldd	r23, Y+4	; 0x04
     2e0:	18 16       	cp	r1, r24
     2e2:	84 f0       	brlt	.+32     	; 0x304 <__ashldi3+0x7c>
     2e4:	19 86       	std	Y+9, r1	; 0x09
     2e6:	1a 86       	std	Y+10, r1	; 0x0a
     2e8:	1b 86       	std	Y+11, r1	; 0x0b
     2ea:	1c 86       	std	Y+12, r1	; 0x0c
     2ec:	88 27       	eor	r24, r24
     2ee:	99 27       	eor	r25, r25
     2f0:	8e 1b       	sub	r24, r30
     2f2:	9f 0b       	sbc	r25, r31
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__ashldi3+0x76>
     2f6:	44 0f       	add	r20, r20
     2f8:	55 1f       	adc	r21, r21
     2fa:	66 1f       	adc	r22, r22
     2fc:	77 1f       	adc	r23, r23
     2fe:	8a 95       	dec	r24
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <__ashldi3+0x6e>
     302:	28 c0       	rjmp	.+80     	; 0x354 <__ashldi3+0xcc>
     304:	20 2f       	mov	r18, r16
     306:	33 27       	eor	r19, r19
     308:	27 fd       	sbrc	r18, 7
     30a:	30 95       	com	r19
     30c:	db 01       	movw	r26, r22
     30e:	ca 01       	movw	r24, r20
     310:	02 2e       	mov	r0, r18
     312:	04 c0       	rjmp	.+8      	; 0x31c <__ashldi3+0x94>
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	aa 1f       	adc	r26, r26
     31a:	bb 1f       	adc	r27, r27
     31c:	0a 94       	dec	r0
     31e:	d2 f7       	brpl	.-12     	; 0x314 <__ashldi3+0x8c>
     320:	89 87       	std	Y+9, r24	; 0x09
     322:	9a 87       	std	Y+10, r25	; 0x0a
     324:	ab 87       	std	Y+11, r26	; 0x0b
     326:	bc 87       	std	Y+12, r27	; 0x0c
     328:	04 c0       	rjmp	.+8      	; 0x332 <__ashldi3+0xaa>
     32a:	76 95       	lsr	r23
     32c:	67 95       	ror	r22
     32e:	57 95       	ror	r21
     330:	47 95       	ror	r20
     332:	ea 95       	dec	r30
     334:	d2 f7       	brpl	.-12     	; 0x32a <__ashldi3+0xa2>
     336:	8d 81       	ldd	r24, Y+5	; 0x05
     338:	9e 81       	ldd	r25, Y+6	; 0x06
     33a:	af 81       	ldd	r26, Y+7	; 0x07
     33c:	b8 85       	ldd	r27, Y+8	; 0x08
     33e:	04 c0       	rjmp	.+8      	; 0x348 <__ashldi3+0xc0>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	aa 1f       	adc	r26, r26
     346:	bb 1f       	adc	r27, r27
     348:	2a 95       	dec	r18
     34a:	d2 f7       	brpl	.-12     	; 0x340 <__ashldi3+0xb8>
     34c:	48 2b       	or	r20, r24
     34e:	59 2b       	or	r21, r25
     350:	6a 2b       	or	r22, r26
     352:	7b 2b       	or	r23, r27
     354:	4d 87       	std	Y+13, r20	; 0x0d
     356:	5e 87       	std	Y+14, r21	; 0x0e
     358:	6f 87       	std	Y+15, r22	; 0x0f
     35a:	78 8b       	std	Y+16, r23	; 0x10
     35c:	29 85       	ldd	r18, Y+9	; 0x09
     35e:	3a 85       	ldd	r19, Y+10	; 0x0a
     360:	4b 85       	ldd	r20, Y+11	; 0x0b
     362:	5c 85       	ldd	r21, Y+12	; 0x0c
     364:	6d 85       	ldd	r22, Y+13	; 0x0d
     366:	7e 85       	ldd	r23, Y+14	; 0x0e
     368:	af 85       	ldd	r26, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	8a 2f       	mov	r24, r26
     36e:	60 96       	adiw	r28, 0x10	; 16
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <__fixunssfsi>:
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	7b 01       	movw	r14, r22
     390:	8c 01       	movw	r16, r24
     392:	20 e0       	ldi	r18, 0x00	; 0
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	40 e0       	ldi	r20, 0x00	; 0
     398:	5f e4       	ldi	r21, 0x4F	; 79
     39a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__gesf2>
     39e:	88 23       	and	r24, r24
     3a0:	8c f0       	brlt	.+34     	; 0x3c4 <__fixunssfsi+0x3e>
     3a2:	c8 01       	movw	r24, r16
     3a4:	b7 01       	movw	r22, r14
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	40 e0       	ldi	r20, 0x00	; 0
     3ac:	5f e4       	ldi	r21, 0x4F	; 79
     3ae:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__subsf3>
     3b2:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__fixsfsi>
     3b6:	9b 01       	movw	r18, r22
     3b8:	ac 01       	movw	r20, r24
     3ba:	20 50       	subi	r18, 0x00	; 0
     3bc:	30 40       	sbci	r19, 0x00	; 0
     3be:	40 40       	sbci	r20, 0x00	; 0
     3c0:	50 48       	sbci	r21, 0x80	; 128
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <__fixunssfsi+0x4a>
     3c4:	c8 01       	movw	r24, r16
     3c6:	b7 01       	movw	r22, r14
     3c8:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__fixsfsi>
     3cc:	9b 01       	movw	r18, r22
     3ce:	ac 01       	movw	r20, r24
     3d0:	b9 01       	movw	r22, r18
     3d2:	ca 01       	movw	r24, r20
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	08 95       	ret

000003de <__floatundisf>:
     3de:	a2 e0       	ldi	r26, 0x02	; 2
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	e5 ef       	ldi	r30, 0xF5	; 245
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__prologue_saves__>
     3ea:	12 2f       	mov	r17, r18
     3ec:	b3 2e       	mov	r11, r19
     3ee:	a4 2e       	mov	r10, r20
     3f0:	95 2e       	mov	r9, r21
     3f2:	86 2e       	mov	r8, r22
     3f4:	37 2e       	mov	r3, r23
     3f6:	28 2e       	mov	r2, r24
     3f8:	9a 83       	std	Y+2, r25	; 0x02
     3fa:	c2 2e       	mov	r12, r18
     3fc:	d3 2e       	mov	r13, r19
     3fe:	e4 2e       	mov	r14, r20
     400:	f5 2e       	mov	r15, r21
     402:	a7 01       	movw	r20, r14
     404:	96 01       	movw	r18, r12
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	21 17       	cp	r18, r17
     410:	a1 f4       	brne	.+40     	; 0x43a <__floatundisf+0x5c>
     412:	3b 15       	cp	r19, r11
     414:	91 f4       	brne	.+36     	; 0x43a <__floatundisf+0x5c>
     416:	4a 15       	cp	r20, r10
     418:	81 f4       	brne	.+32     	; 0x43a <__floatundisf+0x5c>
     41a:	59 15       	cp	r21, r9
     41c:	71 f4       	brne	.+28     	; 0x43a <__floatundisf+0x5c>
     41e:	68 15       	cp	r22, r8
     420:	61 f4       	brne	.+24     	; 0x43a <__floatundisf+0x5c>
     422:	73 15       	cp	r23, r3
     424:	51 f4       	brne	.+20     	; 0x43a <__floatundisf+0x5c>
     426:	82 15       	cp	r24, r2
     428:	41 f4       	brne	.+16     	; 0x43a <__floatundisf+0x5c>
     42a:	aa 81       	ldd	r26, Y+2	; 0x02
     42c:	9a 17       	cp	r25, r26
     42e:	29 f4       	brne	.+10     	; 0x43a <__floatundisf+0x5c>
     430:	c7 01       	movw	r24, r14
     432:	b6 01       	movw	r22, r12
     434:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__floatunsisf>
     438:	aa c0       	rjmp	.+340    	; 0x58e <__floatundisf+0x1b0>
     43a:	21 2f       	mov	r18, r17
     43c:	3b 2d       	mov	r19, r11
     43e:	4a 2d       	mov	r20, r10
     440:	59 2d       	mov	r21, r9
     442:	68 2d       	mov	r22, r8
     444:	73 2d       	mov	r23, r3
     446:	82 2d       	mov	r24, r2
     448:	9a 81       	ldd	r25, Y+2	; 0x02
     44a:	00 e2       	ldi	r16, 0x20	; 32
     44c:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__lshrdi3>
     450:	c9 01       	movw	r24, r18
     452:	da 01       	movw	r26, r20
     454:	80 30       	cpi	r24, 0x00	; 0
     456:	e0 e0       	ldi	r30, 0x00	; 0
     458:	9e 07       	cpc	r25, r30
     45a:	e1 e0       	ldi	r30, 0x01	; 1
     45c:	ae 07       	cpc	r26, r30
     45e:	e0 e0       	ldi	r30, 0x00	; 0
     460:	be 07       	cpc	r27, r30
     462:	80 f4       	brcc	.+32     	; 0x484 <__floatundisf+0xa6>
     464:	8f 3f       	cpi	r24, 0xFF	; 255
     466:	91 05       	cpc	r25, r1
     468:	a1 05       	cpc	r26, r1
     46a:	b1 05       	cpc	r27, r1
     46c:	31 f0       	breq	.+12     	; 0x47a <__floatundisf+0x9c>
     46e:	28 f0       	brcs	.+10     	; 0x47a <__floatundisf+0x9c>
     470:	28 e0       	ldi	r18, 0x08	; 8
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	50 e0       	ldi	r21, 0x00	; 0
     478:	16 c0       	rjmp	.+44     	; 0x4a6 <__floatundisf+0xc8>
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	40 e0       	ldi	r20, 0x00	; 0
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	11 c0       	rjmp	.+34     	; 0x4a6 <__floatundisf+0xc8>
     484:	80 30       	cpi	r24, 0x00	; 0
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	9f 07       	cpc	r25, r31
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	af 07       	cpc	r26, r31
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	bf 07       	cpc	r27, r31
     492:	28 f0       	brcs	.+10     	; 0x49e <__floatundisf+0xc0>
     494:	28 e1       	ldi	r18, 0x18	; 24
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	04 c0       	rjmp	.+8      	; 0x4a6 <__floatundisf+0xc8>
     49e:	20 e1       	ldi	r18, 0x10	; 16
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	02 2e       	mov	r0, r18
     4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <__floatundisf+0xd4>
     4aa:	b6 95       	lsr	r27
     4ac:	a7 95       	ror	r26
     4ae:	97 95       	ror	r25
     4b0:	87 95       	ror	r24
     4b2:	0a 94       	dec	r0
     4b4:	d2 f7       	brpl	.-12     	; 0x4aa <__floatundisf+0xcc>
     4b6:	fc 01       	movw	r30, r24
     4b8:	e8 59       	subi	r30, 0x98	; 152
     4ba:	ff 4f       	sbci	r31, 0xFF	; 255
     4bc:	80 81       	ld	r24, Z
     4be:	29 01       	movw	r4, r18
     4c0:	3a 01       	movw	r6, r20
     4c2:	48 0e       	add	r4, r24
     4c4:	51 1c       	adc	r5, r1
     4c6:	61 1c       	adc	r6, r1
     4c8:	71 1c       	adc	r7, r1
     4ca:	49 82       	std	Y+1, r4	; 0x01
     4cc:	21 2f       	mov	r18, r17
     4ce:	3b 2d       	mov	r19, r11
     4d0:	4a 2d       	mov	r20, r10
     4d2:	59 2d       	mov	r21, r9
     4d4:	68 2d       	mov	r22, r8
     4d6:	73 2d       	mov	r23, r3
     4d8:	82 2d       	mov	r24, r2
     4da:	9a 81       	ldd	r25, Y+2	; 0x02
     4dc:	04 2d       	mov	r16, r4
     4de:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__lshrdi3>
     4e2:	c9 01       	movw	r24, r18
     4e4:	da 01       	movw	r26, r20
     4e6:	4c 01       	movw	r8, r24
     4e8:	5d 01       	movw	r10, r26
     4ea:	80 e2       	ldi	r24, 0x20	; 32
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	84 19       	sub	r24, r4
     4f0:	95 09       	sbc	r25, r5
     4f2:	04 c0       	rjmp	.+8      	; 0x4fc <__floatundisf+0x11e>
     4f4:	cc 0c       	add	r12, r12
     4f6:	dd 1c       	adc	r13, r13
     4f8:	ee 1c       	adc	r14, r14
     4fa:	ff 1c       	adc	r15, r15
     4fc:	8a 95       	dec	r24
     4fe:	d2 f7       	brpl	.-12     	; 0x4f4 <__floatundisf+0x116>
     500:	c1 14       	cp	r12, r1
     502:	d1 04       	cpc	r13, r1
     504:	e1 04       	cpc	r14, r1
     506:	f1 04       	cpc	r15, r1
     508:	41 f0       	breq	.+16     	; 0x51a <__floatundisf+0x13c>
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	a0 e0       	ldi	r26, 0x00	; 0
     510:	b0 e0       	ldi	r27, 0x00	; 0
     512:	88 2a       	or	r8, r24
     514:	99 2a       	or	r9, r25
     516:	aa 2a       	or	r10, r26
     518:	bb 2a       	or	r11, r27
     51a:	90 e2       	ldi	r25, 0x20	; 32
     51c:	49 16       	cp	r4, r25
     51e:	51 04       	cpc	r5, r1
     520:	61 04       	cpc	r6, r1
     522:	71 04       	cpc	r7, r1
     524:	59 f4       	brne	.+22     	; 0x53c <__floatundisf+0x15e>
     526:	0f 2e       	mov	r0, r31
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	ef 2e       	mov	r14, r31
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	ff 2e       	mov	r15, r31
     530:	f0 e8       	ldi	r31, 0x80	; 128
     532:	0f 2f       	mov	r16, r31
     534:	ff e4       	ldi	r31, 0x4F	; 79
     536:	1f 2f       	mov	r17, r31
     538:	f0 2d       	mov	r31, r0
     53a:	21 c0       	rjmp	.+66     	; 0x57e <__floatundisf+0x1a0>
     53c:	af e1       	ldi	r26, 0x1F	; 31
     53e:	4a 16       	cp	r4, r26
     540:	51 04       	cpc	r5, r1
     542:	61 04       	cpc	r6, r1
     544:	71 04       	cpc	r7, r1
     546:	59 f4       	brne	.+22     	; 0x55e <__floatundisf+0x180>
     548:	0f 2e       	mov	r0, r31
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	ef 2e       	mov	r14, r31
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	ff 2e       	mov	r15, r31
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	0f 2f       	mov	r16, r31
     556:	ff e4       	ldi	r31, 0x4F	; 79
     558:	1f 2f       	mov	r17, r31
     55a:	f0 2d       	mov	r31, r0
     55c:	10 c0       	rjmp	.+32     	; 0x57e <__floatundisf+0x1a0>
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	09 80       	ldd	r0, Y+1	; 0x01
     568:	04 c0       	rjmp	.+8      	; 0x572 <__floatundisf+0x194>
     56a:	66 0f       	add	r22, r22
     56c:	77 1f       	adc	r23, r23
     56e:	88 1f       	adc	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	0a 94       	dec	r0
     574:	d2 f7       	brpl	.-12     	; 0x56a <__floatundisf+0x18c>
     576:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__floatsisf>
     57a:	7b 01       	movw	r14, r22
     57c:	8c 01       	movw	r16, r24
     57e:	c5 01       	movw	r24, r10
     580:	b4 01       	movw	r22, r8
     582:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__floatunsisf>
     586:	a8 01       	movw	r20, r16
     588:	97 01       	movw	r18, r14
     58a:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
     58e:	22 96       	adiw	r28, 0x02	; 2
     590:	e2 e1       	ldi	r30, 0x12	; 18
     592:	0c 94 a9 26 	jmp	0x4d52	; 0x4d52 <__epilogue_restores__>

00000596 <__udivdi3>:
     596:	ae e5       	ldi	r26, 0x5E	; 94
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	e1 ed       	ldi	r30, 0xD1	; 209
     59c:	f2 e0       	ldi	r31, 0x02	; 2
     59e:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__prologue_saves__>
     5a2:	a8 e0       	ldi	r26, 0x08	; 8
     5a4:	4e 01       	movw	r8, r28
     5a6:	08 94       	sec
     5a8:	81 1c       	adc	r8, r1
     5aa:	91 1c       	adc	r9, r1
     5ac:	f4 01       	movw	r30, r8
     5ae:	6a 2e       	mov	r6, r26
     5b0:	11 92       	st	Z+, r1
     5b2:	6a 94       	dec	r6
     5b4:	e9 f7       	brne	.-6      	; 0x5b0 <__udivdi3+0x1a>
     5b6:	29 83       	std	Y+1, r18	; 0x01
     5b8:	3a 83       	std	Y+2, r19	; 0x02
     5ba:	4b 83       	std	Y+3, r20	; 0x03
     5bc:	5c 83       	std	Y+4, r21	; 0x04
     5be:	6d 83       	std	Y+5, r22	; 0x05
     5c0:	7e 83       	std	Y+6, r23	; 0x06
     5c2:	8f 83       	std	Y+7, r24	; 0x07
     5c4:	98 87       	std	Y+8, r25	; 0x08
     5c6:	ce 01       	movw	r24, r28
     5c8:	09 96       	adiw	r24, 0x09	; 9
     5ca:	fc 01       	movw	r30, r24
     5cc:	11 92       	st	Z+, r1
     5ce:	aa 95       	dec	r26
     5d0:	e9 f7       	brne	.-6      	; 0x5cc <__udivdi3+0x36>
     5d2:	a9 86       	std	Y+9, r10	; 0x09
     5d4:	ba 86       	std	Y+10, r11	; 0x0a
     5d6:	cb 86       	std	Y+11, r12	; 0x0b
     5d8:	dc 86       	std	Y+12, r13	; 0x0c
     5da:	ed 86       	std	Y+13, r14	; 0x0d
     5dc:	fe 86       	std	Y+14, r15	; 0x0e
     5de:	0f 87       	std	Y+15, r16	; 0x0f
     5e0:	18 8b       	std	Y+16, r17	; 0x10
     5e2:	29 84       	ldd	r2, Y+9	; 0x09
     5e4:	3a 84       	ldd	r3, Y+10	; 0x0a
     5e6:	4b 84       	ldd	r4, Y+11	; 0x0b
     5e8:	5c 84       	ldd	r5, Y+12	; 0x0c
     5ea:	ed 84       	ldd	r14, Y+13	; 0x0d
     5ec:	fe 84       	ldd	r15, Y+14	; 0x0e
     5ee:	0f 85       	ldd	r16, Y+15	; 0x0f
     5f0:	18 89       	ldd	r17, Y+16	; 0x10
     5f2:	69 80       	ldd	r6, Y+1	; 0x01
     5f4:	7a 80       	ldd	r7, Y+2	; 0x02
     5f6:	8b 80       	ldd	r8, Y+3	; 0x03
     5f8:	9c 80       	ldd	r9, Y+4	; 0x04
     5fa:	6d a6       	std	Y+45, r6	; 0x2d
     5fc:	7e a6       	std	Y+46, r7	; 0x2e
     5fe:	8f a6       	std	Y+47, r8	; 0x2f
     600:	98 aa       	std	Y+48, r9	; 0x30
     602:	6d 80       	ldd	r6, Y+5	; 0x05
     604:	7e 80       	ldd	r7, Y+6	; 0x06
     606:	8f 80       	ldd	r8, Y+7	; 0x07
     608:	98 84       	ldd	r9, Y+8	; 0x08
     60a:	e1 14       	cp	r14, r1
     60c:	f1 04       	cpc	r15, r1
     60e:	01 05       	cpc	r16, r1
     610:	11 05       	cpc	r17, r1
     612:	09 f0       	breq	.+2      	; 0x616 <__udivdi3+0x80>
     614:	b3 c3       	rjmp	.+1894   	; 0xd7c <__stack+0x51d>
     616:	62 14       	cp	r6, r2
     618:	73 04       	cpc	r7, r3
     61a:	84 04       	cpc	r8, r4
     61c:	95 04       	cpc	r9, r5
     61e:	08 f0       	brcs	.+2      	; 0x622 <__udivdi3+0x8c>
     620:	3d c1       	rjmp	.+634    	; 0x89c <__stack+0x3d>
     622:	00 e0       	ldi	r16, 0x00	; 0
     624:	20 16       	cp	r2, r16
     626:	00 e0       	ldi	r16, 0x00	; 0
     628:	30 06       	cpc	r3, r16
     62a:	01 e0       	ldi	r16, 0x01	; 1
     62c:	40 06       	cpc	r4, r16
     62e:	00 e0       	ldi	r16, 0x00	; 0
     630:	50 06       	cpc	r5, r16
     632:	88 f4       	brcc	.+34     	; 0x656 <__udivdi3+0xc0>
     634:	1f ef       	ldi	r17, 0xFF	; 255
     636:	21 16       	cp	r2, r17
     638:	31 04       	cpc	r3, r1
     63a:	41 04       	cpc	r4, r1
     63c:	51 04       	cpc	r5, r1
     63e:	39 f0       	breq	.+14     	; 0x64e <__udivdi3+0xb8>
     640:	30 f0       	brcs	.+12     	; 0x64e <__udivdi3+0xb8>
     642:	48 e0       	ldi	r20, 0x08	; 8
     644:	e4 2e       	mov	r14, r20
     646:	f1 2c       	mov	r15, r1
     648:	01 2d       	mov	r16, r1
     64a:	11 2d       	mov	r17, r1
     64c:	18 c0       	rjmp	.+48     	; 0x67e <__udivdi3+0xe8>
     64e:	ee 24       	eor	r14, r14
     650:	ff 24       	eor	r15, r15
     652:	87 01       	movw	r16, r14
     654:	14 c0       	rjmp	.+40     	; 0x67e <__udivdi3+0xe8>
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	22 16       	cp	r2, r18
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	32 06       	cpc	r3, r18
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	42 06       	cpc	r4, r18
     662:	21 e0       	ldi	r18, 0x01	; 1
     664:	52 06       	cpc	r5, r18
     666:	30 f0       	brcs	.+12     	; 0x674 <__udivdi3+0xde>
     668:	38 e1       	ldi	r19, 0x18	; 24
     66a:	e3 2e       	mov	r14, r19
     66c:	f1 2c       	mov	r15, r1
     66e:	01 2d       	mov	r16, r1
     670:	11 2d       	mov	r17, r1
     672:	05 c0       	rjmp	.+10     	; 0x67e <__udivdi3+0xe8>
     674:	20 e1       	ldi	r18, 0x10	; 16
     676:	e2 2e       	mov	r14, r18
     678:	f1 2c       	mov	r15, r1
     67a:	01 2d       	mov	r16, r1
     67c:	11 2d       	mov	r17, r1
     67e:	d2 01       	movw	r26, r4
     680:	c1 01       	movw	r24, r2
     682:	0e 2c       	mov	r0, r14
     684:	04 c0       	rjmp	.+8      	; 0x68e <__udivdi3+0xf8>
     686:	b6 95       	lsr	r27
     688:	a7 95       	ror	r26
     68a:	97 95       	ror	r25
     68c:	87 95       	ror	r24
     68e:	0a 94       	dec	r0
     690:	d2 f7       	brpl	.-12     	; 0x686 <__udivdi3+0xf0>
     692:	88 59       	subi	r24, 0x98	; 152
     694:	9f 4f       	sbci	r25, 0xFF	; 255
     696:	dc 01       	movw	r26, r24
     698:	2c 91       	ld	r18, X
     69a:	80 e2       	ldi	r24, 0x20	; 32
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	a0 e0       	ldi	r26, 0x00	; 0
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	8e 19       	sub	r24, r14
     6a4:	9f 09       	sbc	r25, r15
     6a6:	a0 0b       	sbc	r26, r16
     6a8:	b1 0b       	sbc	r27, r17
     6aa:	7c 01       	movw	r14, r24
     6ac:	8d 01       	movw	r16, r26
     6ae:	e2 1a       	sub	r14, r18
     6b0:	f1 08       	sbc	r15, r1
     6b2:	01 09       	sbc	r16, r1
     6b4:	11 09       	sbc	r17, r1
     6b6:	e1 14       	cp	r14, r1
     6b8:	f1 04       	cpc	r15, r1
     6ba:	01 05       	cpc	r16, r1
     6bc:	11 05       	cpc	r17, r1
     6be:	a1 f1       	breq	.+104    	; 0x728 <__udivdi3+0x192>
     6c0:	0e 2c       	mov	r0, r14
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <__udivdi3+0x136>
     6c4:	22 0c       	add	r2, r2
     6c6:	33 1c       	adc	r3, r3
     6c8:	44 1c       	adc	r4, r4
     6ca:	55 1c       	adc	r5, r5
     6cc:	0a 94       	dec	r0
     6ce:	d2 f7       	brpl	.-12     	; 0x6c4 <__udivdi3+0x12e>
     6d0:	a4 01       	movw	r20, r8
     6d2:	93 01       	movw	r18, r6
     6d4:	0e 2c       	mov	r0, r14
     6d6:	04 c0       	rjmp	.+8      	; 0x6e0 <__udivdi3+0x14a>
     6d8:	22 0f       	add	r18, r18
     6da:	33 1f       	adc	r19, r19
     6dc:	44 1f       	adc	r20, r20
     6de:	55 1f       	adc	r21, r21
     6e0:	0a 94       	dec	r0
     6e2:	d2 f7       	brpl	.-12     	; 0x6d8 <__udivdi3+0x142>
     6e4:	80 e2       	ldi	r24, 0x20	; 32
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	8e 19       	sub	r24, r14
     6ea:	9f 09       	sbc	r25, r15
     6ec:	6d a4       	ldd	r6, Y+45	; 0x2d
     6ee:	7e a4       	ldd	r7, Y+46	; 0x2e
     6f0:	8f a4       	ldd	r8, Y+47	; 0x2f
     6f2:	98 a8       	ldd	r9, Y+48	; 0x30
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__udivdi3+0x168>
     6f6:	96 94       	lsr	r9
     6f8:	87 94       	ror	r8
     6fa:	77 94       	ror	r7
     6fc:	67 94       	ror	r6
     6fe:	8a 95       	dec	r24
     700:	d2 f7       	brpl	.-12     	; 0x6f6 <__udivdi3+0x160>
     702:	62 2a       	or	r6, r18
     704:	73 2a       	or	r7, r19
     706:	84 2a       	or	r8, r20
     708:	95 2a       	or	r9, r21
     70a:	ad a4       	ldd	r10, Y+45	; 0x2d
     70c:	be a4       	ldd	r11, Y+46	; 0x2e
     70e:	cf a4       	ldd	r12, Y+47	; 0x2f
     710:	d8 a8       	ldd	r13, Y+48	; 0x30
     712:	04 c0       	rjmp	.+8      	; 0x71c <__udivdi3+0x186>
     714:	aa 0c       	add	r10, r10
     716:	bb 1c       	adc	r11, r11
     718:	cc 1c       	adc	r12, r12
     71a:	dd 1c       	adc	r13, r13
     71c:	ea 94       	dec	r14
     71e:	d2 f7       	brpl	.-12     	; 0x714 <__udivdi3+0x17e>
     720:	ad a6       	std	Y+45, r10	; 0x2d
     722:	be a6       	std	Y+46, r11	; 0x2e
     724:	cf a6       	std	Y+47, r12	; 0x2f
     726:	d8 aa       	std	Y+48, r13	; 0x30
     728:	62 01       	movw	r12, r4
     72a:	ee 24       	eor	r14, r14
     72c:	ff 24       	eor	r15, r15
     72e:	cd aa       	std	Y+53, r12	; 0x35
     730:	de aa       	std	Y+54, r13	; 0x36
     732:	ef aa       	std	Y+55, r14	; 0x37
     734:	f8 ae       	std	Y+56, r15	; 0x38
     736:	92 01       	movw	r18, r4
     738:	81 01       	movw	r16, r2
     73a:	20 70       	andi	r18, 0x00	; 0
     73c:	30 70       	andi	r19, 0x00	; 0
     73e:	09 af       	std	Y+57, r16	; 0x39
     740:	1a af       	std	Y+58, r17	; 0x3a
     742:	2b af       	std	Y+59, r18	; 0x3b
     744:	3c af       	std	Y+60, r19	; 0x3c
     746:	c4 01       	movw	r24, r8
     748:	b3 01       	movw	r22, r6
     74a:	a7 01       	movw	r20, r14
     74c:	96 01       	movw	r18, r12
     74e:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     752:	7b 01       	movw	r14, r22
     754:	8c 01       	movw	r16, r24
     756:	c4 01       	movw	r24, r8
     758:	b3 01       	movw	r22, r6
     75a:	2d a9       	ldd	r18, Y+53	; 0x35
     75c:	3e a9       	ldd	r19, Y+54	; 0x36
     75e:	4f a9       	ldd	r20, Y+55	; 0x37
     760:	58 ad       	ldd	r21, Y+56	; 0x38
     762:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     766:	c9 01       	movw	r24, r18
     768:	da 01       	movw	r26, r20
     76a:	3c 01       	movw	r6, r24
     76c:	4d 01       	movw	r8, r26
     76e:	c4 01       	movw	r24, r8
     770:	b3 01       	movw	r22, r6
     772:	29 ad       	ldd	r18, Y+57	; 0x39
     774:	3a ad       	ldd	r19, Y+58	; 0x3a
     776:	4b ad       	ldd	r20, Y+59	; 0x3b
     778:	5c ad       	ldd	r21, Y+60	; 0x3c
     77a:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
     77e:	9b 01       	movw	r18, r22
     780:	ac 01       	movw	r20, r24
     782:	87 01       	movw	r16, r14
     784:	ff 24       	eor	r15, r15
     786:	ee 24       	eor	r14, r14
     788:	ad a4       	ldd	r10, Y+45	; 0x2d
     78a:	be a4       	ldd	r11, Y+46	; 0x2e
     78c:	cf a4       	ldd	r12, Y+47	; 0x2f
     78e:	d8 a8       	ldd	r13, Y+48	; 0x30
     790:	c6 01       	movw	r24, r12
     792:	aa 27       	eor	r26, r26
     794:	bb 27       	eor	r27, r27
     796:	57 01       	movw	r10, r14
     798:	68 01       	movw	r12, r16
     79a:	a8 2a       	or	r10, r24
     79c:	b9 2a       	or	r11, r25
     79e:	ca 2a       	or	r12, r26
     7a0:	db 2a       	or	r13, r27
     7a2:	a2 16       	cp	r10, r18
     7a4:	b3 06       	cpc	r11, r19
     7a6:	c4 06       	cpc	r12, r20
     7a8:	d5 06       	cpc	r13, r21
     7aa:	e0 f4       	brcc	.+56     	; 0x7e4 <__udivdi3+0x24e>
     7ac:	08 94       	sec
     7ae:	61 08       	sbc	r6, r1
     7b0:	71 08       	sbc	r7, r1
     7b2:	81 08       	sbc	r8, r1
     7b4:	91 08       	sbc	r9, r1
     7b6:	a2 0c       	add	r10, r2
     7b8:	b3 1c       	adc	r11, r3
     7ba:	c4 1c       	adc	r12, r4
     7bc:	d5 1c       	adc	r13, r5
     7be:	a2 14       	cp	r10, r2
     7c0:	b3 04       	cpc	r11, r3
     7c2:	c4 04       	cpc	r12, r4
     7c4:	d5 04       	cpc	r13, r5
     7c6:	70 f0       	brcs	.+28     	; 0x7e4 <__udivdi3+0x24e>
     7c8:	a2 16       	cp	r10, r18
     7ca:	b3 06       	cpc	r11, r19
     7cc:	c4 06       	cpc	r12, r20
     7ce:	d5 06       	cpc	r13, r21
     7d0:	48 f4       	brcc	.+18     	; 0x7e4 <__udivdi3+0x24e>
     7d2:	08 94       	sec
     7d4:	61 08       	sbc	r6, r1
     7d6:	71 08       	sbc	r7, r1
     7d8:	81 08       	sbc	r8, r1
     7da:	91 08       	sbc	r9, r1
     7dc:	a2 0c       	add	r10, r2
     7de:	b3 1c       	adc	r11, r3
     7e0:	c4 1c       	adc	r12, r4
     7e2:	d5 1c       	adc	r13, r5
     7e4:	a2 1a       	sub	r10, r18
     7e6:	b3 0a       	sbc	r11, r19
     7e8:	c4 0a       	sbc	r12, r20
     7ea:	d5 0a       	sbc	r13, r21
     7ec:	c6 01       	movw	r24, r12
     7ee:	b5 01       	movw	r22, r10
     7f0:	2d a9       	ldd	r18, Y+53	; 0x35
     7f2:	3e a9       	ldd	r19, Y+54	; 0x36
     7f4:	4f a9       	ldd	r20, Y+55	; 0x37
     7f6:	58 ad       	ldd	r21, Y+56	; 0x38
     7f8:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     7fc:	7b 01       	movw	r14, r22
     7fe:	8c 01       	movw	r16, r24
     800:	c6 01       	movw	r24, r12
     802:	b5 01       	movw	r22, r10
     804:	2d a9       	ldd	r18, Y+53	; 0x35
     806:	3e a9       	ldd	r19, Y+54	; 0x36
     808:	4f a9       	ldd	r20, Y+55	; 0x37
     80a:	58 ad       	ldd	r21, Y+56	; 0x38
     80c:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     810:	c9 01       	movw	r24, r18
     812:	da 01       	movw	r26, r20
     814:	5c 01       	movw	r10, r24
     816:	6d 01       	movw	r12, r26
     818:	c6 01       	movw	r24, r12
     81a:	b5 01       	movw	r22, r10
     81c:	29 ad       	ldd	r18, Y+57	; 0x39
     81e:	3a ad       	ldd	r19, Y+58	; 0x3a
     820:	4b ad       	ldd	r20, Y+59	; 0x3b
     822:	5c ad       	ldd	r21, Y+60	; 0x3c
     824:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
     828:	9b 01       	movw	r18, r22
     82a:	ac 01       	movw	r20, r24
     82c:	87 01       	movw	r16, r14
     82e:	ff 24       	eor	r15, r15
     830:	ee 24       	eor	r14, r14
     832:	8d a5       	ldd	r24, Y+45	; 0x2d
     834:	9e a5       	ldd	r25, Y+46	; 0x2e
     836:	af a5       	ldd	r26, Y+47	; 0x2f
     838:	b8 a9       	ldd	r27, Y+48	; 0x30
     83a:	a0 70       	andi	r26, 0x00	; 0
     83c:	b0 70       	andi	r27, 0x00	; 0
     83e:	e8 2a       	or	r14, r24
     840:	f9 2a       	or	r15, r25
     842:	0a 2b       	or	r16, r26
     844:	1b 2b       	or	r17, r27
     846:	e2 16       	cp	r14, r18
     848:	f3 06       	cpc	r15, r19
     84a:	04 07       	cpc	r16, r20
     84c:	15 07       	cpc	r17, r21
     84e:	c0 f4       	brcc	.+48     	; 0x880 <__stack+0x21>
     850:	08 94       	sec
     852:	a1 08       	sbc	r10, r1
     854:	b1 08       	sbc	r11, r1
     856:	c1 08       	sbc	r12, r1
     858:	d1 08       	sbc	r13, r1
     85a:	e2 0c       	add	r14, r2
     85c:	f3 1c       	adc	r15, r3
     85e:	04 1d       	adc	r16, r4
     860:	15 1d       	adc	r17, r5
     862:	e2 14       	cp	r14, r2
     864:	f3 04       	cpc	r15, r3
     866:	04 05       	cpc	r16, r4
     868:	15 05       	cpc	r17, r5
     86a:	50 f0       	brcs	.+20     	; 0x880 <__stack+0x21>
     86c:	e2 16       	cp	r14, r18
     86e:	f3 06       	cpc	r15, r19
     870:	04 07       	cpc	r16, r20
     872:	15 07       	cpc	r17, r21
     874:	28 f4       	brcc	.+10     	; 0x880 <__stack+0x21>
     876:	08 94       	sec
     878:	a1 08       	sbc	r10, r1
     87a:	b1 08       	sbc	r11, r1
     87c:	c1 08       	sbc	r12, r1
     87e:	d1 08       	sbc	r13, r1
     880:	d3 01       	movw	r26, r6
     882:	99 27       	eor	r25, r25
     884:	88 27       	eor	r24, r24
     886:	86 01       	movw	r16, r12
     888:	75 01       	movw	r14, r10
     88a:	e8 2a       	or	r14, r24
     88c:	f9 2a       	or	r15, r25
     88e:	0a 2b       	or	r16, r26
     890:	1b 2b       	or	r17, r27
     892:	e9 aa       	std	Y+49, r14	; 0x31
     894:	fa aa       	std	Y+50, r15	; 0x32
     896:	0b ab       	std	Y+51, r16	; 0x33
     898:	1c ab       	std	Y+52, r17	; 0x34
     89a:	cf c4       	rjmp	.+2462   	; 0x123a <__stack+0x9db>
     89c:	21 14       	cp	r2, r1
     89e:	31 04       	cpc	r3, r1
     8a0:	41 04       	cpc	r4, r1
     8a2:	51 04       	cpc	r5, r1
     8a4:	71 f4       	brne	.+28     	; 0x8c2 <__stack+0x63>
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 e0       	ldi	r20, 0x00	; 0
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     8ba:	c9 01       	movw	r24, r18
     8bc:	da 01       	movw	r26, r20
     8be:	1c 01       	movw	r2, r24
     8c0:	2d 01       	movw	r4, r26
     8c2:	00 e0       	ldi	r16, 0x00	; 0
     8c4:	20 16       	cp	r2, r16
     8c6:	00 e0       	ldi	r16, 0x00	; 0
     8c8:	30 06       	cpc	r3, r16
     8ca:	01 e0       	ldi	r16, 0x01	; 1
     8cc:	40 06       	cpc	r4, r16
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	50 06       	cpc	r5, r16
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__stack+0x97>
     8d4:	1f ef       	ldi	r17, 0xFF	; 255
     8d6:	21 16       	cp	r2, r17
     8d8:	31 04       	cpc	r3, r1
     8da:	41 04       	cpc	r4, r1
     8dc:	51 04       	cpc	r5, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__stack+0x8d>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__stack+0x8d>
     8e2:	48 e0       	ldi	r20, 0x08	; 8
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	70 e0       	ldi	r23, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__stack+0xbb>
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__stack+0xbb>
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	22 16       	cp	r2, r18
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	32 06       	cpc	r3, r18
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	42 06       	cpc	r4, r18
     902:	21 e0       	ldi	r18, 0x01	; 1
     904:	52 06       	cpc	r5, r18
     906:	28 f0       	brcs	.+10     	; 0x912 <__stack+0xb3>
     908:	48 e1       	ldi	r20, 0x18	; 24
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__stack+0xbb>
     912:	40 e1       	ldi	r20, 0x10	; 16
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	d2 01       	movw	r26, r4
     91c:	c1 01       	movw	r24, r2
     91e:	04 2e       	mov	r0, r20
     920:	04 c0       	rjmp	.+8      	; 0x92a <__stack+0xcb>
     922:	b6 95       	lsr	r27
     924:	a7 95       	ror	r26
     926:	97 95       	ror	r25
     928:	87 95       	ror	r24
     92a:	0a 94       	dec	r0
     92c:	d2 f7       	brpl	.-12     	; 0x922 <__stack+0xc3>
     92e:	88 59       	subi	r24, 0x98	; 152
     930:	9f 4f       	sbci	r25, 0xFF	; 255
     932:	dc 01       	movw	r26, r24
     934:	2c 91       	ld	r18, X
     936:	e0 e2       	ldi	r30, 0x20	; 32
     938:	ee 2e       	mov	r14, r30
     93a:	f1 2c       	mov	r15, r1
     93c:	01 2d       	mov	r16, r1
     93e:	11 2d       	mov	r17, r1
     940:	d8 01       	movw	r26, r16
     942:	c7 01       	movw	r24, r14
     944:	84 1b       	sub	r24, r20
     946:	95 0b       	sbc	r25, r21
     948:	a6 0b       	sbc	r26, r22
     94a:	b7 0b       	sbc	r27, r23
     94c:	82 1b       	sub	r24, r18
     94e:	91 09       	sbc	r25, r1
     950:	a1 09       	sbc	r26, r1
     952:	b1 09       	sbc	r27, r1
     954:	00 97       	sbiw	r24, 0x00	; 0
     956:	a1 05       	cpc	r26, r1
     958:	b1 05       	cpc	r27, r1
     95a:	61 f4       	brne	.+24     	; 0x974 <__stack+0x115>
     95c:	64 01       	movw	r12, r8
     95e:	53 01       	movw	r10, r6
     960:	a2 18       	sub	r10, r2
     962:	b3 08       	sbc	r11, r3
     964:	c4 08       	sbc	r12, r4
     966:	d5 08       	sbc	r13, r5
     968:	31 e0       	ldi	r19, 0x01	; 1
     96a:	63 2e       	mov	r6, r19
     96c:	71 2c       	mov	r7, r1
     96e:	81 2c       	mov	r8, r1
     970:	91 2c       	mov	r9, r1
     972:	1e c1       	rjmp	.+572    	; 0xbb0 <__stack+0x351>
     974:	6f 96       	adiw	r28, 0x1f	; 31
     976:	8f af       	std	Y+63, r24	; 0x3f
     978:	6f 97       	sbiw	r28, 0x1f	; 31
     97a:	08 2e       	mov	r0, r24
     97c:	04 c0       	rjmp	.+8      	; 0x986 <__stack+0x127>
     97e:	22 0c       	add	r2, r2
     980:	33 1c       	adc	r3, r3
     982:	44 1c       	adc	r4, r4
     984:	55 1c       	adc	r5, r5
     986:	0a 94       	dec	r0
     988:	d2 f7       	brpl	.-12     	; 0x97e <__stack+0x11f>
     98a:	ee 2d       	mov	r30, r14
     98c:	e8 1b       	sub	r30, r24
     98e:	64 01       	movw	r12, r8
     990:	53 01       	movw	r10, r6
     992:	0e 2e       	mov	r0, r30
     994:	04 c0       	rjmp	.+8      	; 0x99e <__stack+0x13f>
     996:	d6 94       	lsr	r13
     998:	c7 94       	ror	r12
     99a:	b7 94       	ror	r11
     99c:	a7 94       	ror	r10
     99e:	0a 94       	dec	r0
     9a0:	d2 f7       	brpl	.-12     	; 0x996 <__stack+0x137>
     9a2:	a4 01       	movw	r20, r8
     9a4:	93 01       	movw	r18, r6
     9a6:	6f 96       	adiw	r28, 0x1f	; 31
     9a8:	0f ac       	ldd	r0, Y+63	; 0x3f
     9aa:	6f 97       	sbiw	r28, 0x1f	; 31
     9ac:	04 c0       	rjmp	.+8      	; 0x9b6 <__stack+0x157>
     9ae:	22 0f       	add	r18, r18
     9b0:	33 1f       	adc	r19, r19
     9b2:	44 1f       	adc	r20, r20
     9b4:	55 1f       	adc	r21, r21
     9b6:	0a 94       	dec	r0
     9b8:	d2 f7       	brpl	.-12     	; 0x9ae <__stack+0x14f>
     9ba:	6d a4       	ldd	r6, Y+45	; 0x2d
     9bc:	7e a4       	ldd	r7, Y+46	; 0x2e
     9be:	8f a4       	ldd	r8, Y+47	; 0x2f
     9c0:	98 a8       	ldd	r9, Y+48	; 0x30
     9c2:	0e 2e       	mov	r0, r30
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__stack+0x16f>
     9c6:	96 94       	lsr	r9
     9c8:	87 94       	ror	r8
     9ca:	77 94       	ror	r7
     9cc:	67 94       	ror	r6
     9ce:	0a 94       	dec	r0
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__stack+0x167>
     9d2:	84 01       	movw	r16, r8
     9d4:	73 01       	movw	r14, r6
     9d6:	e2 2a       	or	r14, r18
     9d8:	f3 2a       	or	r15, r19
     9da:	04 2b       	or	r16, r20
     9dc:	15 2b       	or	r17, r21
     9de:	e9 a6       	std	Y+41, r14	; 0x29
     9e0:	fa a6       	std	Y+42, r15	; 0x2a
     9e2:	0b a7       	std	Y+43, r16	; 0x2b
     9e4:	1c a7       	std	Y+44, r17	; 0x2c
     9e6:	32 01       	movw	r6, r4
     9e8:	88 24       	eor	r8, r8
     9ea:	99 24       	eor	r9, r9
     9ec:	92 01       	movw	r18, r4
     9ee:	81 01       	movw	r16, r2
     9f0:	20 70       	andi	r18, 0x00	; 0
     9f2:	30 70       	andi	r19, 0x00	; 0
     9f4:	21 96       	adiw	r28, 0x01	; 1
     9f6:	0c af       	std	Y+60, r16	; 0x3c
     9f8:	1d af       	std	Y+61, r17	; 0x3d
     9fa:	2e af       	std	Y+62, r18	; 0x3e
     9fc:	3f af       	std	Y+63, r19	; 0x3f
     9fe:	21 97       	sbiw	r28, 0x01	; 1
     a00:	c6 01       	movw	r24, r12
     a02:	b5 01       	movw	r22, r10
     a04:	a4 01       	movw	r20, r8
     a06:	93 01       	movw	r18, r6
     a08:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     a0c:	7b 01       	movw	r14, r22
     a0e:	8c 01       	movw	r16, r24
     a10:	c6 01       	movw	r24, r12
     a12:	b5 01       	movw	r22, r10
     a14:	a4 01       	movw	r20, r8
     a16:	93 01       	movw	r18, r6
     a18:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     a1c:	c9 01       	movw	r24, r18
     a1e:	da 01       	movw	r26, r20
     a20:	25 96       	adiw	r28, 0x05	; 5
     a22:	8c af       	std	Y+60, r24	; 0x3c
     a24:	9d af       	std	Y+61, r25	; 0x3d
     a26:	ae af       	std	Y+62, r26	; 0x3e
     a28:	bf af       	std	Y+63, r27	; 0x3f
     a2a:	25 97       	sbiw	r28, 0x05	; 5
     a2c:	bc 01       	movw	r22, r24
     a2e:	cd 01       	movw	r24, r26
     a30:	21 96       	adiw	r28, 0x01	; 1
     a32:	2c ad       	ldd	r18, Y+60	; 0x3c
     a34:	3d ad       	ldd	r19, Y+61	; 0x3d
     a36:	4e ad       	ldd	r20, Y+62	; 0x3e
     a38:	5f ad       	ldd	r21, Y+63	; 0x3f
     a3a:	21 97       	sbiw	r28, 0x01	; 1
     a3c:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
     a40:	9b 01       	movw	r18, r22
     a42:	ac 01       	movw	r20, r24
     a44:	87 01       	movw	r16, r14
     a46:	ff 24       	eor	r15, r15
     a48:	ee 24       	eor	r14, r14
     a4a:	a9 a4       	ldd	r10, Y+41	; 0x29
     a4c:	ba a4       	ldd	r11, Y+42	; 0x2a
     a4e:	cb a4       	ldd	r12, Y+43	; 0x2b
     a50:	dc a4       	ldd	r13, Y+44	; 0x2c
     a52:	c6 01       	movw	r24, r12
     a54:	aa 27       	eor	r26, r26
     a56:	bb 27       	eor	r27, r27
     a58:	5c 01       	movw	r10, r24
     a5a:	6d 01       	movw	r12, r26
     a5c:	ae 28       	or	r10, r14
     a5e:	bf 28       	or	r11, r15
     a60:	c0 2a       	or	r12, r16
     a62:	d1 2a       	or	r13, r17
     a64:	a2 16       	cp	r10, r18
     a66:	b3 06       	cpc	r11, r19
     a68:	c4 06       	cpc	r12, r20
     a6a:	d5 06       	cpc	r13, r21
     a6c:	60 f5       	brcc	.+88     	; 0xac6 <__stack+0x267>
     a6e:	25 96       	adiw	r28, 0x05	; 5
     a70:	6c ad       	ldd	r22, Y+60	; 0x3c
     a72:	7d ad       	ldd	r23, Y+61	; 0x3d
     a74:	8e ad       	ldd	r24, Y+62	; 0x3e
     a76:	9f ad       	ldd	r25, Y+63	; 0x3f
     a78:	25 97       	sbiw	r28, 0x05	; 5
     a7a:	61 50       	subi	r22, 0x01	; 1
     a7c:	70 40       	sbci	r23, 0x00	; 0
     a7e:	80 40       	sbci	r24, 0x00	; 0
     a80:	90 40       	sbci	r25, 0x00	; 0
     a82:	25 96       	adiw	r28, 0x05	; 5
     a84:	6c af       	std	Y+60, r22	; 0x3c
     a86:	7d af       	std	Y+61, r23	; 0x3d
     a88:	8e af       	std	Y+62, r24	; 0x3e
     a8a:	9f af       	std	Y+63, r25	; 0x3f
     a8c:	25 97       	sbiw	r28, 0x05	; 5
     a8e:	a2 0c       	add	r10, r2
     a90:	b3 1c       	adc	r11, r3
     a92:	c4 1c       	adc	r12, r4
     a94:	d5 1c       	adc	r13, r5
     a96:	a2 14       	cp	r10, r2
     a98:	b3 04       	cpc	r11, r3
     a9a:	c4 04       	cpc	r12, r4
     a9c:	d5 04       	cpc	r13, r5
     a9e:	98 f0       	brcs	.+38     	; 0xac6 <__stack+0x267>
     aa0:	a2 16       	cp	r10, r18
     aa2:	b3 06       	cpc	r11, r19
     aa4:	c4 06       	cpc	r12, r20
     aa6:	d5 06       	cpc	r13, r21
     aa8:	70 f4       	brcc	.+28     	; 0xac6 <__stack+0x267>
     aaa:	61 50       	subi	r22, 0x01	; 1
     aac:	70 40       	sbci	r23, 0x00	; 0
     aae:	80 40       	sbci	r24, 0x00	; 0
     ab0:	90 40       	sbci	r25, 0x00	; 0
     ab2:	25 96       	adiw	r28, 0x05	; 5
     ab4:	6c af       	std	Y+60, r22	; 0x3c
     ab6:	7d af       	std	Y+61, r23	; 0x3d
     ab8:	8e af       	std	Y+62, r24	; 0x3e
     aba:	9f af       	std	Y+63, r25	; 0x3f
     abc:	25 97       	sbiw	r28, 0x05	; 5
     abe:	a2 0c       	add	r10, r2
     ac0:	b3 1c       	adc	r11, r3
     ac2:	c4 1c       	adc	r12, r4
     ac4:	d5 1c       	adc	r13, r5
     ac6:	a2 1a       	sub	r10, r18
     ac8:	b3 0a       	sbc	r11, r19
     aca:	c4 0a       	sbc	r12, r20
     acc:	d5 0a       	sbc	r13, r21
     ace:	c6 01       	movw	r24, r12
     ad0:	b5 01       	movw	r22, r10
     ad2:	a4 01       	movw	r20, r8
     ad4:	93 01       	movw	r18, r6
     ad6:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     ada:	7b 01       	movw	r14, r22
     adc:	8c 01       	movw	r16, r24
     ade:	c6 01       	movw	r24, r12
     ae0:	b5 01       	movw	r22, r10
     ae2:	a4 01       	movw	r20, r8
     ae4:	93 01       	movw	r18, r6
     ae6:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     aea:	c9 01       	movw	r24, r18
     aec:	da 01       	movw	r26, r20
     aee:	3c 01       	movw	r6, r24
     af0:	4d 01       	movw	r8, r26
     af2:	c4 01       	movw	r24, r8
     af4:	b3 01       	movw	r22, r6
     af6:	21 96       	adiw	r28, 0x01	; 1
     af8:	2c ad       	ldd	r18, Y+60	; 0x3c
     afa:	3d ad       	ldd	r19, Y+61	; 0x3d
     afc:	4e ad       	ldd	r20, Y+62	; 0x3e
     afe:	5f ad       	ldd	r21, Y+63	; 0x3f
     b00:	21 97       	sbiw	r28, 0x01	; 1
     b02:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
     b06:	9b 01       	movw	r18, r22
     b08:	ac 01       	movw	r20, r24
     b0a:	87 01       	movw	r16, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	ee 24       	eor	r14, r14
     b10:	89 a5       	ldd	r24, Y+41	; 0x29
     b12:	9a a5       	ldd	r25, Y+42	; 0x2a
     b14:	ab a5       	ldd	r26, Y+43	; 0x2b
     b16:	bc a5       	ldd	r27, Y+44	; 0x2c
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	57 01       	movw	r10, r14
     b1e:	68 01       	movw	r12, r16
     b20:	a8 2a       	or	r10, r24
     b22:	b9 2a       	or	r11, r25
     b24:	ca 2a       	or	r12, r26
     b26:	db 2a       	or	r13, r27
     b28:	a2 16       	cp	r10, r18
     b2a:	b3 06       	cpc	r11, r19
     b2c:	c4 06       	cpc	r12, r20
     b2e:	d5 06       	cpc	r13, r21
     b30:	e0 f4       	brcc	.+56     	; 0xb6a <__stack+0x30b>
     b32:	08 94       	sec
     b34:	61 08       	sbc	r6, r1
     b36:	71 08       	sbc	r7, r1
     b38:	81 08       	sbc	r8, r1
     b3a:	91 08       	sbc	r9, r1
     b3c:	a2 0c       	add	r10, r2
     b3e:	b3 1c       	adc	r11, r3
     b40:	c4 1c       	adc	r12, r4
     b42:	d5 1c       	adc	r13, r5
     b44:	a2 14       	cp	r10, r2
     b46:	b3 04       	cpc	r11, r3
     b48:	c4 04       	cpc	r12, r4
     b4a:	d5 04       	cpc	r13, r5
     b4c:	70 f0       	brcs	.+28     	; 0xb6a <__stack+0x30b>
     b4e:	a2 16       	cp	r10, r18
     b50:	b3 06       	cpc	r11, r19
     b52:	c4 06       	cpc	r12, r20
     b54:	d5 06       	cpc	r13, r21
     b56:	48 f4       	brcc	.+18     	; 0xb6a <__stack+0x30b>
     b58:	08 94       	sec
     b5a:	61 08       	sbc	r6, r1
     b5c:	71 08       	sbc	r7, r1
     b5e:	81 08       	sbc	r8, r1
     b60:	91 08       	sbc	r9, r1
     b62:	a2 0c       	add	r10, r2
     b64:	b3 1c       	adc	r11, r3
     b66:	c4 1c       	adc	r12, r4
     b68:	d5 1c       	adc	r13, r5
     b6a:	8d a5       	ldd	r24, Y+45	; 0x2d
     b6c:	9e a5       	ldd	r25, Y+46	; 0x2e
     b6e:	af a5       	ldd	r26, Y+47	; 0x2f
     b70:	b8 a9       	ldd	r27, Y+48	; 0x30
     b72:	6f 96       	adiw	r28, 0x1f	; 31
     b74:	0f ac       	ldd	r0, Y+63	; 0x3f
     b76:	6f 97       	sbiw	r28, 0x1f	; 31
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__stack+0x323>
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	aa 1f       	adc	r26, r26
     b80:	bb 1f       	adc	r27, r27
     b82:	0a 94       	dec	r0
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__stack+0x31b>
     b86:	8d a7       	std	Y+45, r24	; 0x2d
     b88:	9e a7       	std	Y+46, r25	; 0x2e
     b8a:	af a7       	std	Y+47, r26	; 0x2f
     b8c:	b8 ab       	std	Y+48, r27	; 0x30
     b8e:	a2 1a       	sub	r10, r18
     b90:	b3 0a       	sbc	r11, r19
     b92:	c4 0a       	sbc	r12, r20
     b94:	d5 0a       	sbc	r13, r21
     b96:	25 96       	adiw	r28, 0x05	; 5
     b98:	ec ac       	ldd	r14, Y+60	; 0x3c
     b9a:	fd ac       	ldd	r15, Y+61	; 0x3d
     b9c:	0e ad       	ldd	r16, Y+62	; 0x3e
     b9e:	1f ad       	ldd	r17, Y+63	; 0x3f
     ba0:	25 97       	sbiw	r28, 0x05	; 5
     ba2:	d7 01       	movw	r26, r14
     ba4:	99 27       	eor	r25, r25
     ba6:	88 27       	eor	r24, r24
     ba8:	68 2a       	or	r6, r24
     baa:	79 2a       	or	r7, r25
     bac:	8a 2a       	or	r8, r26
     bae:	9b 2a       	or	r9, r27
     bb0:	82 01       	movw	r16, r4
     bb2:	22 27       	eor	r18, r18
     bb4:	33 27       	eor	r19, r19
     bb6:	29 96       	adiw	r28, 0x09	; 9
     bb8:	0c af       	std	Y+60, r16	; 0x3c
     bba:	1d af       	std	Y+61, r17	; 0x3d
     bbc:	2e af       	std	Y+62, r18	; 0x3e
     bbe:	3f af       	std	Y+63, r19	; 0x3f
     bc0:	29 97       	sbiw	r28, 0x09	; 9
     bc2:	a2 01       	movw	r20, r4
     bc4:	91 01       	movw	r18, r2
     bc6:	40 70       	andi	r20, 0x00	; 0
     bc8:	50 70       	andi	r21, 0x00	; 0
     bca:	2d 96       	adiw	r28, 0x0d	; 13
     bcc:	2c af       	std	Y+60, r18	; 0x3c
     bce:	3d af       	std	Y+61, r19	; 0x3d
     bd0:	4e af       	std	Y+62, r20	; 0x3e
     bd2:	5f af       	std	Y+63, r21	; 0x3f
     bd4:	2d 97       	sbiw	r28, 0x0d	; 13
     bd6:	c6 01       	movw	r24, r12
     bd8:	b5 01       	movw	r22, r10
     bda:	29 96       	adiw	r28, 0x09	; 9
     bdc:	2c ad       	ldd	r18, Y+60	; 0x3c
     bde:	3d ad       	ldd	r19, Y+61	; 0x3d
     be0:	4e ad       	ldd	r20, Y+62	; 0x3e
     be2:	5f ad       	ldd	r21, Y+63	; 0x3f
     be4:	29 97       	sbiw	r28, 0x09	; 9
     be6:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     bea:	7b 01       	movw	r14, r22
     bec:	8c 01       	movw	r16, r24
     bee:	c6 01       	movw	r24, r12
     bf0:	b5 01       	movw	r22, r10
     bf2:	29 96       	adiw	r28, 0x09	; 9
     bf4:	2c ad       	ldd	r18, Y+60	; 0x3c
     bf6:	3d ad       	ldd	r19, Y+61	; 0x3d
     bf8:	4e ad       	ldd	r20, Y+62	; 0x3e
     bfa:	5f ad       	ldd	r21, Y+63	; 0x3f
     bfc:	29 97       	sbiw	r28, 0x09	; 9
     bfe:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     c02:	c9 01       	movw	r24, r18
     c04:	da 01       	movw	r26, r20
     c06:	61 96       	adiw	r28, 0x11	; 17
     c08:	8c af       	std	Y+60, r24	; 0x3c
     c0a:	9d af       	std	Y+61, r25	; 0x3d
     c0c:	ae af       	std	Y+62, r26	; 0x3e
     c0e:	bf af       	std	Y+63, r27	; 0x3f
     c10:	61 97       	sbiw	r28, 0x11	; 17
     c12:	bc 01       	movw	r22, r24
     c14:	cd 01       	movw	r24, r26
     c16:	2d 96       	adiw	r28, 0x0d	; 13
     c18:	2c ad       	ldd	r18, Y+60	; 0x3c
     c1a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c1c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c1e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c20:	2d 97       	sbiw	r28, 0x0d	; 13
     c22:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
     c26:	9b 01       	movw	r18, r22
     c28:	ac 01       	movw	r20, r24
     c2a:	87 01       	movw	r16, r14
     c2c:	ff 24       	eor	r15, r15
     c2e:	ee 24       	eor	r14, r14
     c30:	ad a4       	ldd	r10, Y+45	; 0x2d
     c32:	be a4       	ldd	r11, Y+46	; 0x2e
     c34:	cf a4       	ldd	r12, Y+47	; 0x2f
     c36:	d8 a8       	ldd	r13, Y+48	; 0x30
     c38:	c6 01       	movw	r24, r12
     c3a:	aa 27       	eor	r26, r26
     c3c:	bb 27       	eor	r27, r27
     c3e:	57 01       	movw	r10, r14
     c40:	68 01       	movw	r12, r16
     c42:	a8 2a       	or	r10, r24
     c44:	b9 2a       	or	r11, r25
     c46:	ca 2a       	or	r12, r26
     c48:	db 2a       	or	r13, r27
     c4a:	a2 16       	cp	r10, r18
     c4c:	b3 06       	cpc	r11, r19
     c4e:	c4 06       	cpc	r12, r20
     c50:	d5 06       	cpc	r13, r21
     c52:	60 f5       	brcc	.+88     	; 0xcac <__stack+0x44d>
     c54:	61 96       	adiw	r28, 0x11	; 17
     c56:	6c ad       	ldd	r22, Y+60	; 0x3c
     c58:	7d ad       	ldd	r23, Y+61	; 0x3d
     c5a:	8e ad       	ldd	r24, Y+62	; 0x3e
     c5c:	9f ad       	ldd	r25, Y+63	; 0x3f
     c5e:	61 97       	sbiw	r28, 0x11	; 17
     c60:	61 50       	subi	r22, 0x01	; 1
     c62:	70 40       	sbci	r23, 0x00	; 0
     c64:	80 40       	sbci	r24, 0x00	; 0
     c66:	90 40       	sbci	r25, 0x00	; 0
     c68:	61 96       	adiw	r28, 0x11	; 17
     c6a:	6c af       	std	Y+60, r22	; 0x3c
     c6c:	7d af       	std	Y+61, r23	; 0x3d
     c6e:	8e af       	std	Y+62, r24	; 0x3e
     c70:	9f af       	std	Y+63, r25	; 0x3f
     c72:	61 97       	sbiw	r28, 0x11	; 17
     c74:	a2 0c       	add	r10, r2
     c76:	b3 1c       	adc	r11, r3
     c78:	c4 1c       	adc	r12, r4
     c7a:	d5 1c       	adc	r13, r5
     c7c:	a2 14       	cp	r10, r2
     c7e:	b3 04       	cpc	r11, r3
     c80:	c4 04       	cpc	r12, r4
     c82:	d5 04       	cpc	r13, r5
     c84:	98 f0       	brcs	.+38     	; 0xcac <__stack+0x44d>
     c86:	a2 16       	cp	r10, r18
     c88:	b3 06       	cpc	r11, r19
     c8a:	c4 06       	cpc	r12, r20
     c8c:	d5 06       	cpc	r13, r21
     c8e:	70 f4       	brcc	.+28     	; 0xcac <__stack+0x44d>
     c90:	61 50       	subi	r22, 0x01	; 1
     c92:	70 40       	sbci	r23, 0x00	; 0
     c94:	80 40       	sbci	r24, 0x00	; 0
     c96:	90 40       	sbci	r25, 0x00	; 0
     c98:	61 96       	adiw	r28, 0x11	; 17
     c9a:	6c af       	std	Y+60, r22	; 0x3c
     c9c:	7d af       	std	Y+61, r23	; 0x3d
     c9e:	8e af       	std	Y+62, r24	; 0x3e
     ca0:	9f af       	std	Y+63, r25	; 0x3f
     ca2:	61 97       	sbiw	r28, 0x11	; 17
     ca4:	a2 0c       	add	r10, r2
     ca6:	b3 1c       	adc	r11, r3
     ca8:	c4 1c       	adc	r12, r4
     caa:	d5 1c       	adc	r13, r5
     cac:	a2 1a       	sub	r10, r18
     cae:	b3 0a       	sbc	r11, r19
     cb0:	c4 0a       	sbc	r12, r20
     cb2:	d5 0a       	sbc	r13, r21
     cb4:	c6 01       	movw	r24, r12
     cb6:	b5 01       	movw	r22, r10
     cb8:	29 96       	adiw	r28, 0x09	; 9
     cba:	2c ad       	ldd	r18, Y+60	; 0x3c
     cbc:	3d ad       	ldd	r19, Y+61	; 0x3d
     cbe:	4e ad       	ldd	r20, Y+62	; 0x3e
     cc0:	5f ad       	ldd	r21, Y+63	; 0x3f
     cc2:	29 97       	sbiw	r28, 0x09	; 9
     cc4:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     cc8:	7b 01       	movw	r14, r22
     cca:	8c 01       	movw	r16, r24
     ccc:	c6 01       	movw	r24, r12
     cce:	b5 01       	movw	r22, r10
     cd0:	29 96       	adiw	r28, 0x09	; 9
     cd2:	2c ad       	ldd	r18, Y+60	; 0x3c
     cd4:	3d ad       	ldd	r19, Y+61	; 0x3d
     cd6:	4e ad       	ldd	r20, Y+62	; 0x3e
     cd8:	5f ad       	ldd	r21, Y+63	; 0x3f
     cda:	29 97       	sbiw	r28, 0x09	; 9
     cdc:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     ce0:	c9 01       	movw	r24, r18
     ce2:	da 01       	movw	r26, r20
     ce4:	5c 01       	movw	r10, r24
     ce6:	6d 01       	movw	r12, r26
     ce8:	c6 01       	movw	r24, r12
     cea:	b5 01       	movw	r22, r10
     cec:	2d 96       	adiw	r28, 0x0d	; 13
     cee:	2c ad       	ldd	r18, Y+60	; 0x3c
     cf0:	3d ad       	ldd	r19, Y+61	; 0x3d
     cf2:	4e ad       	ldd	r20, Y+62	; 0x3e
     cf4:	5f ad       	ldd	r21, Y+63	; 0x3f
     cf6:	2d 97       	sbiw	r28, 0x0d	; 13
     cf8:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
     cfc:	9b 01       	movw	r18, r22
     cfe:	ac 01       	movw	r20, r24
     d00:	87 01       	movw	r16, r14
     d02:	ff 24       	eor	r15, r15
     d04:	ee 24       	eor	r14, r14
     d06:	8d a5       	ldd	r24, Y+45	; 0x2d
     d08:	9e a5       	ldd	r25, Y+46	; 0x2e
     d0a:	af a5       	ldd	r26, Y+47	; 0x2f
     d0c:	b8 a9       	ldd	r27, Y+48	; 0x30
     d0e:	a0 70       	andi	r26, 0x00	; 0
     d10:	b0 70       	andi	r27, 0x00	; 0
     d12:	e8 2a       	or	r14, r24
     d14:	f9 2a       	or	r15, r25
     d16:	0a 2b       	or	r16, r26
     d18:	1b 2b       	or	r17, r27
     d1a:	e2 16       	cp	r14, r18
     d1c:	f3 06       	cpc	r15, r19
     d1e:	04 07       	cpc	r16, r20
     d20:	15 07       	cpc	r17, r21
     d22:	c0 f4       	brcc	.+48     	; 0xd54 <__stack+0x4f5>
     d24:	08 94       	sec
     d26:	a1 08       	sbc	r10, r1
     d28:	b1 08       	sbc	r11, r1
     d2a:	c1 08       	sbc	r12, r1
     d2c:	d1 08       	sbc	r13, r1
     d2e:	e2 0c       	add	r14, r2
     d30:	f3 1c       	adc	r15, r3
     d32:	04 1d       	adc	r16, r4
     d34:	15 1d       	adc	r17, r5
     d36:	e2 14       	cp	r14, r2
     d38:	f3 04       	cpc	r15, r3
     d3a:	04 05       	cpc	r16, r4
     d3c:	15 05       	cpc	r17, r5
     d3e:	50 f0       	brcs	.+20     	; 0xd54 <__stack+0x4f5>
     d40:	e2 16       	cp	r14, r18
     d42:	f3 06       	cpc	r15, r19
     d44:	04 07       	cpc	r16, r20
     d46:	15 07       	cpc	r17, r21
     d48:	28 f4       	brcc	.+10     	; 0xd54 <__stack+0x4f5>
     d4a:	08 94       	sec
     d4c:	a1 08       	sbc	r10, r1
     d4e:	b1 08       	sbc	r11, r1
     d50:	c1 08       	sbc	r12, r1
     d52:	d1 08       	sbc	r13, r1
     d54:	61 96       	adiw	r28, 0x11	; 17
     d56:	ec ac       	ldd	r14, Y+60	; 0x3c
     d58:	fd ac       	ldd	r15, Y+61	; 0x3d
     d5a:	0e ad       	ldd	r16, Y+62	; 0x3e
     d5c:	1f ad       	ldd	r17, Y+63	; 0x3f
     d5e:	61 97       	sbiw	r28, 0x11	; 17
     d60:	d7 01       	movw	r26, r14
     d62:	99 27       	eor	r25, r25
     d64:	88 27       	eor	r24, r24
     d66:	96 01       	movw	r18, r12
     d68:	85 01       	movw	r16, r10
     d6a:	08 2b       	or	r16, r24
     d6c:	19 2b       	or	r17, r25
     d6e:	2a 2b       	or	r18, r26
     d70:	3b 2b       	or	r19, r27
     d72:	09 ab       	std	Y+49, r16	; 0x31
     d74:	1a ab       	std	Y+50, r17	; 0x32
     d76:	2b ab       	std	Y+51, r18	; 0x33
     d78:	3c ab       	std	Y+52, r19	; 0x34
     d7a:	62 c2       	rjmp	.+1220   	; 0x1240 <__stack+0x9e1>
     d7c:	6e 14       	cp	r6, r14
     d7e:	7f 04       	cpc	r7, r15
     d80:	80 06       	cpc	r8, r16
     d82:	91 06       	cpc	r9, r17
     d84:	08 f4       	brcc	.+2      	; 0xd88 <__stack+0x529>
     d86:	51 c2       	rjmp	.+1186   	; 0x122a <__stack+0x9cb>
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	e2 16       	cp	r14, r18
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	f2 06       	cpc	r15, r18
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	02 07       	cpc	r16, r18
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	12 07       	cpc	r17, r18
     d98:	88 f4       	brcc	.+34     	; 0xdbc <__stack+0x55d>
     d9a:	3f ef       	ldi	r19, 0xFF	; 255
     d9c:	e3 16       	cp	r14, r19
     d9e:	f1 04       	cpc	r15, r1
     da0:	01 05       	cpc	r16, r1
     da2:	11 05       	cpc	r17, r1
     da4:	31 f0       	breq	.+12     	; 0xdb2 <__stack+0x553>
     da6:	28 f0       	brcs	.+10     	; 0xdb2 <__stack+0x553>
     da8:	48 e0       	ldi	r20, 0x08	; 8
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	17 c0       	rjmp	.+46     	; 0xde0 <__stack+0x581>
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	50 e0       	ldi	r21, 0x00	; 0
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	12 c0       	rjmp	.+36     	; 0xde0 <__stack+0x581>
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	e4 16       	cp	r14, r20
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	f4 06       	cpc	r15, r20
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	04 07       	cpc	r16, r20
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	14 07       	cpc	r17, r20
     dcc:	28 f0       	brcs	.+10     	; 0xdd8 <__stack+0x579>
     dce:	48 e1       	ldi	r20, 0x18	; 24
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <__stack+0x581>
     dd8:	40 e1       	ldi	r20, 0x10	; 16
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	d8 01       	movw	r26, r16
     de2:	c7 01       	movw	r24, r14
     de4:	04 2e       	mov	r0, r20
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <__stack+0x591>
     de8:	b6 95       	lsr	r27
     dea:	a7 95       	ror	r26
     dec:	97 95       	ror	r25
     dee:	87 95       	ror	r24
     df0:	0a 94       	dec	r0
     df2:	d2 f7       	brpl	.-12     	; 0xde8 <__stack+0x589>
     df4:	88 59       	subi	r24, 0x98	; 152
     df6:	9f 4f       	sbci	r25, 0xFF	; 255
     df8:	dc 01       	movw	r26, r24
     dfa:	2c 91       	ld	r18, X
     dfc:	30 e2       	ldi	r19, 0x20	; 32
     dfe:	a3 2e       	mov	r10, r19
     e00:	b1 2c       	mov	r11, r1
     e02:	c1 2c       	mov	r12, r1
     e04:	d1 2c       	mov	r13, r1
     e06:	d6 01       	movw	r26, r12
     e08:	c5 01       	movw	r24, r10
     e0a:	84 1b       	sub	r24, r20
     e0c:	95 0b       	sbc	r25, r21
     e0e:	a6 0b       	sbc	r26, r22
     e10:	b7 0b       	sbc	r27, r23
     e12:	82 1b       	sub	r24, r18
     e14:	91 09       	sbc	r25, r1
     e16:	a1 09       	sbc	r26, r1
     e18:	b1 09       	sbc	r27, r1
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	a1 05       	cpc	r26, r1
     e1e:	b1 05       	cpc	r27, r1
     e20:	89 f4       	brne	.+34     	; 0xe44 <__stack+0x5e5>
     e22:	e6 14       	cp	r14, r6
     e24:	f7 04       	cpc	r15, r7
     e26:	08 05       	cpc	r16, r8
     e28:	19 05       	cpc	r17, r9
     e2a:	08 f4       	brcc	.+2      	; 0xe2e <__stack+0x5cf>
     e2c:	f2 c1       	rjmp	.+996    	; 0x1212 <__stack+0x9b3>
     e2e:	6d a4       	ldd	r6, Y+45	; 0x2d
     e30:	7e a4       	ldd	r7, Y+46	; 0x2e
     e32:	8f a4       	ldd	r8, Y+47	; 0x2f
     e34:	98 a8       	ldd	r9, Y+48	; 0x30
     e36:	62 14       	cp	r6, r2
     e38:	73 04       	cpc	r7, r3
     e3a:	84 04       	cpc	r8, r4
     e3c:	95 04       	cpc	r9, r5
     e3e:	08 f0       	brcs	.+2      	; 0xe42 <__stack+0x5e3>
     e40:	e8 c1       	rjmp	.+976    	; 0x1212 <__stack+0x9b3>
     e42:	f3 c1       	rjmp	.+998    	; 0x122a <__stack+0x9cb>
     e44:	6e 96       	adiw	r28, 0x1e	; 30
     e46:	8f af       	std	Y+63, r24	; 0x3f
     e48:	6e 97       	sbiw	r28, 0x1e	; 30
     e4a:	08 2e       	mov	r0, r24
     e4c:	04 c0       	rjmp	.+8      	; 0xe56 <__stack+0x5f7>
     e4e:	ee 0c       	add	r14, r14
     e50:	ff 1c       	adc	r15, r15
     e52:	00 1f       	adc	r16, r16
     e54:	11 1f       	adc	r17, r17
     e56:	0a 94       	dec	r0
     e58:	d2 f7       	brpl	.-12     	; 0xe4e <__stack+0x5ef>
     e5a:	6a 2d       	mov	r22, r10
     e5c:	68 1b       	sub	r22, r24
     e5e:	d2 01       	movw	r26, r4
     e60:	c1 01       	movw	r24, r2
     e62:	06 2e       	mov	r0, r22
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <__stack+0x60f>
     e66:	b6 95       	lsr	r27
     e68:	a7 95       	ror	r26
     e6a:	97 95       	ror	r25
     e6c:	87 95       	ror	r24
     e6e:	0a 94       	dec	r0
     e70:	d2 f7       	brpl	.-12     	; 0xe66 <__stack+0x607>
     e72:	5c 01       	movw	r10, r24
     e74:	6d 01       	movw	r12, r26
     e76:	ae 28       	or	r10, r14
     e78:	bf 28       	or	r11, r15
     e7a:	c0 2a       	or	r12, r16
     e7c:	d1 2a       	or	r13, r17
     e7e:	ad a2       	std	Y+37, r10	; 0x25
     e80:	be a2       	std	Y+38, r11	; 0x26
     e82:	cf a2       	std	Y+39, r12	; 0x27
     e84:	d8 a6       	std	Y+40, r13	; 0x28
     e86:	72 01       	movw	r14, r4
     e88:	61 01       	movw	r12, r2
     e8a:	6e 96       	adiw	r28, 0x1e	; 30
     e8c:	0f ac       	ldd	r0, Y+63	; 0x3f
     e8e:	6e 97       	sbiw	r28, 0x1e	; 30
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__stack+0x63b>
     e92:	cc 0c       	add	r12, r12
     e94:	dd 1c       	adc	r13, r13
     e96:	ee 1c       	adc	r14, r14
     e98:	ff 1c       	adc	r15, r15
     e9a:	0a 94       	dec	r0
     e9c:	d2 f7       	brpl	.-12     	; 0xe92 <__stack+0x633>
     e9e:	c9 a2       	std	Y+33, r12	; 0x21
     ea0:	da a2       	std	Y+34, r13	; 0x22
     ea2:	eb a2       	std	Y+35, r14	; 0x23
     ea4:	fc a2       	std	Y+36, r15	; 0x24
     ea6:	64 01       	movw	r12, r8
     ea8:	53 01       	movw	r10, r6
     eaa:	06 2e       	mov	r0, r22
     eac:	04 c0       	rjmp	.+8      	; 0xeb6 <__stack+0x657>
     eae:	d6 94       	lsr	r13
     eb0:	c7 94       	ror	r12
     eb2:	b7 94       	ror	r11
     eb4:	a7 94       	ror	r10
     eb6:	0a 94       	dec	r0
     eb8:	d2 f7       	brpl	.-12     	; 0xeae <__stack+0x64f>
     eba:	d4 01       	movw	r26, r8
     ebc:	c3 01       	movw	r24, r6
     ebe:	6e 96       	adiw	r28, 0x1e	; 30
     ec0:	0f ac       	ldd	r0, Y+63	; 0x3f
     ec2:	6e 97       	sbiw	r28, 0x1e	; 30
     ec4:	04 c0       	rjmp	.+8      	; 0xece <__stack+0x66f>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	aa 1f       	adc	r26, r26
     ecc:	bb 1f       	adc	r27, r27
     ece:	0a 94       	dec	r0
     ed0:	d2 f7       	brpl	.-12     	; 0xec6 <__stack+0x667>
     ed2:	ed a4       	ldd	r14, Y+45	; 0x2d
     ed4:	fe a4       	ldd	r15, Y+46	; 0x2e
     ed6:	0f a5       	ldd	r16, Y+47	; 0x2f
     ed8:	18 a9       	ldd	r17, Y+48	; 0x30
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <__stack+0x685>
     edc:	16 95       	lsr	r17
     ede:	07 95       	ror	r16
     ee0:	f7 94       	ror	r15
     ee2:	e7 94       	ror	r14
     ee4:	6a 95       	dec	r22
     ee6:	d2 f7       	brpl	.-12     	; 0xedc <__stack+0x67d>
     ee8:	37 01       	movw	r6, r14
     eea:	48 01       	movw	r8, r16
     eec:	68 2a       	or	r6, r24
     eee:	79 2a       	or	r7, r25
     ef0:	8a 2a       	or	r8, r26
     ef2:	9b 2a       	or	r9, r27
     ef4:	6d 8e       	std	Y+29, r6	; 0x1d
     ef6:	7e 8e       	std	Y+30, r7	; 0x1e
     ef8:	8f 8e       	std	Y+31, r8	; 0x1f
     efa:	98 a2       	std	Y+32, r9	; 0x20
     efc:	ed a0       	ldd	r14, Y+37	; 0x25
     efe:	fe a0       	ldd	r15, Y+38	; 0x26
     f00:	0f a1       	ldd	r16, Y+39	; 0x27
     f02:	18 a5       	ldd	r17, Y+40	; 0x28
     f04:	38 01       	movw	r6, r16
     f06:	88 24       	eor	r8, r8
     f08:	99 24       	eor	r9, r9
     f0a:	98 01       	movw	r18, r16
     f0c:	87 01       	movw	r16, r14
     f0e:	20 70       	andi	r18, 0x00	; 0
     f10:	30 70       	andi	r19, 0x00	; 0
     f12:	65 96       	adiw	r28, 0x15	; 21
     f14:	0c af       	std	Y+60, r16	; 0x3c
     f16:	1d af       	std	Y+61, r17	; 0x3d
     f18:	2e af       	std	Y+62, r18	; 0x3e
     f1a:	3f af       	std	Y+63, r19	; 0x3f
     f1c:	65 97       	sbiw	r28, 0x15	; 21
     f1e:	c6 01       	movw	r24, r12
     f20:	b5 01       	movw	r22, r10
     f22:	a4 01       	movw	r20, r8
     f24:	93 01       	movw	r18, r6
     f26:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     f2a:	7b 01       	movw	r14, r22
     f2c:	8c 01       	movw	r16, r24
     f2e:	c6 01       	movw	r24, r12
     f30:	b5 01       	movw	r22, r10
     f32:	a4 01       	movw	r20, r8
     f34:	93 01       	movw	r18, r6
     f36:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     f3a:	c9 01       	movw	r24, r18
     f3c:	da 01       	movw	r26, r20
     f3e:	1c 01       	movw	r2, r24
     f40:	2d 01       	movw	r4, r26
     f42:	c2 01       	movw	r24, r4
     f44:	b1 01       	movw	r22, r2
     f46:	65 96       	adiw	r28, 0x15	; 21
     f48:	2c ad       	ldd	r18, Y+60	; 0x3c
     f4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     f4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     f4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     f50:	65 97       	sbiw	r28, 0x15	; 21
     f52:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
     f56:	9b 01       	movw	r18, r22
     f58:	ac 01       	movw	r20, r24
     f5a:	87 01       	movw	r16, r14
     f5c:	ff 24       	eor	r15, r15
     f5e:	ee 24       	eor	r14, r14
     f60:	ad 8c       	ldd	r10, Y+29	; 0x1d
     f62:	be 8c       	ldd	r11, Y+30	; 0x1e
     f64:	cf 8c       	ldd	r12, Y+31	; 0x1f
     f66:	d8 a0       	ldd	r13, Y+32	; 0x20
     f68:	c6 01       	movw	r24, r12
     f6a:	aa 27       	eor	r26, r26
     f6c:	bb 27       	eor	r27, r27
     f6e:	57 01       	movw	r10, r14
     f70:	68 01       	movw	r12, r16
     f72:	a8 2a       	or	r10, r24
     f74:	b9 2a       	or	r11, r25
     f76:	ca 2a       	or	r12, r26
     f78:	db 2a       	or	r13, r27
     f7a:	a2 16       	cp	r10, r18
     f7c:	b3 06       	cpc	r11, r19
     f7e:	c4 06       	cpc	r12, r20
     f80:	d5 06       	cpc	r13, r21
     f82:	00 f5       	brcc	.+64     	; 0xfc4 <__stack+0x765>
     f84:	08 94       	sec
     f86:	21 08       	sbc	r2, r1
     f88:	31 08       	sbc	r3, r1
     f8a:	41 08       	sbc	r4, r1
     f8c:	51 08       	sbc	r5, r1
     f8e:	ed a0       	ldd	r14, Y+37	; 0x25
     f90:	fe a0       	ldd	r15, Y+38	; 0x26
     f92:	0f a1       	ldd	r16, Y+39	; 0x27
     f94:	18 a5       	ldd	r17, Y+40	; 0x28
     f96:	ae 0c       	add	r10, r14
     f98:	bf 1c       	adc	r11, r15
     f9a:	c0 1e       	adc	r12, r16
     f9c:	d1 1e       	adc	r13, r17
     f9e:	ae 14       	cp	r10, r14
     fa0:	bf 04       	cpc	r11, r15
     fa2:	c0 06       	cpc	r12, r16
     fa4:	d1 06       	cpc	r13, r17
     fa6:	70 f0       	brcs	.+28     	; 0xfc4 <__stack+0x765>
     fa8:	a2 16       	cp	r10, r18
     faa:	b3 06       	cpc	r11, r19
     fac:	c4 06       	cpc	r12, r20
     fae:	d5 06       	cpc	r13, r21
     fb0:	48 f4       	brcc	.+18     	; 0xfc4 <__stack+0x765>
     fb2:	08 94       	sec
     fb4:	21 08       	sbc	r2, r1
     fb6:	31 08       	sbc	r3, r1
     fb8:	41 08       	sbc	r4, r1
     fba:	51 08       	sbc	r5, r1
     fbc:	ae 0c       	add	r10, r14
     fbe:	bf 1c       	adc	r11, r15
     fc0:	c0 1e       	adc	r12, r16
     fc2:	d1 1e       	adc	r13, r17
     fc4:	a2 1a       	sub	r10, r18
     fc6:	b3 0a       	sbc	r11, r19
     fc8:	c4 0a       	sbc	r12, r20
     fca:	d5 0a       	sbc	r13, r21
     fcc:	c6 01       	movw	r24, r12
     fce:	b5 01       	movw	r22, r10
     fd0:	a4 01       	movw	r20, r8
     fd2:	93 01       	movw	r18, r6
     fd4:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     fd8:	7b 01       	movw	r14, r22
     fda:	8c 01       	movw	r16, r24
     fdc:	c6 01       	movw	r24, r12
     fde:	b5 01       	movw	r22, r10
     fe0:	a4 01       	movw	r20, r8
     fe2:	93 01       	movw	r18, r6
     fe4:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <__udivmodsi4>
     fe8:	c9 01       	movw	r24, r18
     fea:	da 01       	movw	r26, r20
     fec:	3c 01       	movw	r6, r24
     fee:	4d 01       	movw	r8, r26
     ff0:	c4 01       	movw	r24, r8
     ff2:	b3 01       	movw	r22, r6
     ff4:	65 96       	adiw	r28, 0x15	; 21
     ff6:	2c ad       	ldd	r18, Y+60	; 0x3c
     ff8:	3d ad       	ldd	r19, Y+61	; 0x3d
     ffa:	4e ad       	ldd	r20, Y+62	; 0x3e
     ffc:	5f ad       	ldd	r21, Y+63	; 0x3f
     ffe:	65 97       	sbiw	r28, 0x15	; 21
    1000:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
    1004:	9b 01       	movw	r18, r22
    1006:	ac 01       	movw	r20, r24
    1008:	87 01       	movw	r16, r14
    100a:	ff 24       	eor	r15, r15
    100c:	ee 24       	eor	r14, r14
    100e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1010:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1012:	af 8d       	ldd	r26, Y+31	; 0x1f
    1014:	b8 a1       	ldd	r27, Y+32	; 0x20
    1016:	a0 70       	andi	r26, 0x00	; 0
    1018:	b0 70       	andi	r27, 0x00	; 0
    101a:	57 01       	movw	r10, r14
    101c:	68 01       	movw	r12, r16
    101e:	a8 2a       	or	r10, r24
    1020:	b9 2a       	or	r11, r25
    1022:	ca 2a       	or	r12, r26
    1024:	db 2a       	or	r13, r27
    1026:	a2 16       	cp	r10, r18
    1028:	b3 06       	cpc	r11, r19
    102a:	c4 06       	cpc	r12, r20
    102c:	d5 06       	cpc	r13, r21
    102e:	00 f5       	brcc	.+64     	; 0x1070 <__stack+0x811>
    1030:	08 94       	sec
    1032:	61 08       	sbc	r6, r1
    1034:	71 08       	sbc	r7, r1
    1036:	81 08       	sbc	r8, r1
    1038:	91 08       	sbc	r9, r1
    103a:	6d a1       	ldd	r22, Y+37	; 0x25
    103c:	7e a1       	ldd	r23, Y+38	; 0x26
    103e:	8f a1       	ldd	r24, Y+39	; 0x27
    1040:	98 a5       	ldd	r25, Y+40	; 0x28
    1042:	a6 0e       	add	r10, r22
    1044:	b7 1e       	adc	r11, r23
    1046:	c8 1e       	adc	r12, r24
    1048:	d9 1e       	adc	r13, r25
    104a:	a6 16       	cp	r10, r22
    104c:	b7 06       	cpc	r11, r23
    104e:	c8 06       	cpc	r12, r24
    1050:	d9 06       	cpc	r13, r25
    1052:	70 f0       	brcs	.+28     	; 0x1070 <__stack+0x811>
    1054:	a2 16       	cp	r10, r18
    1056:	b3 06       	cpc	r11, r19
    1058:	c4 06       	cpc	r12, r20
    105a:	d5 06       	cpc	r13, r21
    105c:	48 f4       	brcc	.+18     	; 0x1070 <__stack+0x811>
    105e:	08 94       	sec
    1060:	61 08       	sbc	r6, r1
    1062:	71 08       	sbc	r7, r1
    1064:	81 08       	sbc	r8, r1
    1066:	91 08       	sbc	r9, r1
    1068:	a6 0e       	add	r10, r22
    106a:	b7 1e       	adc	r11, r23
    106c:	c8 1e       	adc	r12, r24
    106e:	d9 1e       	adc	r13, r25
    1070:	d6 01       	movw	r26, r12
    1072:	c5 01       	movw	r24, r10
    1074:	82 1b       	sub	r24, r18
    1076:	93 0b       	sbc	r25, r19
    1078:	a4 0b       	sbc	r26, r20
    107a:	b5 0b       	sbc	r27, r21
    107c:	89 8f       	std	Y+25, r24	; 0x19
    107e:	9a 8f       	std	Y+26, r25	; 0x1a
    1080:	ab 8f       	std	Y+27, r26	; 0x1b
    1082:	bc 8f       	std	Y+28, r27	; 0x1c
    1084:	d1 01       	movw	r26, r2
    1086:	99 27       	eor	r25, r25
    1088:	88 27       	eor	r24, r24
    108a:	64 01       	movw	r12, r8
    108c:	53 01       	movw	r10, r6
    108e:	a8 2a       	or	r10, r24
    1090:	b9 2a       	or	r11, r25
    1092:	ca 2a       	or	r12, r26
    1094:	db 2a       	or	r13, r27
    1096:	a9 aa       	std	Y+49, r10	; 0x31
    1098:	ba aa       	std	Y+50, r11	; 0x32
    109a:	cb aa       	std	Y+51, r12	; 0x33
    109c:	dc aa       	std	Y+52, r13	; 0x34
    109e:	86 01       	movw	r16, r12
    10a0:	75 01       	movw	r14, r10
    10a2:	2f ef       	ldi	r18, 0xFF	; 255
    10a4:	3f ef       	ldi	r19, 0xFF	; 255
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	e2 22       	and	r14, r18
    10ac:	f3 22       	and	r15, r19
    10ae:	04 23       	and	r16, r20
    10b0:	15 23       	and	r17, r21
    10b2:	a6 01       	movw	r20, r12
    10b4:	66 27       	eor	r22, r22
    10b6:	77 27       	eor	r23, r23
    10b8:	6d 96       	adiw	r28, 0x1d	; 29
    10ba:	4c af       	std	Y+60, r20	; 0x3c
    10bc:	5d af       	std	Y+61, r21	; 0x3d
    10be:	6e af       	std	Y+62, r22	; 0x3e
    10c0:	7f af       	std	Y+63, r23	; 0x3f
    10c2:	6d 97       	sbiw	r28, 0x1d	; 29
    10c4:	a9 a0       	ldd	r10, Y+33	; 0x21
    10c6:	ba a0       	ldd	r11, Y+34	; 0x22
    10c8:	cb a0       	ldd	r12, Y+35	; 0x23
    10ca:	dc a0       	ldd	r13, Y+36	; 0x24
    10cc:	6f ef       	ldi	r22, 0xFF	; 255
    10ce:	7f ef       	ldi	r23, 0xFF	; 255
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a6 22       	and	r10, r22
    10d6:	b7 22       	and	r11, r23
    10d8:	c8 22       	and	r12, r24
    10da:	d9 22       	and	r13, r25
    10dc:	89 a1       	ldd	r24, Y+33	; 0x21
    10de:	9a a1       	ldd	r25, Y+34	; 0x22
    10e0:	ab a1       	ldd	r26, Y+35	; 0x23
    10e2:	bc a1       	ldd	r27, Y+36	; 0x24
    10e4:	1d 01       	movw	r2, r26
    10e6:	44 24       	eor	r4, r4
    10e8:	55 24       	eor	r5, r5
    10ea:	c8 01       	movw	r24, r16
    10ec:	b7 01       	movw	r22, r14
    10ee:	a6 01       	movw	r20, r12
    10f0:	95 01       	movw	r18, r10
    10f2:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
    10f6:	69 96       	adiw	r28, 0x19	; 25
    10f8:	6c af       	std	Y+60, r22	; 0x3c
    10fa:	7d af       	std	Y+61, r23	; 0x3d
    10fc:	8e af       	std	Y+62, r24	; 0x3e
    10fe:	9f af       	std	Y+63, r25	; 0x3f
    1100:	69 97       	sbiw	r28, 0x19	; 25
    1102:	c8 01       	movw	r24, r16
    1104:	b7 01       	movw	r22, r14
    1106:	a2 01       	movw	r20, r4
    1108:	91 01       	movw	r18, r2
    110a:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
    110e:	3b 01       	movw	r6, r22
    1110:	4c 01       	movw	r8, r24
    1112:	6d 96       	adiw	r28, 0x1d	; 29
    1114:	6c ad       	ldd	r22, Y+60	; 0x3c
    1116:	7d ad       	ldd	r23, Y+61	; 0x3d
    1118:	8e ad       	ldd	r24, Y+62	; 0x3e
    111a:	9f ad       	ldd	r25, Y+63	; 0x3f
    111c:	6d 97       	sbiw	r28, 0x1d	; 29
    111e:	a6 01       	movw	r20, r12
    1120:	95 01       	movw	r18, r10
    1122:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
    1126:	7b 01       	movw	r14, r22
    1128:	8c 01       	movw	r16, r24
    112a:	6d 96       	adiw	r28, 0x1d	; 29
    112c:	6c ad       	ldd	r22, Y+60	; 0x3c
    112e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1130:	8e ad       	ldd	r24, Y+62	; 0x3e
    1132:	9f ad       	ldd	r25, Y+63	; 0x3f
    1134:	6d 97       	sbiw	r28, 0x1d	; 29
    1136:	a2 01       	movw	r20, r4
    1138:	91 01       	movw	r18, r2
    113a:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <__mulsi3>
    113e:	5b 01       	movw	r10, r22
    1140:	6c 01       	movw	r12, r24
    1142:	a8 01       	movw	r20, r16
    1144:	97 01       	movw	r18, r14
    1146:	26 0d       	add	r18, r6
    1148:	37 1d       	adc	r19, r7
    114a:	48 1d       	adc	r20, r8
    114c:	59 1d       	adc	r21, r9
    114e:	69 96       	adiw	r28, 0x19	; 25
    1150:	6c ac       	ldd	r6, Y+60	; 0x3c
    1152:	7d ac       	ldd	r7, Y+61	; 0x3d
    1154:	8e ac       	ldd	r8, Y+62	; 0x3e
    1156:	9f ac       	ldd	r9, Y+63	; 0x3f
    1158:	69 97       	sbiw	r28, 0x19	; 25
    115a:	c4 01       	movw	r24, r8
    115c:	aa 27       	eor	r26, r26
    115e:	bb 27       	eor	r27, r27
    1160:	28 0f       	add	r18, r24
    1162:	39 1f       	adc	r19, r25
    1164:	4a 1f       	adc	r20, r26
    1166:	5b 1f       	adc	r21, r27
    1168:	2e 15       	cp	r18, r14
    116a:	3f 05       	cpc	r19, r15
    116c:	40 07       	cpc	r20, r16
    116e:	51 07       	cpc	r21, r17
    1170:	48 f4       	brcc	.+18     	; 0x1184 <__stack+0x925>
    1172:	e1 2c       	mov	r14, r1
    1174:	f1 2c       	mov	r15, r1
    1176:	61 e0       	ldi	r22, 0x01	; 1
    1178:	06 2f       	mov	r16, r22
    117a:	11 2d       	mov	r17, r1
    117c:	ae 0c       	add	r10, r14
    117e:	bf 1c       	adc	r11, r15
    1180:	c0 1e       	adc	r12, r16
    1182:	d1 1e       	adc	r13, r17
    1184:	ca 01       	movw	r24, r20
    1186:	aa 27       	eor	r26, r26
    1188:	bb 27       	eor	r27, r27
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	6a 0d       	add	r22, r10
    1190:	7b 1d       	adc	r23, r11
    1192:	8c 1d       	adc	r24, r12
    1194:	9d 1d       	adc	r25, r13
    1196:	69 8c       	ldd	r6, Y+25	; 0x19
    1198:	7a 8c       	ldd	r7, Y+26	; 0x1a
    119a:	8b 8c       	ldd	r8, Y+27	; 0x1b
    119c:	9c 8c       	ldd	r9, Y+28	; 0x1c
    119e:	66 16       	cp	r6, r22
    11a0:	77 06       	cpc	r7, r23
    11a2:	88 06       	cpc	r8, r24
    11a4:	99 06       	cpc	r9, r25
    11a6:	40 f1       	brcs	.+80     	; 0x11f8 <__stack+0x999>
    11a8:	66 15       	cp	r22, r6
    11aa:	77 05       	cpc	r23, r7
    11ac:	88 05       	cpc	r24, r8
    11ae:	99 05       	cpc	r25, r9
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <__stack+0x955>
    11b2:	43 c0       	rjmp	.+134    	; 0x123a <__stack+0x9db>
    11b4:	d9 01       	movw	r26, r18
    11b6:	99 27       	eor	r25, r25
    11b8:	88 27       	eor	r24, r24
    11ba:	69 96       	adiw	r28, 0x19	; 25
    11bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    11be:	3d ad       	ldd	r19, Y+61	; 0x3d
    11c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    11c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    11c4:	69 97       	sbiw	r28, 0x19	; 25
    11c6:	40 70       	andi	r20, 0x00	; 0
    11c8:	50 70       	andi	r21, 0x00	; 0
    11ca:	82 0f       	add	r24, r18
    11cc:	93 1f       	adc	r25, r19
    11ce:	a4 1f       	adc	r26, r20
    11d0:	b5 1f       	adc	r27, r21
    11d2:	2d a5       	ldd	r18, Y+45	; 0x2d
    11d4:	3e a5       	ldd	r19, Y+46	; 0x2e
    11d6:	4f a5       	ldd	r20, Y+47	; 0x2f
    11d8:	58 a9       	ldd	r21, Y+48	; 0x30
    11da:	6e 96       	adiw	r28, 0x1e	; 30
    11dc:	0f ac       	ldd	r0, Y+63	; 0x3f
    11de:	6e 97       	sbiw	r28, 0x1e	; 30
    11e0:	04 c0       	rjmp	.+8      	; 0x11ea <__stack+0x98b>
    11e2:	22 0f       	add	r18, r18
    11e4:	33 1f       	adc	r19, r19
    11e6:	44 1f       	adc	r20, r20
    11e8:	55 1f       	adc	r21, r21
    11ea:	0a 94       	dec	r0
    11ec:	d2 f7       	brpl	.-12     	; 0x11e2 <__stack+0x983>
    11ee:	28 17       	cp	r18, r24
    11f0:	39 07       	cpc	r19, r25
    11f2:	4a 07       	cpc	r20, r26
    11f4:	5b 07       	cpc	r21, r27
    11f6:	08 f5       	brcc	.+66     	; 0x123a <__stack+0x9db>
    11f8:	09 a9       	ldd	r16, Y+49	; 0x31
    11fa:	1a a9       	ldd	r17, Y+50	; 0x32
    11fc:	2b a9       	ldd	r18, Y+51	; 0x33
    11fe:	3c a9       	ldd	r19, Y+52	; 0x34
    1200:	01 50       	subi	r16, 0x01	; 1
    1202:	10 40       	sbci	r17, 0x00	; 0
    1204:	20 40       	sbci	r18, 0x00	; 0
    1206:	30 40       	sbci	r19, 0x00	; 0
    1208:	09 ab       	std	Y+49, r16	; 0x31
    120a:	1a ab       	std	Y+50, r17	; 0x32
    120c:	2b ab       	std	Y+51, r18	; 0x33
    120e:	3c ab       	std	Y+52, r19	; 0x34
    1210:	14 c0       	rjmp	.+40     	; 0x123a <__stack+0x9db>
    1212:	66 24       	eor	r6, r6
    1214:	77 24       	eor	r7, r7
    1216:	43 01       	movw	r8, r6
    1218:	21 e0       	ldi	r18, 0x01	; 1
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	50 e0       	ldi	r21, 0x00	; 0
    1220:	29 ab       	std	Y+49, r18	; 0x31
    1222:	3a ab       	std	Y+50, r19	; 0x32
    1224:	4b ab       	std	Y+51, r20	; 0x33
    1226:	5c ab       	std	Y+52, r21	; 0x34
    1228:	0b c0       	rjmp	.+22     	; 0x1240 <__stack+0x9e1>
    122a:	66 24       	eor	r6, r6
    122c:	77 24       	eor	r7, r7
    122e:	43 01       	movw	r8, r6
    1230:	19 aa       	std	Y+49, r1	; 0x31
    1232:	1a aa       	std	Y+50, r1	; 0x32
    1234:	1b aa       	std	Y+51, r1	; 0x33
    1236:	1c aa       	std	Y+52, r1	; 0x34
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <__stack+0x9e1>
    123a:	66 24       	eor	r6, r6
    123c:	77 24       	eor	r7, r7
    123e:	43 01       	movw	r8, r6
    1240:	fe 01       	movw	r30, r28
    1242:	71 96       	adiw	r30, 0x11	; 17
    1244:	88 e0       	ldi	r24, 0x08	; 8
    1246:	df 01       	movw	r26, r30
    1248:	1d 92       	st	X+, r1
    124a:	8a 95       	dec	r24
    124c:	e9 f7       	brne	.-6      	; 0x1248 <__stack+0x9e9>
    124e:	a9 a8       	ldd	r10, Y+49	; 0x31
    1250:	ba a8       	ldd	r11, Y+50	; 0x32
    1252:	cb a8       	ldd	r12, Y+51	; 0x33
    1254:	dc a8       	ldd	r13, Y+52	; 0x34
    1256:	a9 8a       	std	Y+17, r10	; 0x11
    1258:	ba 8a       	std	Y+18, r11	; 0x12
    125a:	cb 8a       	std	Y+19, r12	; 0x13
    125c:	dc 8a       	std	Y+20, r13	; 0x14
    125e:	6d 8a       	std	Y+21, r6	; 0x15
    1260:	7e 8a       	std	Y+22, r7	; 0x16
    1262:	8f 8a       	std	Y+23, r8	; 0x17
    1264:	98 8e       	std	Y+24, r9	; 0x18
    1266:	29 a9       	ldd	r18, Y+49	; 0x31
    1268:	3a 89       	ldd	r19, Y+18	; 0x12
    126a:	4b 89       	ldd	r20, Y+19	; 0x13
    126c:	5c 89       	ldd	r21, Y+20	; 0x14
    126e:	66 2d       	mov	r22, r6
    1270:	7e 89       	ldd	r23, Y+22	; 0x16
    1272:	8f 89       	ldd	r24, Y+23	; 0x17
    1274:	98 8d       	ldd	r25, Y+24	; 0x18
    1276:	c2 5a       	subi	r28, 0xA2	; 162
    1278:	df 4f       	sbci	r29, 0xFF	; 255
    127a:	e2 e1       	ldi	r30, 0x12	; 18
    127c:	0c 94 a9 26 	jmp	0x4d52	; 0x4d52 <__epilogue_restores__>

00001280 <_fpadd_parts>:
    1280:	a0 e0       	ldi	r26, 0x00	; 0
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e6 e4       	ldi	r30, 0x46	; 70
    1286:	f9 e0       	ldi	r31, 0x09	; 9
    1288:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__prologue_saves__>
    128c:	dc 01       	movw	r26, r24
    128e:	2b 01       	movw	r4, r22
    1290:	fa 01       	movw	r30, r20
    1292:	9c 91       	ld	r25, X
    1294:	92 30       	cpi	r25, 0x02	; 2
    1296:	08 f4       	brcc	.+2      	; 0x129a <_fpadd_parts+0x1a>
    1298:	39 c1       	rjmp	.+626    	; 0x150c <_fpadd_parts+0x28c>
    129a:	eb 01       	movw	r28, r22
    129c:	88 81       	ld	r24, Y
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	08 f4       	brcc	.+2      	; 0x12a4 <_fpadd_parts+0x24>
    12a2:	33 c1       	rjmp	.+614    	; 0x150a <_fpadd_parts+0x28a>
    12a4:	94 30       	cpi	r25, 0x04	; 4
    12a6:	69 f4       	brne	.+26     	; 0x12c2 <_fpadd_parts+0x42>
    12a8:	84 30       	cpi	r24, 0x04	; 4
    12aa:	09 f0       	breq	.+2      	; 0x12ae <_fpadd_parts+0x2e>
    12ac:	2f c1       	rjmp	.+606    	; 0x150c <_fpadd_parts+0x28c>
    12ae:	11 96       	adiw	r26, 0x01	; 1
    12b0:	9c 91       	ld	r25, X
    12b2:	11 97       	sbiw	r26, 0x01	; 1
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	98 17       	cp	r25, r24
    12b8:	09 f4       	brne	.+2      	; 0x12bc <_fpadd_parts+0x3c>
    12ba:	28 c1       	rjmp	.+592    	; 0x150c <_fpadd_parts+0x28c>
    12bc:	a0 e6       	ldi	r26, 0x60	; 96
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	25 c1       	rjmp	.+586    	; 0x150c <_fpadd_parts+0x28c>
    12c2:	84 30       	cpi	r24, 0x04	; 4
    12c4:	09 f4       	brne	.+2      	; 0x12c8 <_fpadd_parts+0x48>
    12c6:	21 c1       	rjmp	.+578    	; 0x150a <_fpadd_parts+0x28a>
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	a9 f4       	brne	.+42     	; 0x12f6 <_fpadd_parts+0x76>
    12cc:	92 30       	cpi	r25, 0x02	; 2
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <_fpadd_parts+0x52>
    12d0:	1d c1       	rjmp	.+570    	; 0x150c <_fpadd_parts+0x28c>
    12d2:	9a 01       	movw	r18, r20
    12d4:	ad 01       	movw	r20, r26
    12d6:	88 e0       	ldi	r24, 0x08	; 8
    12d8:	ea 01       	movw	r28, r20
    12da:	09 90       	ld	r0, Y+
    12dc:	ae 01       	movw	r20, r28
    12de:	e9 01       	movw	r28, r18
    12e0:	09 92       	st	Y+, r0
    12e2:	9e 01       	movw	r18, r28
    12e4:	81 50       	subi	r24, 0x01	; 1
    12e6:	c1 f7       	brne	.-16     	; 0x12d8 <_fpadd_parts+0x58>
    12e8:	e2 01       	movw	r28, r4
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	11 96       	adiw	r26, 0x01	; 1
    12ee:	9c 91       	ld	r25, X
    12f0:	89 23       	and	r24, r25
    12f2:	81 83       	std	Z+1, r24	; 0x01
    12f4:	08 c1       	rjmp	.+528    	; 0x1506 <_fpadd_parts+0x286>
    12f6:	92 30       	cpi	r25, 0x02	; 2
    12f8:	09 f4       	brne	.+2      	; 0x12fc <_fpadd_parts+0x7c>
    12fa:	07 c1       	rjmp	.+526    	; 0x150a <_fpadd_parts+0x28a>
    12fc:	12 96       	adiw	r26, 0x02	; 2
    12fe:	2d 90       	ld	r2, X+
    1300:	3c 90       	ld	r3, X
    1302:	13 97       	sbiw	r26, 0x03	; 3
    1304:	eb 01       	movw	r28, r22
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	9b 81       	ldd	r25, Y+3	; 0x03
    130a:	14 96       	adiw	r26, 0x04	; 4
    130c:	ad 90       	ld	r10, X+
    130e:	bd 90       	ld	r11, X+
    1310:	cd 90       	ld	r12, X+
    1312:	dc 90       	ld	r13, X
    1314:	17 97       	sbiw	r26, 0x07	; 7
    1316:	ec 80       	ldd	r14, Y+4	; 0x04
    1318:	fd 80       	ldd	r15, Y+5	; 0x05
    131a:	0e 81       	ldd	r16, Y+6	; 0x06
    131c:	1f 81       	ldd	r17, Y+7	; 0x07
    131e:	91 01       	movw	r18, r2
    1320:	28 1b       	sub	r18, r24
    1322:	39 0b       	sbc	r19, r25
    1324:	b9 01       	movw	r22, r18
    1326:	37 ff       	sbrs	r19, 7
    1328:	04 c0       	rjmp	.+8      	; 0x1332 <_fpadd_parts+0xb2>
    132a:	66 27       	eor	r22, r22
    132c:	77 27       	eor	r23, r23
    132e:	62 1b       	sub	r22, r18
    1330:	73 0b       	sbc	r23, r19
    1332:	60 32       	cpi	r22, 0x20	; 32
    1334:	71 05       	cpc	r23, r1
    1336:	0c f0       	brlt	.+2      	; 0x133a <_fpadd_parts+0xba>
    1338:	61 c0       	rjmp	.+194    	; 0x13fc <_fpadd_parts+0x17c>
    133a:	12 16       	cp	r1, r18
    133c:	13 06       	cpc	r1, r19
    133e:	6c f5       	brge	.+90     	; 0x139a <_fpadd_parts+0x11a>
    1340:	37 01       	movw	r6, r14
    1342:	48 01       	movw	r8, r16
    1344:	06 2e       	mov	r0, r22
    1346:	04 c0       	rjmp	.+8      	; 0x1350 <_fpadd_parts+0xd0>
    1348:	96 94       	lsr	r9
    134a:	87 94       	ror	r8
    134c:	77 94       	ror	r7
    134e:	67 94       	ror	r6
    1350:	0a 94       	dec	r0
    1352:	d2 f7       	brpl	.-12     	; 0x1348 <_fpadd_parts+0xc8>
    1354:	21 e0       	ldi	r18, 0x01	; 1
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <_fpadd_parts+0xe6>
    135e:	22 0f       	add	r18, r18
    1360:	33 1f       	adc	r19, r19
    1362:	44 1f       	adc	r20, r20
    1364:	55 1f       	adc	r21, r21
    1366:	6a 95       	dec	r22
    1368:	d2 f7       	brpl	.-12     	; 0x135e <_fpadd_parts+0xde>
    136a:	21 50       	subi	r18, 0x01	; 1
    136c:	30 40       	sbci	r19, 0x00	; 0
    136e:	40 40       	sbci	r20, 0x00	; 0
    1370:	50 40       	sbci	r21, 0x00	; 0
    1372:	2e 21       	and	r18, r14
    1374:	3f 21       	and	r19, r15
    1376:	40 23       	and	r20, r16
    1378:	51 23       	and	r21, r17
    137a:	21 15       	cp	r18, r1
    137c:	31 05       	cpc	r19, r1
    137e:	41 05       	cpc	r20, r1
    1380:	51 05       	cpc	r21, r1
    1382:	21 f0       	breq	.+8      	; 0x138c <_fpadd_parts+0x10c>
    1384:	21 e0       	ldi	r18, 0x01	; 1
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	79 01       	movw	r14, r18
    138e:	8a 01       	movw	r16, r20
    1390:	e6 28       	or	r14, r6
    1392:	f7 28       	or	r15, r7
    1394:	08 29       	or	r16, r8
    1396:	19 29       	or	r17, r9
    1398:	3c c0       	rjmp	.+120    	; 0x1412 <_fpadd_parts+0x192>
    139a:	23 2b       	or	r18, r19
    139c:	d1 f1       	breq	.+116    	; 0x1412 <_fpadd_parts+0x192>
    139e:	26 0e       	add	r2, r22
    13a0:	37 1e       	adc	r3, r23
    13a2:	35 01       	movw	r6, r10
    13a4:	46 01       	movw	r8, r12
    13a6:	06 2e       	mov	r0, r22
    13a8:	04 c0       	rjmp	.+8      	; 0x13b2 <_fpadd_parts+0x132>
    13aa:	96 94       	lsr	r9
    13ac:	87 94       	ror	r8
    13ae:	77 94       	ror	r7
    13b0:	67 94       	ror	r6
    13b2:	0a 94       	dec	r0
    13b4:	d2 f7       	brpl	.-12     	; 0x13aa <_fpadd_parts+0x12a>
    13b6:	21 e0       	ldi	r18, 0x01	; 1
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e0       	ldi	r20, 0x00	; 0
    13bc:	50 e0       	ldi	r21, 0x00	; 0
    13be:	04 c0       	rjmp	.+8      	; 0x13c8 <_fpadd_parts+0x148>
    13c0:	22 0f       	add	r18, r18
    13c2:	33 1f       	adc	r19, r19
    13c4:	44 1f       	adc	r20, r20
    13c6:	55 1f       	adc	r21, r21
    13c8:	6a 95       	dec	r22
    13ca:	d2 f7       	brpl	.-12     	; 0x13c0 <_fpadd_parts+0x140>
    13cc:	21 50       	subi	r18, 0x01	; 1
    13ce:	30 40       	sbci	r19, 0x00	; 0
    13d0:	40 40       	sbci	r20, 0x00	; 0
    13d2:	50 40       	sbci	r21, 0x00	; 0
    13d4:	2a 21       	and	r18, r10
    13d6:	3b 21       	and	r19, r11
    13d8:	4c 21       	and	r20, r12
    13da:	5d 21       	and	r21, r13
    13dc:	21 15       	cp	r18, r1
    13de:	31 05       	cpc	r19, r1
    13e0:	41 05       	cpc	r20, r1
    13e2:	51 05       	cpc	r21, r1
    13e4:	21 f0       	breq	.+8      	; 0x13ee <_fpadd_parts+0x16e>
    13e6:	21 e0       	ldi	r18, 0x01	; 1
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e0       	ldi	r20, 0x00	; 0
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	59 01       	movw	r10, r18
    13f0:	6a 01       	movw	r12, r20
    13f2:	a6 28       	or	r10, r6
    13f4:	b7 28       	or	r11, r7
    13f6:	c8 28       	or	r12, r8
    13f8:	d9 28       	or	r13, r9
    13fa:	0b c0       	rjmp	.+22     	; 0x1412 <_fpadd_parts+0x192>
    13fc:	82 15       	cp	r24, r2
    13fe:	93 05       	cpc	r25, r3
    1400:	2c f0       	brlt	.+10     	; 0x140c <_fpadd_parts+0x18c>
    1402:	1c 01       	movw	r2, r24
    1404:	aa 24       	eor	r10, r10
    1406:	bb 24       	eor	r11, r11
    1408:	65 01       	movw	r12, r10
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <_fpadd_parts+0x192>
    140c:	ee 24       	eor	r14, r14
    140e:	ff 24       	eor	r15, r15
    1410:	87 01       	movw	r16, r14
    1412:	11 96       	adiw	r26, 0x01	; 1
    1414:	9c 91       	ld	r25, X
    1416:	d2 01       	movw	r26, r4
    1418:	11 96       	adiw	r26, 0x01	; 1
    141a:	8c 91       	ld	r24, X
    141c:	98 17       	cp	r25, r24
    141e:	09 f4       	brne	.+2      	; 0x1422 <_fpadd_parts+0x1a2>
    1420:	45 c0       	rjmp	.+138    	; 0x14ac <_fpadd_parts+0x22c>
    1422:	99 23       	and	r25, r25
    1424:	39 f0       	breq	.+14     	; 0x1434 <_fpadd_parts+0x1b4>
    1426:	a8 01       	movw	r20, r16
    1428:	97 01       	movw	r18, r14
    142a:	2a 19       	sub	r18, r10
    142c:	3b 09       	sbc	r19, r11
    142e:	4c 09       	sbc	r20, r12
    1430:	5d 09       	sbc	r21, r13
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <_fpadd_parts+0x1c0>
    1434:	a6 01       	movw	r20, r12
    1436:	95 01       	movw	r18, r10
    1438:	2e 19       	sub	r18, r14
    143a:	3f 09       	sbc	r19, r15
    143c:	40 0b       	sbc	r20, r16
    143e:	51 0b       	sbc	r21, r17
    1440:	57 fd       	sbrc	r21, 7
    1442:	08 c0       	rjmp	.+16     	; 0x1454 <_fpadd_parts+0x1d4>
    1444:	11 82       	std	Z+1, r1	; 0x01
    1446:	33 82       	std	Z+3, r3	; 0x03
    1448:	22 82       	std	Z+2, r2	; 0x02
    144a:	24 83       	std	Z+4, r18	; 0x04
    144c:	35 83       	std	Z+5, r19	; 0x05
    144e:	46 83       	std	Z+6, r20	; 0x06
    1450:	57 83       	std	Z+7, r21	; 0x07
    1452:	1d c0       	rjmp	.+58     	; 0x148e <_fpadd_parts+0x20e>
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	81 83       	std	Z+1, r24	; 0x01
    1458:	33 82       	std	Z+3, r3	; 0x03
    145a:	22 82       	std	Z+2, r2	; 0x02
    145c:	88 27       	eor	r24, r24
    145e:	99 27       	eor	r25, r25
    1460:	dc 01       	movw	r26, r24
    1462:	82 1b       	sub	r24, r18
    1464:	93 0b       	sbc	r25, r19
    1466:	a4 0b       	sbc	r26, r20
    1468:	b5 0b       	sbc	r27, r21
    146a:	84 83       	std	Z+4, r24	; 0x04
    146c:	95 83       	std	Z+5, r25	; 0x05
    146e:	a6 83       	std	Z+6, r26	; 0x06
    1470:	b7 83       	std	Z+7, r27	; 0x07
    1472:	0d c0       	rjmp	.+26     	; 0x148e <_fpadd_parts+0x20e>
    1474:	22 0f       	add	r18, r18
    1476:	33 1f       	adc	r19, r19
    1478:	44 1f       	adc	r20, r20
    147a:	55 1f       	adc	r21, r21
    147c:	24 83       	std	Z+4, r18	; 0x04
    147e:	35 83       	std	Z+5, r19	; 0x05
    1480:	46 83       	std	Z+6, r20	; 0x06
    1482:	57 83       	std	Z+7, r21	; 0x07
    1484:	82 81       	ldd	r24, Z+2	; 0x02
    1486:	93 81       	ldd	r25, Z+3	; 0x03
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	93 83       	std	Z+3, r25	; 0x03
    148c:	82 83       	std	Z+2, r24	; 0x02
    148e:	24 81       	ldd	r18, Z+4	; 0x04
    1490:	35 81       	ldd	r19, Z+5	; 0x05
    1492:	46 81       	ldd	r20, Z+6	; 0x06
    1494:	57 81       	ldd	r21, Z+7	; 0x07
    1496:	da 01       	movw	r26, r20
    1498:	c9 01       	movw	r24, r18
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	a1 09       	sbc	r26, r1
    149e:	b1 09       	sbc	r27, r1
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	af 4f       	sbci	r26, 0xFF	; 255
    14a6:	bf 43       	sbci	r27, 0x3F	; 63
    14a8:	28 f3       	brcs	.-54     	; 0x1474 <_fpadd_parts+0x1f4>
    14aa:	0b c0       	rjmp	.+22     	; 0x14c2 <_fpadd_parts+0x242>
    14ac:	91 83       	std	Z+1, r25	; 0x01
    14ae:	33 82       	std	Z+3, r3	; 0x03
    14b0:	22 82       	std	Z+2, r2	; 0x02
    14b2:	ea 0c       	add	r14, r10
    14b4:	fb 1c       	adc	r15, r11
    14b6:	0c 1d       	adc	r16, r12
    14b8:	1d 1d       	adc	r17, r13
    14ba:	e4 82       	std	Z+4, r14	; 0x04
    14bc:	f5 82       	std	Z+5, r15	; 0x05
    14be:	06 83       	std	Z+6, r16	; 0x06
    14c0:	17 83       	std	Z+7, r17	; 0x07
    14c2:	83 e0       	ldi	r24, 0x03	; 3
    14c4:	80 83       	st	Z, r24
    14c6:	24 81       	ldd	r18, Z+4	; 0x04
    14c8:	35 81       	ldd	r19, Z+5	; 0x05
    14ca:	46 81       	ldd	r20, Z+6	; 0x06
    14cc:	57 81       	ldd	r21, Z+7	; 0x07
    14ce:	57 ff       	sbrs	r21, 7
    14d0:	1a c0       	rjmp	.+52     	; 0x1506 <_fpadd_parts+0x286>
    14d2:	c9 01       	movw	r24, r18
    14d4:	aa 27       	eor	r26, r26
    14d6:	97 fd       	sbrc	r25, 7
    14d8:	a0 95       	com	r26
    14da:	ba 2f       	mov	r27, r26
    14dc:	81 70       	andi	r24, 0x01	; 1
    14de:	90 70       	andi	r25, 0x00	; 0
    14e0:	a0 70       	andi	r26, 0x00	; 0
    14e2:	b0 70       	andi	r27, 0x00	; 0
    14e4:	56 95       	lsr	r21
    14e6:	47 95       	ror	r20
    14e8:	37 95       	ror	r19
    14ea:	27 95       	ror	r18
    14ec:	82 2b       	or	r24, r18
    14ee:	93 2b       	or	r25, r19
    14f0:	a4 2b       	or	r26, r20
    14f2:	b5 2b       	or	r27, r21
    14f4:	84 83       	std	Z+4, r24	; 0x04
    14f6:	95 83       	std	Z+5, r25	; 0x05
    14f8:	a6 83       	std	Z+6, r26	; 0x06
    14fa:	b7 83       	std	Z+7, r27	; 0x07
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	93 81       	ldd	r25, Z+3	; 0x03
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	93 83       	std	Z+3, r25	; 0x03
    1504:	82 83       	std	Z+2, r24	; 0x02
    1506:	df 01       	movw	r26, r30
    1508:	01 c0       	rjmp	.+2      	; 0x150c <_fpadd_parts+0x28c>
    150a:	d2 01       	movw	r26, r4
    150c:	cd 01       	movw	r24, r26
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	e2 e1       	ldi	r30, 0x12	; 18
    1514:	0c 94 a9 26 	jmp	0x4d52	; 0x4d52 <__epilogue_restores__>

00001518 <__subsf3>:
    1518:	a0 e2       	ldi	r26, 0x20	; 32
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e2 e9       	ldi	r30, 0x92	; 146
    151e:	fa e0       	ldi	r31, 0x0A	; 10
    1520:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__prologue_saves__+0x18>
    1524:	69 83       	std	Y+1, r22	; 0x01
    1526:	7a 83       	std	Y+2, r23	; 0x02
    1528:	8b 83       	std	Y+3, r24	; 0x03
    152a:	9c 83       	std	Y+4, r25	; 0x04
    152c:	2d 83       	std	Y+5, r18	; 0x05
    152e:	3e 83       	std	Y+6, r19	; 0x06
    1530:	4f 83       	std	Y+7, r20	; 0x07
    1532:	58 87       	std	Y+8, r21	; 0x08
    1534:	e9 e0       	ldi	r30, 0x09	; 9
    1536:	ee 2e       	mov	r14, r30
    1538:	f1 2c       	mov	r15, r1
    153a:	ec 0e       	add	r14, r28
    153c:	fd 1e       	adc	r15, r29
    153e:	ce 01       	movw	r24, r28
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	b7 01       	movw	r22, r14
    1544:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    1548:	8e 01       	movw	r16, r28
    154a:	0f 5e       	subi	r16, 0xEF	; 239
    154c:	1f 4f       	sbci	r17, 0xFF	; 255
    154e:	ce 01       	movw	r24, r28
    1550:	05 96       	adiw	r24, 0x05	; 5
    1552:	b8 01       	movw	r22, r16
    1554:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    1558:	8a 89       	ldd	r24, Y+18	; 0x12
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	89 27       	eor	r24, r25
    155e:	8a 8b       	std	Y+18, r24	; 0x12
    1560:	c7 01       	movw	r24, r14
    1562:	b8 01       	movw	r22, r16
    1564:	ae 01       	movw	r20, r28
    1566:	47 5e       	subi	r20, 0xE7	; 231
    1568:	5f 4f       	sbci	r21, 0xFF	; 255
    156a:	0e 94 40 09 	call	0x1280	; 0x1280 <_fpadd_parts>
    156e:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__pack_f>
    1572:	a0 96       	adiw	r28, 0x20	; 32
    1574:	e6 e0       	ldi	r30, 0x06	; 6
    1576:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__epilogue_restores__+0x18>

0000157a <__addsf3>:
    157a:	a0 e2       	ldi	r26, 0x20	; 32
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e3 ec       	ldi	r30, 0xC3	; 195
    1580:	fa e0       	ldi	r31, 0x0A	; 10
    1582:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__prologue_saves__+0x18>
    1586:	69 83       	std	Y+1, r22	; 0x01
    1588:	7a 83       	std	Y+2, r23	; 0x02
    158a:	8b 83       	std	Y+3, r24	; 0x03
    158c:	9c 83       	std	Y+4, r25	; 0x04
    158e:	2d 83       	std	Y+5, r18	; 0x05
    1590:	3e 83       	std	Y+6, r19	; 0x06
    1592:	4f 83       	std	Y+7, r20	; 0x07
    1594:	58 87       	std	Y+8, r21	; 0x08
    1596:	f9 e0       	ldi	r31, 0x09	; 9
    1598:	ef 2e       	mov	r14, r31
    159a:	f1 2c       	mov	r15, r1
    159c:	ec 0e       	add	r14, r28
    159e:	fd 1e       	adc	r15, r29
    15a0:	ce 01       	movw	r24, r28
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	b7 01       	movw	r22, r14
    15a6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    15aa:	8e 01       	movw	r16, r28
    15ac:	0f 5e       	subi	r16, 0xEF	; 239
    15ae:	1f 4f       	sbci	r17, 0xFF	; 255
    15b0:	ce 01       	movw	r24, r28
    15b2:	05 96       	adiw	r24, 0x05	; 5
    15b4:	b8 01       	movw	r22, r16
    15b6:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    15ba:	c7 01       	movw	r24, r14
    15bc:	b8 01       	movw	r22, r16
    15be:	ae 01       	movw	r20, r28
    15c0:	47 5e       	subi	r20, 0xE7	; 231
    15c2:	5f 4f       	sbci	r21, 0xFF	; 255
    15c4:	0e 94 40 09 	call	0x1280	; 0x1280 <_fpadd_parts>
    15c8:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__pack_f>
    15cc:	a0 96       	adiw	r28, 0x20	; 32
    15ce:	e6 e0       	ldi	r30, 0x06	; 6
    15d0:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__epilogue_restores__+0x18>

000015d4 <__mulsf3>:
    15d4:	a0 e2       	ldi	r26, 0x20	; 32
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e0 ef       	ldi	r30, 0xF0	; 240
    15da:	fa e0       	ldi	r31, 0x0A	; 10
    15dc:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__prologue_saves__>
    15e0:	69 83       	std	Y+1, r22	; 0x01
    15e2:	7a 83       	std	Y+2, r23	; 0x02
    15e4:	8b 83       	std	Y+3, r24	; 0x03
    15e6:	9c 83       	std	Y+4, r25	; 0x04
    15e8:	2d 83       	std	Y+5, r18	; 0x05
    15ea:	3e 83       	std	Y+6, r19	; 0x06
    15ec:	4f 83       	std	Y+7, r20	; 0x07
    15ee:	58 87       	std	Y+8, r21	; 0x08
    15f0:	ce 01       	movw	r24, r28
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	be 01       	movw	r22, r28
    15f6:	67 5f       	subi	r22, 0xF7	; 247
    15f8:	7f 4f       	sbci	r23, 0xFF	; 255
    15fa:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    15fe:	ce 01       	movw	r24, r28
    1600:	05 96       	adiw	r24, 0x05	; 5
    1602:	be 01       	movw	r22, r28
    1604:	6f 5e       	subi	r22, 0xEF	; 239
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    160c:	99 85       	ldd	r25, Y+9	; 0x09
    160e:	92 30       	cpi	r25, 0x02	; 2
    1610:	88 f0       	brcs	.+34     	; 0x1634 <__mulsf3+0x60>
    1612:	89 89       	ldd	r24, Y+17	; 0x11
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	c8 f0       	brcs	.+50     	; 0x164a <__mulsf3+0x76>
    1618:	94 30       	cpi	r25, 0x04	; 4
    161a:	19 f4       	brne	.+6      	; 0x1622 <__mulsf3+0x4e>
    161c:	82 30       	cpi	r24, 0x02	; 2
    161e:	51 f4       	brne	.+20     	; 0x1634 <__mulsf3+0x60>
    1620:	04 c0       	rjmp	.+8      	; 0x162a <__mulsf3+0x56>
    1622:	84 30       	cpi	r24, 0x04	; 4
    1624:	29 f4       	brne	.+10     	; 0x1630 <__mulsf3+0x5c>
    1626:	92 30       	cpi	r25, 0x02	; 2
    1628:	81 f4       	brne	.+32     	; 0x164a <__mulsf3+0x76>
    162a:	80 e6       	ldi	r24, 0x60	; 96
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	c6 c0       	rjmp	.+396    	; 0x17bc <__mulsf3+0x1e8>
    1630:	92 30       	cpi	r25, 0x02	; 2
    1632:	49 f4       	brne	.+18     	; 0x1646 <__mulsf3+0x72>
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	9a 85       	ldd	r25, Y+10	; 0x0a
    1638:	8a 89       	ldd	r24, Y+18	; 0x12
    163a:	98 13       	cpse	r25, r24
    163c:	21 e0       	ldi	r18, 0x01	; 1
    163e:	2a 87       	std	Y+10, r18	; 0x0a
    1640:	ce 01       	movw	r24, r28
    1642:	09 96       	adiw	r24, 0x09	; 9
    1644:	bb c0       	rjmp	.+374    	; 0x17bc <__mulsf3+0x1e8>
    1646:	82 30       	cpi	r24, 0x02	; 2
    1648:	49 f4       	brne	.+18     	; 0x165c <__mulsf3+0x88>
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	9a 85       	ldd	r25, Y+10	; 0x0a
    164e:	8a 89       	ldd	r24, Y+18	; 0x12
    1650:	98 13       	cpse	r25, r24
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	2a 8b       	std	Y+18, r18	; 0x12
    1656:	ce 01       	movw	r24, r28
    1658:	41 96       	adiw	r24, 0x11	; 17
    165a:	b0 c0       	rjmp	.+352    	; 0x17bc <__mulsf3+0x1e8>
    165c:	2d 84       	ldd	r2, Y+13	; 0x0d
    165e:	3e 84       	ldd	r3, Y+14	; 0x0e
    1660:	4f 84       	ldd	r4, Y+15	; 0x0f
    1662:	58 88       	ldd	r5, Y+16	; 0x10
    1664:	6d 88       	ldd	r6, Y+21	; 0x15
    1666:	7e 88       	ldd	r7, Y+22	; 0x16
    1668:	8f 88       	ldd	r8, Y+23	; 0x17
    166a:	98 8c       	ldd	r9, Y+24	; 0x18
    166c:	ee 24       	eor	r14, r14
    166e:	ff 24       	eor	r15, r15
    1670:	87 01       	movw	r16, r14
    1672:	aa 24       	eor	r10, r10
    1674:	bb 24       	eor	r11, r11
    1676:	65 01       	movw	r12, r10
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	50 e0       	ldi	r21, 0x00	; 0
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	e0 e0       	ldi	r30, 0x00	; 0
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	c1 01       	movw	r24, r2
    1686:	81 70       	andi	r24, 0x01	; 1
    1688:	90 70       	andi	r25, 0x00	; 0
    168a:	89 2b       	or	r24, r25
    168c:	e9 f0       	breq	.+58     	; 0x16c8 <__mulsf3+0xf4>
    168e:	e6 0c       	add	r14, r6
    1690:	f7 1c       	adc	r15, r7
    1692:	08 1d       	adc	r16, r8
    1694:	19 1d       	adc	r17, r9
    1696:	9a 01       	movw	r18, r20
    1698:	ab 01       	movw	r20, r22
    169a:	2a 0d       	add	r18, r10
    169c:	3b 1d       	adc	r19, r11
    169e:	4c 1d       	adc	r20, r12
    16a0:	5d 1d       	adc	r21, r13
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a0 e0       	ldi	r26, 0x00	; 0
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e6 14       	cp	r14, r6
    16ac:	f7 04       	cpc	r15, r7
    16ae:	08 05       	cpc	r16, r8
    16b0:	19 05       	cpc	r17, r9
    16b2:	20 f4       	brcc	.+8      	; 0x16bc <__mulsf3+0xe8>
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	a0 e0       	ldi	r26, 0x00	; 0
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	ba 01       	movw	r22, r20
    16be:	a9 01       	movw	r20, r18
    16c0:	48 0f       	add	r20, r24
    16c2:	59 1f       	adc	r21, r25
    16c4:	6a 1f       	adc	r22, r26
    16c6:	7b 1f       	adc	r23, r27
    16c8:	aa 0c       	add	r10, r10
    16ca:	bb 1c       	adc	r11, r11
    16cc:	cc 1c       	adc	r12, r12
    16ce:	dd 1c       	adc	r13, r13
    16d0:	97 fe       	sbrs	r9, 7
    16d2:	08 c0       	rjmp	.+16     	; 0x16e4 <__mulsf3+0x110>
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a0 e0       	ldi	r26, 0x00	; 0
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	a8 2a       	or	r10, r24
    16de:	b9 2a       	or	r11, r25
    16e0:	ca 2a       	or	r12, r26
    16e2:	db 2a       	or	r13, r27
    16e4:	31 96       	adiw	r30, 0x01	; 1
    16e6:	e0 32       	cpi	r30, 0x20	; 32
    16e8:	f1 05       	cpc	r31, r1
    16ea:	49 f0       	breq	.+18     	; 0x16fe <__mulsf3+0x12a>
    16ec:	66 0c       	add	r6, r6
    16ee:	77 1c       	adc	r7, r7
    16f0:	88 1c       	adc	r8, r8
    16f2:	99 1c       	adc	r9, r9
    16f4:	56 94       	lsr	r5
    16f6:	47 94       	ror	r4
    16f8:	37 94       	ror	r3
    16fa:	27 94       	ror	r2
    16fc:	c3 cf       	rjmp	.-122    	; 0x1684 <__mulsf3+0xb0>
    16fe:	fa 85       	ldd	r31, Y+10	; 0x0a
    1700:	ea 89       	ldd	r30, Y+18	; 0x12
    1702:	2b 89       	ldd	r18, Y+19	; 0x13
    1704:	3c 89       	ldd	r19, Y+20	; 0x14
    1706:	8b 85       	ldd	r24, Y+11	; 0x0b
    1708:	9c 85       	ldd	r25, Y+12	; 0x0c
    170a:	28 0f       	add	r18, r24
    170c:	39 1f       	adc	r19, r25
    170e:	2e 5f       	subi	r18, 0xFE	; 254
    1710:	3f 4f       	sbci	r19, 0xFF	; 255
    1712:	17 c0       	rjmp	.+46     	; 0x1742 <__mulsf3+0x16e>
    1714:	ca 01       	movw	r24, r20
    1716:	81 70       	andi	r24, 0x01	; 1
    1718:	90 70       	andi	r25, 0x00	; 0
    171a:	89 2b       	or	r24, r25
    171c:	61 f0       	breq	.+24     	; 0x1736 <__mulsf3+0x162>
    171e:	16 95       	lsr	r17
    1720:	07 95       	ror	r16
    1722:	f7 94       	ror	r15
    1724:	e7 94       	ror	r14
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a0 e0       	ldi	r26, 0x00	; 0
    172c:	b0 e8       	ldi	r27, 0x80	; 128
    172e:	e8 2a       	or	r14, r24
    1730:	f9 2a       	or	r15, r25
    1732:	0a 2b       	or	r16, r26
    1734:	1b 2b       	or	r17, r27
    1736:	76 95       	lsr	r23
    1738:	67 95       	ror	r22
    173a:	57 95       	ror	r21
    173c:	47 95       	ror	r20
    173e:	2f 5f       	subi	r18, 0xFF	; 255
    1740:	3f 4f       	sbci	r19, 0xFF	; 255
    1742:	77 fd       	sbrc	r23, 7
    1744:	e7 cf       	rjmp	.-50     	; 0x1714 <__mulsf3+0x140>
    1746:	0c c0       	rjmp	.+24     	; 0x1760 <__mulsf3+0x18c>
    1748:	44 0f       	add	r20, r20
    174a:	55 1f       	adc	r21, r21
    174c:	66 1f       	adc	r22, r22
    174e:	77 1f       	adc	r23, r23
    1750:	17 fd       	sbrc	r17, 7
    1752:	41 60       	ori	r20, 0x01	; 1
    1754:	ee 0c       	add	r14, r14
    1756:	ff 1c       	adc	r15, r15
    1758:	00 1f       	adc	r16, r16
    175a:	11 1f       	adc	r17, r17
    175c:	21 50       	subi	r18, 0x01	; 1
    175e:	30 40       	sbci	r19, 0x00	; 0
    1760:	40 30       	cpi	r20, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	59 07       	cpc	r21, r25
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	69 07       	cpc	r22, r25
    176a:	90 e4       	ldi	r25, 0x40	; 64
    176c:	79 07       	cpc	r23, r25
    176e:	60 f3       	brcs	.-40     	; 0x1748 <__mulsf3+0x174>
    1770:	2b 8f       	std	Y+27, r18	; 0x1b
    1772:	3c 8f       	std	Y+28, r19	; 0x1c
    1774:	db 01       	movw	r26, r22
    1776:	ca 01       	movw	r24, r20
    1778:	8f 77       	andi	r24, 0x7F	; 127
    177a:	90 70       	andi	r25, 0x00	; 0
    177c:	a0 70       	andi	r26, 0x00	; 0
    177e:	b0 70       	andi	r27, 0x00	; 0
    1780:	80 34       	cpi	r24, 0x40	; 64
    1782:	91 05       	cpc	r25, r1
    1784:	a1 05       	cpc	r26, r1
    1786:	b1 05       	cpc	r27, r1
    1788:	61 f4       	brne	.+24     	; 0x17a2 <__mulsf3+0x1ce>
    178a:	47 fd       	sbrc	r20, 7
    178c:	0a c0       	rjmp	.+20     	; 0x17a2 <__mulsf3+0x1ce>
    178e:	e1 14       	cp	r14, r1
    1790:	f1 04       	cpc	r15, r1
    1792:	01 05       	cpc	r16, r1
    1794:	11 05       	cpc	r17, r1
    1796:	29 f0       	breq	.+10     	; 0x17a2 <__mulsf3+0x1ce>
    1798:	40 5c       	subi	r20, 0xC0	; 192
    179a:	5f 4f       	sbci	r21, 0xFF	; 255
    179c:	6f 4f       	sbci	r22, 0xFF	; 255
    179e:	7f 4f       	sbci	r23, 0xFF	; 255
    17a0:	40 78       	andi	r20, 0x80	; 128
    17a2:	1a 8e       	std	Y+26, r1	; 0x1a
    17a4:	fe 17       	cp	r31, r30
    17a6:	11 f0       	breq	.+4      	; 0x17ac <__mulsf3+0x1d8>
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	8a 8f       	std	Y+26, r24	; 0x1a
    17ac:	4d 8f       	std	Y+29, r20	; 0x1d
    17ae:	5e 8f       	std	Y+30, r21	; 0x1e
    17b0:	6f 8f       	std	Y+31, r22	; 0x1f
    17b2:	78 a3       	std	Y+32, r23	; 0x20
    17b4:	83 e0       	ldi	r24, 0x03	; 3
    17b6:	89 8f       	std	Y+25, r24	; 0x19
    17b8:	ce 01       	movw	r24, r28
    17ba:	49 96       	adiw	r24, 0x19	; 25
    17bc:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__pack_f>
    17c0:	a0 96       	adiw	r28, 0x20	; 32
    17c2:	e2 e1       	ldi	r30, 0x12	; 18
    17c4:	0c 94 a9 26 	jmp	0x4d52	; 0x4d52 <__epilogue_restores__>

000017c8 <__divsf3>:
    17c8:	a8 e1       	ldi	r26, 0x18	; 24
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	ea ee       	ldi	r30, 0xEA	; 234
    17ce:	fb e0       	ldi	r31, 0x0B	; 11
    17d0:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__prologue_saves__+0x10>
    17d4:	69 83       	std	Y+1, r22	; 0x01
    17d6:	7a 83       	std	Y+2, r23	; 0x02
    17d8:	8b 83       	std	Y+3, r24	; 0x03
    17da:	9c 83       	std	Y+4, r25	; 0x04
    17dc:	2d 83       	std	Y+5, r18	; 0x05
    17de:	3e 83       	std	Y+6, r19	; 0x06
    17e0:	4f 83       	std	Y+7, r20	; 0x07
    17e2:	58 87       	std	Y+8, r21	; 0x08
    17e4:	b9 e0       	ldi	r27, 0x09	; 9
    17e6:	eb 2e       	mov	r14, r27
    17e8:	f1 2c       	mov	r15, r1
    17ea:	ec 0e       	add	r14, r28
    17ec:	fd 1e       	adc	r15, r29
    17ee:	ce 01       	movw	r24, r28
    17f0:	01 96       	adiw	r24, 0x01	; 1
    17f2:	b7 01       	movw	r22, r14
    17f4:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    17f8:	8e 01       	movw	r16, r28
    17fa:	0f 5e       	subi	r16, 0xEF	; 239
    17fc:	1f 4f       	sbci	r17, 0xFF	; 255
    17fe:	ce 01       	movw	r24, r28
    1800:	05 96       	adiw	r24, 0x05	; 5
    1802:	b8 01       	movw	r22, r16
    1804:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    1808:	29 85       	ldd	r18, Y+9	; 0x09
    180a:	22 30       	cpi	r18, 0x02	; 2
    180c:	08 f4       	brcc	.+2      	; 0x1810 <__divsf3+0x48>
    180e:	7e c0       	rjmp	.+252    	; 0x190c <__divsf3+0x144>
    1810:	39 89       	ldd	r19, Y+17	; 0x11
    1812:	32 30       	cpi	r19, 0x02	; 2
    1814:	10 f4       	brcc	.+4      	; 0x181a <__divsf3+0x52>
    1816:	b8 01       	movw	r22, r16
    1818:	7c c0       	rjmp	.+248    	; 0x1912 <__divsf3+0x14a>
    181a:	8a 85       	ldd	r24, Y+10	; 0x0a
    181c:	9a 89       	ldd	r25, Y+18	; 0x12
    181e:	89 27       	eor	r24, r25
    1820:	8a 87       	std	Y+10, r24	; 0x0a
    1822:	24 30       	cpi	r18, 0x04	; 4
    1824:	11 f0       	breq	.+4      	; 0x182a <__divsf3+0x62>
    1826:	22 30       	cpi	r18, 0x02	; 2
    1828:	31 f4       	brne	.+12     	; 0x1836 <__divsf3+0x6e>
    182a:	23 17       	cp	r18, r19
    182c:	09 f0       	breq	.+2      	; 0x1830 <__divsf3+0x68>
    182e:	6e c0       	rjmp	.+220    	; 0x190c <__divsf3+0x144>
    1830:	60 e6       	ldi	r22, 0x60	; 96
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	6e c0       	rjmp	.+220    	; 0x1912 <__divsf3+0x14a>
    1836:	34 30       	cpi	r19, 0x04	; 4
    1838:	39 f4       	brne	.+14     	; 0x1848 <__divsf3+0x80>
    183a:	1d 86       	std	Y+13, r1	; 0x0d
    183c:	1e 86       	std	Y+14, r1	; 0x0e
    183e:	1f 86       	std	Y+15, r1	; 0x0f
    1840:	18 8a       	std	Y+16, r1	; 0x10
    1842:	1c 86       	std	Y+12, r1	; 0x0c
    1844:	1b 86       	std	Y+11, r1	; 0x0b
    1846:	04 c0       	rjmp	.+8      	; 0x1850 <__divsf3+0x88>
    1848:	32 30       	cpi	r19, 0x02	; 2
    184a:	21 f4       	brne	.+8      	; 0x1854 <__divsf3+0x8c>
    184c:	84 e0       	ldi	r24, 0x04	; 4
    184e:	89 87       	std	Y+9, r24	; 0x09
    1850:	b7 01       	movw	r22, r14
    1852:	5f c0       	rjmp	.+190    	; 0x1912 <__divsf3+0x14a>
    1854:	2b 85       	ldd	r18, Y+11	; 0x0b
    1856:	3c 85       	ldd	r19, Y+12	; 0x0c
    1858:	8b 89       	ldd	r24, Y+19	; 0x13
    185a:	9c 89       	ldd	r25, Y+20	; 0x14
    185c:	28 1b       	sub	r18, r24
    185e:	39 0b       	sbc	r19, r25
    1860:	3c 87       	std	Y+12, r19	; 0x0c
    1862:	2b 87       	std	Y+11, r18	; 0x0b
    1864:	ed 84       	ldd	r14, Y+13	; 0x0d
    1866:	fe 84       	ldd	r15, Y+14	; 0x0e
    1868:	0f 85       	ldd	r16, Y+15	; 0x0f
    186a:	18 89       	ldd	r17, Y+16	; 0x10
    186c:	ad 88       	ldd	r10, Y+21	; 0x15
    186e:	be 88       	ldd	r11, Y+22	; 0x16
    1870:	cf 88       	ldd	r12, Y+23	; 0x17
    1872:	d8 8c       	ldd	r13, Y+24	; 0x18
    1874:	ea 14       	cp	r14, r10
    1876:	fb 04       	cpc	r15, r11
    1878:	0c 05       	cpc	r16, r12
    187a:	1d 05       	cpc	r17, r13
    187c:	40 f4       	brcc	.+16     	; 0x188e <__divsf3+0xc6>
    187e:	ee 0c       	add	r14, r14
    1880:	ff 1c       	adc	r15, r15
    1882:	00 1f       	adc	r16, r16
    1884:	11 1f       	adc	r17, r17
    1886:	21 50       	subi	r18, 0x01	; 1
    1888:	30 40       	sbci	r19, 0x00	; 0
    188a:	3c 87       	std	Y+12, r19	; 0x0c
    188c:	2b 87       	std	Y+11, r18	; 0x0b
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	80 e0       	ldi	r24, 0x00	; 0
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a0 e0       	ldi	r26, 0x00	; 0
    189c:	b0 e4       	ldi	r27, 0x40	; 64
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	ea 14       	cp	r14, r10
    18a4:	fb 04       	cpc	r15, r11
    18a6:	0c 05       	cpc	r16, r12
    18a8:	1d 05       	cpc	r17, r13
    18aa:	40 f0       	brcs	.+16     	; 0x18bc <__divsf3+0xf4>
    18ac:	28 2b       	or	r18, r24
    18ae:	39 2b       	or	r19, r25
    18b0:	4a 2b       	or	r20, r26
    18b2:	5b 2b       	or	r21, r27
    18b4:	ea 18       	sub	r14, r10
    18b6:	fb 08       	sbc	r15, r11
    18b8:	0c 09       	sbc	r16, r12
    18ba:	1d 09       	sbc	r17, r13
    18bc:	b6 95       	lsr	r27
    18be:	a7 95       	ror	r26
    18c0:	97 95       	ror	r25
    18c2:	87 95       	ror	r24
    18c4:	ee 0c       	add	r14, r14
    18c6:	ff 1c       	adc	r15, r15
    18c8:	00 1f       	adc	r16, r16
    18ca:	11 1f       	adc	r17, r17
    18cc:	6f 5f       	subi	r22, 0xFF	; 255
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	6f 31       	cpi	r22, 0x1F	; 31
    18d2:	71 05       	cpc	r23, r1
    18d4:	31 f7       	brne	.-52     	; 0x18a2 <__divsf3+0xda>
    18d6:	da 01       	movw	r26, r20
    18d8:	c9 01       	movw	r24, r18
    18da:	8f 77       	andi	r24, 0x7F	; 127
    18dc:	90 70       	andi	r25, 0x00	; 0
    18de:	a0 70       	andi	r26, 0x00	; 0
    18e0:	b0 70       	andi	r27, 0x00	; 0
    18e2:	80 34       	cpi	r24, 0x40	; 64
    18e4:	91 05       	cpc	r25, r1
    18e6:	a1 05       	cpc	r26, r1
    18e8:	b1 05       	cpc	r27, r1
    18ea:	61 f4       	brne	.+24     	; 0x1904 <__divsf3+0x13c>
    18ec:	27 fd       	sbrc	r18, 7
    18ee:	0a c0       	rjmp	.+20     	; 0x1904 <__divsf3+0x13c>
    18f0:	e1 14       	cp	r14, r1
    18f2:	f1 04       	cpc	r15, r1
    18f4:	01 05       	cpc	r16, r1
    18f6:	11 05       	cpc	r17, r1
    18f8:	29 f0       	breq	.+10     	; 0x1904 <__divsf3+0x13c>
    18fa:	20 5c       	subi	r18, 0xC0	; 192
    18fc:	3f 4f       	sbci	r19, 0xFF	; 255
    18fe:	4f 4f       	sbci	r20, 0xFF	; 255
    1900:	5f 4f       	sbci	r21, 0xFF	; 255
    1902:	20 78       	andi	r18, 0x80	; 128
    1904:	2d 87       	std	Y+13, r18	; 0x0d
    1906:	3e 87       	std	Y+14, r19	; 0x0e
    1908:	4f 87       	std	Y+15, r20	; 0x0f
    190a:	58 8b       	std	Y+16, r21	; 0x10
    190c:	be 01       	movw	r22, r28
    190e:	67 5f       	subi	r22, 0xF7	; 247
    1910:	7f 4f       	sbci	r23, 0xFF	; 255
    1912:	cb 01       	movw	r24, r22
    1914:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__pack_f>
    1918:	68 96       	adiw	r28, 0x18	; 24
    191a:	ea e0       	ldi	r30, 0x0A	; 10
    191c:	0c 94 b1 26 	jmp	0x4d62	; 0x4d62 <__epilogue_restores__+0x10>

00001920 <__gtsf2>:
    1920:	a8 e1       	ldi	r26, 0x18	; 24
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e6 e9       	ldi	r30, 0x96	; 150
    1926:	fc e0       	ldi	r31, 0x0C	; 12
    1928:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__prologue_saves__+0x18>
    192c:	69 83       	std	Y+1, r22	; 0x01
    192e:	7a 83       	std	Y+2, r23	; 0x02
    1930:	8b 83       	std	Y+3, r24	; 0x03
    1932:	9c 83       	std	Y+4, r25	; 0x04
    1934:	2d 83       	std	Y+5, r18	; 0x05
    1936:	3e 83       	std	Y+6, r19	; 0x06
    1938:	4f 83       	std	Y+7, r20	; 0x07
    193a:	58 87       	std	Y+8, r21	; 0x08
    193c:	89 e0       	ldi	r24, 0x09	; 9
    193e:	e8 2e       	mov	r14, r24
    1940:	f1 2c       	mov	r15, r1
    1942:	ec 0e       	add	r14, r28
    1944:	fd 1e       	adc	r15, r29
    1946:	ce 01       	movw	r24, r28
    1948:	01 96       	adiw	r24, 0x01	; 1
    194a:	b7 01       	movw	r22, r14
    194c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    1950:	8e 01       	movw	r16, r28
    1952:	0f 5e       	subi	r16, 0xEF	; 239
    1954:	1f 4f       	sbci	r17, 0xFF	; 255
    1956:	ce 01       	movw	r24, r28
    1958:	05 96       	adiw	r24, 0x05	; 5
    195a:	b8 01       	movw	r22, r16
    195c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    1960:	89 85       	ldd	r24, Y+9	; 0x09
    1962:	82 30       	cpi	r24, 0x02	; 2
    1964:	40 f0       	brcs	.+16     	; 0x1976 <__gtsf2+0x56>
    1966:	89 89       	ldd	r24, Y+17	; 0x11
    1968:	82 30       	cpi	r24, 0x02	; 2
    196a:	28 f0       	brcs	.+10     	; 0x1976 <__gtsf2+0x56>
    196c:	c7 01       	movw	r24, r14
    196e:	b8 01       	movw	r22, r16
    1970:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fpcmp_parts_f>
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <__gtsf2+0x58>
    1976:	8f ef       	ldi	r24, 0xFF	; 255
    1978:	68 96       	adiw	r28, 0x18	; 24
    197a:	e6 e0       	ldi	r30, 0x06	; 6
    197c:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__epilogue_restores__+0x18>

00001980 <__gesf2>:
    1980:	a8 e1       	ldi	r26, 0x18	; 24
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e6 ec       	ldi	r30, 0xC6	; 198
    1986:	fc e0       	ldi	r31, 0x0C	; 12
    1988:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__prologue_saves__+0x18>
    198c:	69 83       	std	Y+1, r22	; 0x01
    198e:	7a 83       	std	Y+2, r23	; 0x02
    1990:	8b 83       	std	Y+3, r24	; 0x03
    1992:	9c 83       	std	Y+4, r25	; 0x04
    1994:	2d 83       	std	Y+5, r18	; 0x05
    1996:	3e 83       	std	Y+6, r19	; 0x06
    1998:	4f 83       	std	Y+7, r20	; 0x07
    199a:	58 87       	std	Y+8, r21	; 0x08
    199c:	89 e0       	ldi	r24, 0x09	; 9
    199e:	e8 2e       	mov	r14, r24
    19a0:	f1 2c       	mov	r15, r1
    19a2:	ec 0e       	add	r14, r28
    19a4:	fd 1e       	adc	r15, r29
    19a6:	ce 01       	movw	r24, r28
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	b7 01       	movw	r22, r14
    19ac:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    19b0:	8e 01       	movw	r16, r28
    19b2:	0f 5e       	subi	r16, 0xEF	; 239
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	ce 01       	movw	r24, r28
    19b8:	05 96       	adiw	r24, 0x05	; 5
    19ba:	b8 01       	movw	r22, r16
    19bc:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    19c0:	89 85       	ldd	r24, Y+9	; 0x09
    19c2:	82 30       	cpi	r24, 0x02	; 2
    19c4:	40 f0       	brcs	.+16     	; 0x19d6 <__gesf2+0x56>
    19c6:	89 89       	ldd	r24, Y+17	; 0x11
    19c8:	82 30       	cpi	r24, 0x02	; 2
    19ca:	28 f0       	brcs	.+10     	; 0x19d6 <__gesf2+0x56>
    19cc:	c7 01       	movw	r24, r14
    19ce:	b8 01       	movw	r22, r16
    19d0:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fpcmp_parts_f>
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <__gesf2+0x58>
    19d6:	8f ef       	ldi	r24, 0xFF	; 255
    19d8:	68 96       	adiw	r28, 0x18	; 24
    19da:	e6 e0       	ldi	r30, 0x06	; 6
    19dc:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__epilogue_restores__+0x18>

000019e0 <__ltsf2>:
    19e0:	a8 e1       	ldi	r26, 0x18	; 24
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e6 ef       	ldi	r30, 0xF6	; 246
    19e6:	fc e0       	ldi	r31, 0x0C	; 12
    19e8:	0c 94 99 26 	jmp	0x4d32	; 0x4d32 <__prologue_saves__+0x18>
    19ec:	69 83       	std	Y+1, r22	; 0x01
    19ee:	7a 83       	std	Y+2, r23	; 0x02
    19f0:	8b 83       	std	Y+3, r24	; 0x03
    19f2:	9c 83       	std	Y+4, r25	; 0x04
    19f4:	2d 83       	std	Y+5, r18	; 0x05
    19f6:	3e 83       	std	Y+6, r19	; 0x06
    19f8:	4f 83       	std	Y+7, r20	; 0x07
    19fa:	58 87       	std	Y+8, r21	; 0x08
    19fc:	89 e0       	ldi	r24, 0x09	; 9
    19fe:	e8 2e       	mov	r14, r24
    1a00:	f1 2c       	mov	r15, r1
    1a02:	ec 0e       	add	r14, r28
    1a04:	fd 1e       	adc	r15, r29
    1a06:	ce 01       	movw	r24, r28
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	b7 01       	movw	r22, r14
    1a0c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    1a10:	8e 01       	movw	r16, r28
    1a12:	0f 5e       	subi	r16, 0xEF	; 239
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	ce 01       	movw	r24, r28
    1a18:	05 96       	adiw	r24, 0x05	; 5
    1a1a:	b8 01       	movw	r22, r16
    1a1c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    1a20:	89 85       	ldd	r24, Y+9	; 0x09
    1a22:	82 30       	cpi	r24, 0x02	; 2
    1a24:	40 f0       	brcs	.+16     	; 0x1a36 <__ltsf2+0x56>
    1a26:	89 89       	ldd	r24, Y+17	; 0x11
    1a28:	82 30       	cpi	r24, 0x02	; 2
    1a2a:	28 f0       	brcs	.+10     	; 0x1a36 <__ltsf2+0x56>
    1a2c:	c7 01       	movw	r24, r14
    1a2e:	b8 01       	movw	r22, r16
    1a30:	0e 94 66 10 	call	0x20cc	; 0x20cc <__fpcmp_parts_f>
    1a34:	01 c0       	rjmp	.+2      	; 0x1a38 <__ltsf2+0x58>
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	68 96       	adiw	r28, 0x18	; 24
    1a3a:	e6 e0       	ldi	r30, 0x06	; 6
    1a3c:	0c 94 b5 26 	jmp	0x4d6a	; 0x4d6a <__epilogue_restores__+0x18>

00001a40 <__floatsisf>:
    1a40:	a8 e0       	ldi	r26, 0x08	; 8
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e6 e2       	ldi	r30, 0x26	; 38
    1a46:	fd e0       	ldi	r31, 0x0D	; 13
    1a48:	0c 94 96 26 	jmp	0x4d2c	; 0x4d2c <__prologue_saves__+0x12>
    1a4c:	9b 01       	movw	r18, r22
    1a4e:	ac 01       	movw	r20, r24
    1a50:	83 e0       	ldi	r24, 0x03	; 3
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	da 01       	movw	r26, r20
    1a56:	c9 01       	movw	r24, r18
    1a58:	88 27       	eor	r24, r24
    1a5a:	b7 fd       	sbrc	r27, 7
    1a5c:	83 95       	inc	r24
    1a5e:	99 27       	eor	r25, r25
    1a60:	aa 27       	eor	r26, r26
    1a62:	bb 27       	eor	r27, r27
    1a64:	b8 2e       	mov	r11, r24
    1a66:	21 15       	cp	r18, r1
    1a68:	31 05       	cpc	r19, r1
    1a6a:	41 05       	cpc	r20, r1
    1a6c:	51 05       	cpc	r21, r1
    1a6e:	19 f4       	brne	.+6      	; 0x1a76 <__floatsisf+0x36>
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	89 83       	std	Y+1, r24	; 0x01
    1a74:	3a c0       	rjmp	.+116    	; 0x1aea <__floatsisf+0xaa>
    1a76:	88 23       	and	r24, r24
    1a78:	a9 f0       	breq	.+42     	; 0x1aa4 <__floatsisf+0x64>
    1a7a:	20 30       	cpi	r18, 0x00	; 0
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	38 07       	cpc	r19, r24
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	48 07       	cpc	r20, r24
    1a84:	80 e8       	ldi	r24, 0x80	; 128
    1a86:	58 07       	cpc	r21, r24
    1a88:	29 f4       	brne	.+10     	; 0x1a94 <__floatsisf+0x54>
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	70 e0       	ldi	r23, 0x00	; 0
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	9f ec       	ldi	r25, 0xCF	; 207
    1a92:	30 c0       	rjmp	.+96     	; 0x1af4 <__floatsisf+0xb4>
    1a94:	ee 24       	eor	r14, r14
    1a96:	ff 24       	eor	r15, r15
    1a98:	87 01       	movw	r16, r14
    1a9a:	e2 1a       	sub	r14, r18
    1a9c:	f3 0a       	sbc	r15, r19
    1a9e:	04 0b       	sbc	r16, r20
    1aa0:	15 0b       	sbc	r17, r21
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <__floatsisf+0x68>
    1aa4:	79 01       	movw	r14, r18
    1aa6:	8a 01       	movw	r16, r20
    1aa8:	8e e1       	ldi	r24, 0x1E	; 30
    1aaa:	c8 2e       	mov	r12, r24
    1aac:	d1 2c       	mov	r13, r1
    1aae:	dc 82       	std	Y+4, r13	; 0x04
    1ab0:	cb 82       	std	Y+3, r12	; 0x03
    1ab2:	ed 82       	std	Y+5, r14	; 0x05
    1ab4:	fe 82       	std	Y+6, r15	; 0x06
    1ab6:	0f 83       	std	Y+7, r16	; 0x07
    1ab8:	18 87       	std	Y+8, r17	; 0x08
    1aba:	c8 01       	movw	r24, r16
    1abc:	b7 01       	movw	r22, r14
    1abe:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__clzsi2>
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	18 16       	cp	r1, r24
    1ac6:	19 06       	cpc	r1, r25
    1ac8:	84 f4       	brge	.+32     	; 0x1aea <__floatsisf+0xaa>
    1aca:	08 2e       	mov	r0, r24
    1acc:	04 c0       	rjmp	.+8      	; 0x1ad6 <__floatsisf+0x96>
    1ace:	ee 0c       	add	r14, r14
    1ad0:	ff 1c       	adc	r15, r15
    1ad2:	00 1f       	adc	r16, r16
    1ad4:	11 1f       	adc	r17, r17
    1ad6:	0a 94       	dec	r0
    1ad8:	d2 f7       	brpl	.-12     	; 0x1ace <__floatsisf+0x8e>
    1ada:	ed 82       	std	Y+5, r14	; 0x05
    1adc:	fe 82       	std	Y+6, r15	; 0x06
    1ade:	0f 83       	std	Y+7, r16	; 0x07
    1ae0:	18 87       	std	Y+8, r17	; 0x08
    1ae2:	c8 1a       	sub	r12, r24
    1ae4:	d9 0a       	sbc	r13, r25
    1ae6:	dc 82       	std	Y+4, r13	; 0x04
    1ae8:	cb 82       	std	Y+3, r12	; 0x03
    1aea:	ba 82       	std	Y+2, r11	; 0x02
    1aec:	ce 01       	movw	r24, r28
    1aee:	01 96       	adiw	r24, 0x01	; 1
    1af0:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__pack_f>
    1af4:	28 96       	adiw	r28, 0x08	; 8
    1af6:	e9 e0       	ldi	r30, 0x09	; 9
    1af8:	0c 94 b2 26 	jmp	0x4d64	; 0x4d64 <__epilogue_restores__+0x12>

00001afc <__fixsfsi>:
    1afc:	ac e0       	ldi	r26, 0x0C	; 12
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e4 e8       	ldi	r30, 0x84	; 132
    1b02:	fd e0       	ldi	r31, 0x0D	; 13
    1b04:	0c 94 9d 26 	jmp	0x4d3a	; 0x4d3a <__prologue_saves__+0x20>
    1b08:	69 83       	std	Y+1, r22	; 0x01
    1b0a:	7a 83       	std	Y+2, r23	; 0x02
    1b0c:	8b 83       	std	Y+3, r24	; 0x03
    1b0e:	9c 83       	std	Y+4, r25	; 0x04
    1b10:	ce 01       	movw	r24, r28
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	be 01       	movw	r22, r28
    1b16:	6b 5f       	subi	r22, 0xFB	; 251
    1b18:	7f 4f       	sbci	r23, 0xFF	; 255
    1b1a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__unpack_f>
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	82 30       	cpi	r24, 0x02	; 2
    1b22:	61 f1       	breq	.+88     	; 0x1b7c <__fixsfsi+0x80>
    1b24:	82 30       	cpi	r24, 0x02	; 2
    1b26:	50 f1       	brcs	.+84     	; 0x1b7c <__fixsfsi+0x80>
    1b28:	84 30       	cpi	r24, 0x04	; 4
    1b2a:	21 f4       	brne	.+8      	; 0x1b34 <__fixsfsi+0x38>
    1b2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2e:	88 23       	and	r24, r24
    1b30:	51 f1       	breq	.+84     	; 0x1b86 <__fixsfsi+0x8a>
    1b32:	2e c0       	rjmp	.+92     	; 0x1b90 <__fixsfsi+0x94>
    1b34:	2f 81       	ldd	r18, Y+7	; 0x07
    1b36:	38 85       	ldd	r19, Y+8	; 0x08
    1b38:	37 fd       	sbrc	r19, 7
    1b3a:	20 c0       	rjmp	.+64     	; 0x1b7c <__fixsfsi+0x80>
    1b3c:	6e 81       	ldd	r22, Y+6	; 0x06
    1b3e:	2f 31       	cpi	r18, 0x1F	; 31
    1b40:	31 05       	cpc	r19, r1
    1b42:	1c f0       	brlt	.+6      	; 0x1b4a <__fixsfsi+0x4e>
    1b44:	66 23       	and	r22, r22
    1b46:	f9 f0       	breq	.+62     	; 0x1b86 <__fixsfsi+0x8a>
    1b48:	23 c0       	rjmp	.+70     	; 0x1b90 <__fixsfsi+0x94>
    1b4a:	8e e1       	ldi	r24, 0x1E	; 30
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	82 1b       	sub	r24, r18
    1b50:	93 0b       	sbc	r25, r19
    1b52:	29 85       	ldd	r18, Y+9	; 0x09
    1b54:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b56:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b58:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b5a:	04 c0       	rjmp	.+8      	; 0x1b64 <__fixsfsi+0x68>
    1b5c:	56 95       	lsr	r21
    1b5e:	47 95       	ror	r20
    1b60:	37 95       	ror	r19
    1b62:	27 95       	ror	r18
    1b64:	8a 95       	dec	r24
    1b66:	d2 f7       	brpl	.-12     	; 0x1b5c <__fixsfsi+0x60>
    1b68:	66 23       	and	r22, r22
    1b6a:	b1 f0       	breq	.+44     	; 0x1b98 <__fixsfsi+0x9c>
    1b6c:	50 95       	com	r21
    1b6e:	40 95       	com	r20
    1b70:	30 95       	com	r19
    1b72:	21 95       	neg	r18
    1b74:	3f 4f       	sbci	r19, 0xFF	; 255
    1b76:	4f 4f       	sbci	r20, 0xFF	; 255
    1b78:	5f 4f       	sbci	r21, 0xFF	; 255
    1b7a:	0e c0       	rjmp	.+28     	; 0x1b98 <__fixsfsi+0x9c>
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	09 c0       	rjmp	.+18     	; 0x1b98 <__fixsfsi+0x9c>
    1b86:	2f ef       	ldi	r18, 0xFF	; 255
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	4f ef       	ldi	r20, 0xFF	; 255
    1b8c:	5f e7       	ldi	r21, 0x7F	; 127
    1b8e:	04 c0       	rjmp	.+8      	; 0x1b98 <__fixsfsi+0x9c>
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	50 e8       	ldi	r21, 0x80	; 128
    1b98:	b9 01       	movw	r22, r18
    1b9a:	ca 01       	movw	r24, r20
    1b9c:	2c 96       	adiw	r28, 0x0c	; 12
    1b9e:	e2 e0       	ldi	r30, 0x02	; 2
    1ba0:	0c 94 b9 26 	jmp	0x4d72	; 0x4d72 <__epilogue_restores__+0x20>

00001ba4 <__floatunsisf>:
    1ba4:	a8 e0       	ldi	r26, 0x08	; 8
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e8 ed       	ldi	r30, 0xD8	; 216
    1baa:	fd e0       	ldi	r31, 0x0D	; 13
    1bac:	0c 94 95 26 	jmp	0x4d2a	; 0x4d2a <__prologue_saves__+0x10>
    1bb0:	7b 01       	movw	r14, r22
    1bb2:	8c 01       	movw	r16, r24
    1bb4:	61 15       	cp	r22, r1
    1bb6:	71 05       	cpc	r23, r1
    1bb8:	81 05       	cpc	r24, r1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	19 f4       	brne	.+6      	; 0x1bc4 <__floatunsisf+0x20>
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	60 c0       	rjmp	.+192    	; 0x1c84 <__floatunsisf+0xe0>
    1bc4:	83 e0       	ldi	r24, 0x03	; 3
    1bc6:	89 83       	std	Y+1, r24	; 0x01
    1bc8:	8e e1       	ldi	r24, 0x1E	; 30
    1bca:	c8 2e       	mov	r12, r24
    1bcc:	d1 2c       	mov	r13, r1
    1bce:	dc 82       	std	Y+4, r13	; 0x04
    1bd0:	cb 82       	std	Y+3, r12	; 0x03
    1bd2:	ed 82       	std	Y+5, r14	; 0x05
    1bd4:	fe 82       	std	Y+6, r15	; 0x06
    1bd6:	0f 83       	std	Y+7, r16	; 0x07
    1bd8:	18 87       	std	Y+8, r17	; 0x08
    1bda:	c8 01       	movw	r24, r16
    1bdc:	b7 01       	movw	r22, r14
    1bde:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__clzsi2>
    1be2:	fc 01       	movw	r30, r24
    1be4:	31 97       	sbiw	r30, 0x01	; 1
    1be6:	f7 ff       	sbrs	r31, 7
    1be8:	3b c0       	rjmp	.+118    	; 0x1c60 <__floatunsisf+0xbc>
    1bea:	22 27       	eor	r18, r18
    1bec:	33 27       	eor	r19, r19
    1bee:	2e 1b       	sub	r18, r30
    1bf0:	3f 0b       	sbc	r19, r31
    1bf2:	57 01       	movw	r10, r14
    1bf4:	68 01       	movw	r12, r16
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	04 c0       	rjmp	.+8      	; 0x1c02 <__floatunsisf+0x5e>
    1bfa:	d6 94       	lsr	r13
    1bfc:	c7 94       	ror	r12
    1bfe:	b7 94       	ror	r11
    1c00:	a7 94       	ror	r10
    1c02:	0a 94       	dec	r0
    1c04:	d2 f7       	brpl	.-12     	; 0x1bfa <__floatunsisf+0x56>
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	50 e0       	ldi	r21, 0x00	; 0
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a0 e0       	ldi	r26, 0x00	; 0
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	04 c0       	rjmp	.+8      	; 0x1c20 <__floatunsisf+0x7c>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	aa 1f       	adc	r26, r26
    1c1e:	bb 1f       	adc	r27, r27
    1c20:	2a 95       	dec	r18
    1c22:	d2 f7       	brpl	.-12     	; 0x1c18 <__floatunsisf+0x74>
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	a1 09       	sbc	r26, r1
    1c28:	b1 09       	sbc	r27, r1
    1c2a:	8e 21       	and	r24, r14
    1c2c:	9f 21       	and	r25, r15
    1c2e:	a0 23       	and	r26, r16
    1c30:	b1 23       	and	r27, r17
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	a1 05       	cpc	r26, r1
    1c36:	b1 05       	cpc	r27, r1
    1c38:	21 f0       	breq	.+8      	; 0x1c42 <__floatunsisf+0x9e>
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	4a 29       	or	r20, r10
    1c44:	5b 29       	or	r21, r11
    1c46:	6c 29       	or	r22, r12
    1c48:	7d 29       	or	r23, r13
    1c4a:	4d 83       	std	Y+5, r20	; 0x05
    1c4c:	5e 83       	std	Y+6, r21	; 0x06
    1c4e:	6f 83       	std	Y+7, r22	; 0x07
    1c50:	78 87       	std	Y+8, r23	; 0x08
    1c52:	8e e1       	ldi	r24, 0x1E	; 30
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	8e 1b       	sub	r24, r30
    1c58:	9f 0b       	sbc	r25, r31
    1c5a:	9c 83       	std	Y+4, r25	; 0x04
    1c5c:	8b 83       	std	Y+3, r24	; 0x03
    1c5e:	12 c0       	rjmp	.+36     	; 0x1c84 <__floatunsisf+0xe0>
    1c60:	30 97       	sbiw	r30, 0x00	; 0
    1c62:	81 f0       	breq	.+32     	; 0x1c84 <__floatunsisf+0xe0>
    1c64:	0e 2e       	mov	r0, r30
    1c66:	04 c0       	rjmp	.+8      	; 0x1c70 <__floatunsisf+0xcc>
    1c68:	ee 0c       	add	r14, r14
    1c6a:	ff 1c       	adc	r15, r15
    1c6c:	00 1f       	adc	r16, r16
    1c6e:	11 1f       	adc	r17, r17
    1c70:	0a 94       	dec	r0
    1c72:	d2 f7       	brpl	.-12     	; 0x1c68 <__floatunsisf+0xc4>
    1c74:	ed 82       	std	Y+5, r14	; 0x05
    1c76:	fe 82       	std	Y+6, r15	; 0x06
    1c78:	0f 83       	std	Y+7, r16	; 0x07
    1c7a:	18 87       	std	Y+8, r17	; 0x08
    1c7c:	ce 1a       	sub	r12, r30
    1c7e:	df 0a       	sbc	r13, r31
    1c80:	dc 82       	std	Y+4, r13	; 0x04
    1c82:	cb 82       	std	Y+3, r12	; 0x03
    1c84:	1a 82       	std	Y+2, r1	; 0x02
    1c86:	ce 01       	movw	r24, r28
    1c88:	01 96       	adiw	r24, 0x01	; 1
    1c8a:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__pack_f>
    1c8e:	28 96       	adiw	r28, 0x08	; 8
    1c90:	ea e0       	ldi	r30, 0x0A	; 10
    1c92:	0c 94 b1 26 	jmp	0x4d62	; 0x4d62 <__epilogue_restores__+0x10>

00001c96 <__lshrdi3>:
    1c96:	ef 92       	push	r14
    1c98:	ff 92       	push	r15
    1c9a:	0f 93       	push	r16
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	60 97       	sbiw	r28, 0x10	; 16
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	a8 2f       	mov	r26, r24
    1cb2:	00 23       	and	r16, r16
    1cb4:	09 f4       	brne	.+2      	; 0x1cb8 <__lshrdi3+0x22>
    1cb6:	61 c0       	rjmp	.+194    	; 0x1d7a <__lshrdi3+0xe4>
    1cb8:	7e 01       	movw	r14, r28
    1cba:	08 94       	sec
    1cbc:	e1 1c       	adc	r14, r1
    1cbe:	f1 1c       	adc	r15, r1
    1cc0:	88 e0       	ldi	r24, 0x08	; 8
    1cc2:	f7 01       	movw	r30, r14
    1cc4:	11 92       	st	Z+, r1
    1cc6:	8a 95       	dec	r24
    1cc8:	e9 f7       	brne	.-6      	; 0x1cc4 <__lshrdi3+0x2e>
    1cca:	29 83       	std	Y+1, r18	; 0x01
    1ccc:	3a 83       	std	Y+2, r19	; 0x02
    1cce:	4b 83       	std	Y+3, r20	; 0x03
    1cd0:	5c 83       	std	Y+4, r21	; 0x04
    1cd2:	6d 83       	std	Y+5, r22	; 0x05
    1cd4:	7e 83       	std	Y+6, r23	; 0x06
    1cd6:	af 83       	std	Y+7, r26	; 0x07
    1cd8:	98 87       	std	Y+8, r25	; 0x08
    1cda:	80 e2       	ldi	r24, 0x20	; 32
    1cdc:	80 1b       	sub	r24, r16
    1cde:	e8 2f       	mov	r30, r24
    1ce0:	ff 27       	eor	r31, r31
    1ce2:	e7 fd       	sbrc	r30, 7
    1ce4:	f0 95       	com	r31
    1ce6:	4d 81       	ldd	r20, Y+5	; 0x05
    1ce8:	5e 81       	ldd	r21, Y+6	; 0x06
    1cea:	6f 81       	ldd	r22, Y+7	; 0x07
    1cec:	78 85       	ldd	r23, Y+8	; 0x08
    1cee:	18 16       	cp	r1, r24
    1cf0:	84 f0       	brlt	.+32     	; 0x1d12 <__lshrdi3+0x7c>
    1cf2:	1d 86       	std	Y+13, r1	; 0x0d
    1cf4:	1e 86       	std	Y+14, r1	; 0x0e
    1cf6:	1f 86       	std	Y+15, r1	; 0x0f
    1cf8:	18 8a       	std	Y+16, r1	; 0x10
    1cfa:	88 27       	eor	r24, r24
    1cfc:	99 27       	eor	r25, r25
    1cfe:	8e 1b       	sub	r24, r30
    1d00:	9f 0b       	sbc	r25, r31
    1d02:	04 c0       	rjmp	.+8      	; 0x1d0c <__lshrdi3+0x76>
    1d04:	76 95       	lsr	r23
    1d06:	67 95       	ror	r22
    1d08:	57 95       	ror	r21
    1d0a:	47 95       	ror	r20
    1d0c:	8a 95       	dec	r24
    1d0e:	d2 f7       	brpl	.-12     	; 0x1d04 <__lshrdi3+0x6e>
    1d10:	28 c0       	rjmp	.+80     	; 0x1d62 <__lshrdi3+0xcc>
    1d12:	20 2f       	mov	r18, r16
    1d14:	33 27       	eor	r19, r19
    1d16:	27 fd       	sbrc	r18, 7
    1d18:	30 95       	com	r19
    1d1a:	db 01       	movw	r26, r22
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	02 2e       	mov	r0, r18
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <__lshrdi3+0x94>
    1d22:	b6 95       	lsr	r27
    1d24:	a7 95       	ror	r26
    1d26:	97 95       	ror	r25
    1d28:	87 95       	ror	r24
    1d2a:	0a 94       	dec	r0
    1d2c:	d2 f7       	brpl	.-12     	; 0x1d22 <__lshrdi3+0x8c>
    1d2e:	8d 87       	std	Y+13, r24	; 0x0d
    1d30:	9e 87       	std	Y+14, r25	; 0x0e
    1d32:	af 87       	std	Y+15, r26	; 0x0f
    1d34:	b8 8b       	std	Y+16, r27	; 0x10
    1d36:	04 c0       	rjmp	.+8      	; 0x1d40 <__lshrdi3+0xaa>
    1d38:	44 0f       	add	r20, r20
    1d3a:	55 1f       	adc	r21, r21
    1d3c:	66 1f       	adc	r22, r22
    1d3e:	77 1f       	adc	r23, r23
    1d40:	ea 95       	dec	r30
    1d42:	d2 f7       	brpl	.-12     	; 0x1d38 <__lshrdi3+0xa2>
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	ab 81       	ldd	r26, Y+3	; 0x03
    1d4a:	bc 81       	ldd	r27, Y+4	; 0x04
    1d4c:	04 c0       	rjmp	.+8      	; 0x1d56 <__lshrdi3+0xc0>
    1d4e:	b6 95       	lsr	r27
    1d50:	a7 95       	ror	r26
    1d52:	97 95       	ror	r25
    1d54:	87 95       	ror	r24
    1d56:	2a 95       	dec	r18
    1d58:	d2 f7       	brpl	.-12     	; 0x1d4e <__lshrdi3+0xb8>
    1d5a:	48 2b       	or	r20, r24
    1d5c:	59 2b       	or	r21, r25
    1d5e:	6a 2b       	or	r22, r26
    1d60:	7b 2b       	or	r23, r27
    1d62:	49 87       	std	Y+9, r20	; 0x09
    1d64:	5a 87       	std	Y+10, r21	; 0x0a
    1d66:	6b 87       	std	Y+11, r22	; 0x0b
    1d68:	7c 87       	std	Y+12, r23	; 0x0c
    1d6a:	29 85       	ldd	r18, Y+9	; 0x09
    1d6c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d6e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d70:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d72:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d74:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d76:	af 85       	ldd	r26, Y+15	; 0x0f
    1d78:	98 89       	ldd	r25, Y+16	; 0x10
    1d7a:	8a 2f       	mov	r24, r26
    1d7c:	60 96       	adiw	r28, 0x10	; 16
    1d7e:	0f b6       	in	r0, 0x3f	; 63
    1d80:	f8 94       	cli
    1d82:	de bf       	out	0x3e, r29	; 62
    1d84:	0f be       	out	0x3f, r0	; 63
    1d86:	cd bf       	out	0x3d, r28	; 61
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	0f 91       	pop	r16
    1d8e:	ff 90       	pop	r15
    1d90:	ef 90       	pop	r14
    1d92:	08 95       	ret

00001d94 <__clzsi2>:
    1d94:	ef 92       	push	r14
    1d96:	ff 92       	push	r15
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	7b 01       	movw	r14, r22
    1d9e:	8c 01       	movw	r16, r24
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	e8 16       	cp	r14, r24
    1da4:	80 e0       	ldi	r24, 0x00	; 0
    1da6:	f8 06       	cpc	r15, r24
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	08 07       	cpc	r16, r24
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	18 07       	cpc	r17, r24
    1db0:	88 f4       	brcc	.+34     	; 0x1dd4 <__clzsi2+0x40>
    1db2:	8f ef       	ldi	r24, 0xFF	; 255
    1db4:	e8 16       	cp	r14, r24
    1db6:	f1 04       	cpc	r15, r1
    1db8:	01 05       	cpc	r16, r1
    1dba:	11 05       	cpc	r17, r1
    1dbc:	31 f0       	breq	.+12     	; 0x1dca <__clzsi2+0x36>
    1dbe:	28 f0       	brcs	.+10     	; 0x1dca <__clzsi2+0x36>
    1dc0:	88 e0       	ldi	r24, 0x08	; 8
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	a0 e0       	ldi	r26, 0x00	; 0
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	17 c0       	rjmp	.+46     	; 0x1df8 <__clzsi2+0x64>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	a0 e0       	ldi	r26, 0x00	; 0
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	12 c0       	rjmp	.+36     	; 0x1df8 <__clzsi2+0x64>
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
    1dd6:	e8 16       	cp	r14, r24
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	f8 06       	cpc	r15, r24
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	08 07       	cpc	r16, r24
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	18 07       	cpc	r17, r24
    1de4:	28 f0       	brcs	.+10     	; 0x1df0 <__clzsi2+0x5c>
    1de6:	88 e1       	ldi	r24, 0x18	; 24
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	a0 e0       	ldi	r26, 0x00	; 0
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	04 c0       	rjmp	.+8      	; 0x1df8 <__clzsi2+0x64>
    1df0:	80 e1       	ldi	r24, 0x10	; 16
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a0 e0       	ldi	r26, 0x00	; 0
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	20 e2       	ldi	r18, 0x20	; 32
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	50 e0       	ldi	r21, 0x00	; 0
    1e00:	28 1b       	sub	r18, r24
    1e02:	39 0b       	sbc	r19, r25
    1e04:	4a 0b       	sbc	r20, r26
    1e06:	5b 0b       	sbc	r21, r27
    1e08:	04 c0       	rjmp	.+8      	; 0x1e12 <__clzsi2+0x7e>
    1e0a:	16 95       	lsr	r17
    1e0c:	07 95       	ror	r16
    1e0e:	f7 94       	ror	r15
    1e10:	e7 94       	ror	r14
    1e12:	8a 95       	dec	r24
    1e14:	d2 f7       	brpl	.-12     	; 0x1e0a <__clzsi2+0x76>
    1e16:	f7 01       	movw	r30, r14
    1e18:	e8 59       	subi	r30, 0x98	; 152
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	28 1b       	sub	r18, r24
    1e20:	31 09       	sbc	r19, r1
    1e22:	41 09       	sbc	r20, r1
    1e24:	51 09       	sbc	r21, r1
    1e26:	c9 01       	movw	r24, r18
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
    1e30:	08 95       	ret

00001e32 <__pack_f>:
    1e32:	df 92       	push	r13
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	e4 80       	ldd	r14, Z+4	; 0x04
    1e40:	f5 80       	ldd	r15, Z+5	; 0x05
    1e42:	06 81       	ldd	r16, Z+6	; 0x06
    1e44:	17 81       	ldd	r17, Z+7	; 0x07
    1e46:	d1 80       	ldd	r13, Z+1	; 0x01
    1e48:	80 81       	ld	r24, Z
    1e4a:	82 30       	cpi	r24, 0x02	; 2
    1e4c:	48 f4       	brcc	.+18     	; 0x1e60 <__pack_f+0x2e>
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	a0 e1       	ldi	r26, 0x10	; 16
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e8 2a       	or	r14, r24
    1e58:	f9 2a       	or	r15, r25
    1e5a:	0a 2b       	or	r16, r26
    1e5c:	1b 2b       	or	r17, r27
    1e5e:	a5 c0       	rjmp	.+330    	; 0x1faa <__pack_f+0x178>
    1e60:	84 30       	cpi	r24, 0x04	; 4
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <__pack_f+0x34>
    1e64:	9f c0       	rjmp	.+318    	; 0x1fa4 <__pack_f+0x172>
    1e66:	82 30       	cpi	r24, 0x02	; 2
    1e68:	21 f4       	brne	.+8      	; 0x1e72 <__pack_f+0x40>
    1e6a:	ee 24       	eor	r14, r14
    1e6c:	ff 24       	eor	r15, r15
    1e6e:	87 01       	movw	r16, r14
    1e70:	05 c0       	rjmp	.+10     	; 0x1e7c <__pack_f+0x4a>
    1e72:	e1 14       	cp	r14, r1
    1e74:	f1 04       	cpc	r15, r1
    1e76:	01 05       	cpc	r16, r1
    1e78:	11 05       	cpc	r17, r1
    1e7a:	19 f4       	brne	.+6      	; 0x1e82 <__pack_f+0x50>
    1e7c:	e0 e0       	ldi	r30, 0x00	; 0
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	96 c0       	rjmp	.+300    	; 0x1fae <__pack_f+0x17c>
    1e82:	62 81       	ldd	r22, Z+2	; 0x02
    1e84:	73 81       	ldd	r23, Z+3	; 0x03
    1e86:	9f ef       	ldi	r25, 0xFF	; 255
    1e88:	62 38       	cpi	r22, 0x82	; 130
    1e8a:	79 07       	cpc	r23, r25
    1e8c:	0c f0       	brlt	.+2      	; 0x1e90 <__pack_f+0x5e>
    1e8e:	5b c0       	rjmp	.+182    	; 0x1f46 <__pack_f+0x114>
    1e90:	22 e8       	ldi	r18, 0x82	; 130
    1e92:	3f ef       	ldi	r19, 0xFF	; 255
    1e94:	26 1b       	sub	r18, r22
    1e96:	37 0b       	sbc	r19, r23
    1e98:	2a 31       	cpi	r18, 0x1A	; 26
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	2c f0       	brlt	.+10     	; 0x1ea8 <__pack_f+0x76>
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	50 e0       	ldi	r21, 0x00	; 0
    1ea6:	2a c0       	rjmp	.+84     	; 0x1efc <__pack_f+0xca>
    1ea8:	b8 01       	movw	r22, r16
    1eaa:	a7 01       	movw	r20, r14
    1eac:	02 2e       	mov	r0, r18
    1eae:	04 c0       	rjmp	.+8      	; 0x1eb8 <__pack_f+0x86>
    1eb0:	76 95       	lsr	r23
    1eb2:	67 95       	ror	r22
    1eb4:	57 95       	ror	r21
    1eb6:	47 95       	ror	r20
    1eb8:	0a 94       	dec	r0
    1eba:	d2 f7       	brpl	.-12     	; 0x1eb0 <__pack_f+0x7e>
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a0 e0       	ldi	r26, 0x00	; 0
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	04 c0       	rjmp	.+8      	; 0x1ece <__pack_f+0x9c>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	aa 1f       	adc	r26, r26
    1ecc:	bb 1f       	adc	r27, r27
    1ece:	2a 95       	dec	r18
    1ed0:	d2 f7       	brpl	.-12     	; 0x1ec6 <__pack_f+0x94>
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	a1 09       	sbc	r26, r1
    1ed6:	b1 09       	sbc	r27, r1
    1ed8:	8e 21       	and	r24, r14
    1eda:	9f 21       	and	r25, r15
    1edc:	a0 23       	and	r26, r16
    1ede:	b1 23       	and	r27, r17
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	a1 05       	cpc	r26, r1
    1ee4:	b1 05       	cpc	r27, r1
    1ee6:	21 f0       	breq	.+8      	; 0x1ef0 <__pack_f+0xbe>
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 e0       	ldi	r26, 0x00	; 0
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	9a 01       	movw	r18, r20
    1ef2:	ab 01       	movw	r20, r22
    1ef4:	28 2b       	or	r18, r24
    1ef6:	39 2b       	or	r19, r25
    1ef8:	4a 2b       	or	r20, r26
    1efa:	5b 2b       	or	r21, r27
    1efc:	da 01       	movw	r26, r20
    1efe:	c9 01       	movw	r24, r18
    1f00:	8f 77       	andi	r24, 0x7F	; 127
    1f02:	90 70       	andi	r25, 0x00	; 0
    1f04:	a0 70       	andi	r26, 0x00	; 0
    1f06:	b0 70       	andi	r27, 0x00	; 0
    1f08:	80 34       	cpi	r24, 0x40	; 64
    1f0a:	91 05       	cpc	r25, r1
    1f0c:	a1 05       	cpc	r26, r1
    1f0e:	b1 05       	cpc	r27, r1
    1f10:	39 f4       	brne	.+14     	; 0x1f20 <__pack_f+0xee>
    1f12:	27 ff       	sbrs	r18, 7
    1f14:	09 c0       	rjmp	.+18     	; 0x1f28 <__pack_f+0xf6>
    1f16:	20 5c       	subi	r18, 0xC0	; 192
    1f18:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1a:	4f 4f       	sbci	r20, 0xFF	; 255
    1f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f1e:	04 c0       	rjmp	.+8      	; 0x1f28 <__pack_f+0xf6>
    1f20:	21 5c       	subi	r18, 0xC1	; 193
    1f22:	3f 4f       	sbci	r19, 0xFF	; 255
    1f24:	4f 4f       	sbci	r20, 0xFF	; 255
    1f26:	5f 4f       	sbci	r21, 0xFF	; 255
    1f28:	e0 e0       	ldi	r30, 0x00	; 0
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	20 30       	cpi	r18, 0x00	; 0
    1f2e:	a0 e0       	ldi	r26, 0x00	; 0
    1f30:	3a 07       	cpc	r19, r26
    1f32:	a0 e0       	ldi	r26, 0x00	; 0
    1f34:	4a 07       	cpc	r20, r26
    1f36:	a0 e4       	ldi	r26, 0x40	; 64
    1f38:	5a 07       	cpc	r21, r26
    1f3a:	10 f0       	brcs	.+4      	; 0x1f40 <__pack_f+0x10e>
    1f3c:	e1 e0       	ldi	r30, 0x01	; 1
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	79 01       	movw	r14, r18
    1f42:	8a 01       	movw	r16, r20
    1f44:	27 c0       	rjmp	.+78     	; 0x1f94 <__pack_f+0x162>
    1f46:	60 38       	cpi	r22, 0x80	; 128
    1f48:	71 05       	cpc	r23, r1
    1f4a:	64 f5       	brge	.+88     	; 0x1fa4 <__pack_f+0x172>
    1f4c:	fb 01       	movw	r30, r22
    1f4e:	e1 58       	subi	r30, 0x81	; 129
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	d8 01       	movw	r26, r16
    1f54:	c7 01       	movw	r24, r14
    1f56:	8f 77       	andi	r24, 0x7F	; 127
    1f58:	90 70       	andi	r25, 0x00	; 0
    1f5a:	a0 70       	andi	r26, 0x00	; 0
    1f5c:	b0 70       	andi	r27, 0x00	; 0
    1f5e:	80 34       	cpi	r24, 0x40	; 64
    1f60:	91 05       	cpc	r25, r1
    1f62:	a1 05       	cpc	r26, r1
    1f64:	b1 05       	cpc	r27, r1
    1f66:	39 f4       	brne	.+14     	; 0x1f76 <__pack_f+0x144>
    1f68:	e7 fe       	sbrs	r14, 7
    1f6a:	0d c0       	rjmp	.+26     	; 0x1f86 <__pack_f+0x154>
    1f6c:	80 e4       	ldi	r24, 0x40	; 64
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a0 e0       	ldi	r26, 0x00	; 0
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	04 c0       	rjmp	.+8      	; 0x1f7e <__pack_f+0x14c>
    1f76:	8f e3       	ldi	r24, 0x3F	; 63
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	a0 e0       	ldi	r26, 0x00	; 0
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e8 0e       	add	r14, r24
    1f80:	f9 1e       	adc	r15, r25
    1f82:	0a 1f       	adc	r16, r26
    1f84:	1b 1f       	adc	r17, r27
    1f86:	17 ff       	sbrs	r17, 7
    1f88:	05 c0       	rjmp	.+10     	; 0x1f94 <__pack_f+0x162>
    1f8a:	16 95       	lsr	r17
    1f8c:	07 95       	ror	r16
    1f8e:	f7 94       	ror	r15
    1f90:	e7 94       	ror	r14
    1f92:	31 96       	adiw	r30, 0x01	; 1
    1f94:	87 e0       	ldi	r24, 0x07	; 7
    1f96:	16 95       	lsr	r17
    1f98:	07 95       	ror	r16
    1f9a:	f7 94       	ror	r15
    1f9c:	e7 94       	ror	r14
    1f9e:	8a 95       	dec	r24
    1fa0:	d1 f7       	brne	.-12     	; 0x1f96 <__pack_f+0x164>
    1fa2:	05 c0       	rjmp	.+10     	; 0x1fae <__pack_f+0x17c>
    1fa4:	ee 24       	eor	r14, r14
    1fa6:	ff 24       	eor	r15, r15
    1fa8:	87 01       	movw	r16, r14
    1faa:	ef ef       	ldi	r30, 0xFF	; 255
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	6e 2f       	mov	r22, r30
    1fb0:	67 95       	ror	r22
    1fb2:	66 27       	eor	r22, r22
    1fb4:	67 95       	ror	r22
    1fb6:	90 2f       	mov	r25, r16
    1fb8:	9f 77       	andi	r25, 0x7F	; 127
    1fba:	d7 94       	ror	r13
    1fbc:	dd 24       	eor	r13, r13
    1fbe:	d7 94       	ror	r13
    1fc0:	8e 2f       	mov	r24, r30
    1fc2:	86 95       	lsr	r24
    1fc4:	49 2f       	mov	r20, r25
    1fc6:	46 2b       	or	r20, r22
    1fc8:	58 2f       	mov	r21, r24
    1fca:	5d 29       	or	r21, r13
    1fcc:	b7 01       	movw	r22, r14
    1fce:	ca 01       	movw	r24, r20
    1fd0:	1f 91       	pop	r17
    1fd2:	0f 91       	pop	r16
    1fd4:	ff 90       	pop	r15
    1fd6:	ef 90       	pop	r14
    1fd8:	df 90       	pop	r13
    1fda:	08 95       	ret

00001fdc <__unpack_f>:
    1fdc:	fc 01       	movw	r30, r24
    1fde:	db 01       	movw	r26, r22
    1fe0:	40 81       	ld	r20, Z
    1fe2:	51 81       	ldd	r21, Z+1	; 0x01
    1fe4:	22 81       	ldd	r18, Z+2	; 0x02
    1fe6:	62 2f       	mov	r22, r18
    1fe8:	6f 77       	andi	r22, 0x7F	; 127
    1fea:	70 e0       	ldi	r23, 0x00	; 0
    1fec:	22 1f       	adc	r18, r18
    1fee:	22 27       	eor	r18, r18
    1ff0:	22 1f       	adc	r18, r18
    1ff2:	93 81       	ldd	r25, Z+3	; 0x03
    1ff4:	89 2f       	mov	r24, r25
    1ff6:	88 0f       	add	r24, r24
    1ff8:	82 2b       	or	r24, r18
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	99 1f       	adc	r25, r25
    2000:	99 27       	eor	r25, r25
    2002:	99 1f       	adc	r25, r25
    2004:	11 96       	adiw	r26, 0x01	; 1
    2006:	9c 93       	st	X, r25
    2008:	11 97       	sbiw	r26, 0x01	; 1
    200a:	21 15       	cp	r18, r1
    200c:	31 05       	cpc	r19, r1
    200e:	a9 f5       	brne	.+106    	; 0x207a <__unpack_f+0x9e>
    2010:	41 15       	cp	r20, r1
    2012:	51 05       	cpc	r21, r1
    2014:	61 05       	cpc	r22, r1
    2016:	71 05       	cpc	r23, r1
    2018:	11 f4       	brne	.+4      	; 0x201e <__unpack_f+0x42>
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	37 c0       	rjmp	.+110    	; 0x208c <__unpack_f+0xb0>
    201e:	82 e8       	ldi	r24, 0x82	; 130
    2020:	9f ef       	ldi	r25, 0xFF	; 255
    2022:	13 96       	adiw	r26, 0x03	; 3
    2024:	9c 93       	st	X, r25
    2026:	8e 93       	st	-X, r24
    2028:	12 97       	sbiw	r26, 0x02	; 2
    202a:	9a 01       	movw	r18, r20
    202c:	ab 01       	movw	r20, r22
    202e:	67 e0       	ldi	r22, 0x07	; 7
    2030:	22 0f       	add	r18, r18
    2032:	33 1f       	adc	r19, r19
    2034:	44 1f       	adc	r20, r20
    2036:	55 1f       	adc	r21, r21
    2038:	6a 95       	dec	r22
    203a:	d1 f7       	brne	.-12     	; 0x2030 <__unpack_f+0x54>
    203c:	83 e0       	ldi	r24, 0x03	; 3
    203e:	8c 93       	st	X, r24
    2040:	0d c0       	rjmp	.+26     	; 0x205c <__unpack_f+0x80>
    2042:	22 0f       	add	r18, r18
    2044:	33 1f       	adc	r19, r19
    2046:	44 1f       	adc	r20, r20
    2048:	55 1f       	adc	r21, r21
    204a:	12 96       	adiw	r26, 0x02	; 2
    204c:	8d 91       	ld	r24, X+
    204e:	9c 91       	ld	r25, X
    2050:	13 97       	sbiw	r26, 0x03	; 3
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	13 96       	adiw	r26, 0x03	; 3
    2056:	9c 93       	st	X, r25
    2058:	8e 93       	st	-X, r24
    205a:	12 97       	sbiw	r26, 0x02	; 2
    205c:	20 30       	cpi	r18, 0x00	; 0
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	38 07       	cpc	r19, r24
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	48 07       	cpc	r20, r24
    2066:	80 e4       	ldi	r24, 0x40	; 64
    2068:	58 07       	cpc	r21, r24
    206a:	58 f3       	brcs	.-42     	; 0x2042 <__unpack_f+0x66>
    206c:	14 96       	adiw	r26, 0x04	; 4
    206e:	2d 93       	st	X+, r18
    2070:	3d 93       	st	X+, r19
    2072:	4d 93       	st	X+, r20
    2074:	5c 93       	st	X, r21
    2076:	17 97       	sbiw	r26, 0x07	; 7
    2078:	08 95       	ret
    207a:	2f 3f       	cpi	r18, 0xFF	; 255
    207c:	31 05       	cpc	r19, r1
    207e:	79 f4       	brne	.+30     	; 0x209e <__unpack_f+0xc2>
    2080:	41 15       	cp	r20, r1
    2082:	51 05       	cpc	r21, r1
    2084:	61 05       	cpc	r22, r1
    2086:	71 05       	cpc	r23, r1
    2088:	19 f4       	brne	.+6      	; 0x2090 <__unpack_f+0xb4>
    208a:	84 e0       	ldi	r24, 0x04	; 4
    208c:	8c 93       	st	X, r24
    208e:	08 95       	ret
    2090:	64 ff       	sbrs	r22, 4
    2092:	03 c0       	rjmp	.+6      	; 0x209a <__unpack_f+0xbe>
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	8c 93       	st	X, r24
    2098:	12 c0       	rjmp	.+36     	; 0x20be <__unpack_f+0xe2>
    209a:	1c 92       	st	X, r1
    209c:	10 c0       	rjmp	.+32     	; 0x20be <__unpack_f+0xe2>
    209e:	2f 57       	subi	r18, 0x7F	; 127
    20a0:	30 40       	sbci	r19, 0x00	; 0
    20a2:	13 96       	adiw	r26, 0x03	; 3
    20a4:	3c 93       	st	X, r19
    20a6:	2e 93       	st	-X, r18
    20a8:	12 97       	sbiw	r26, 0x02	; 2
    20aa:	83 e0       	ldi	r24, 0x03	; 3
    20ac:	8c 93       	st	X, r24
    20ae:	87 e0       	ldi	r24, 0x07	; 7
    20b0:	44 0f       	add	r20, r20
    20b2:	55 1f       	adc	r21, r21
    20b4:	66 1f       	adc	r22, r22
    20b6:	77 1f       	adc	r23, r23
    20b8:	8a 95       	dec	r24
    20ba:	d1 f7       	brne	.-12     	; 0x20b0 <__unpack_f+0xd4>
    20bc:	70 64       	ori	r23, 0x40	; 64
    20be:	14 96       	adiw	r26, 0x04	; 4
    20c0:	4d 93       	st	X+, r20
    20c2:	5d 93       	st	X+, r21
    20c4:	6d 93       	st	X+, r22
    20c6:	7c 93       	st	X, r23
    20c8:	17 97       	sbiw	r26, 0x07	; 7
    20ca:	08 95       	ret

000020cc <__fpcmp_parts_f>:
    20cc:	1f 93       	push	r17
    20ce:	dc 01       	movw	r26, r24
    20d0:	fb 01       	movw	r30, r22
    20d2:	9c 91       	ld	r25, X
    20d4:	92 30       	cpi	r25, 0x02	; 2
    20d6:	08 f4       	brcc	.+2      	; 0x20da <__fpcmp_parts_f+0xe>
    20d8:	47 c0       	rjmp	.+142    	; 0x2168 <__fpcmp_parts_f+0x9c>
    20da:	80 81       	ld	r24, Z
    20dc:	82 30       	cpi	r24, 0x02	; 2
    20de:	08 f4       	brcc	.+2      	; 0x20e2 <__fpcmp_parts_f+0x16>
    20e0:	43 c0       	rjmp	.+134    	; 0x2168 <__fpcmp_parts_f+0x9c>
    20e2:	94 30       	cpi	r25, 0x04	; 4
    20e4:	51 f4       	brne	.+20     	; 0x20fa <__fpcmp_parts_f+0x2e>
    20e6:	11 96       	adiw	r26, 0x01	; 1
    20e8:	1c 91       	ld	r17, X
    20ea:	84 30       	cpi	r24, 0x04	; 4
    20ec:	99 f5       	brne	.+102    	; 0x2154 <__fpcmp_parts_f+0x88>
    20ee:	81 81       	ldd	r24, Z+1	; 0x01
    20f0:	68 2f       	mov	r22, r24
    20f2:	70 e0       	ldi	r23, 0x00	; 0
    20f4:	61 1b       	sub	r22, r17
    20f6:	71 09       	sbc	r23, r1
    20f8:	3f c0       	rjmp	.+126    	; 0x2178 <__fpcmp_parts_f+0xac>
    20fa:	84 30       	cpi	r24, 0x04	; 4
    20fc:	21 f0       	breq	.+8      	; 0x2106 <__fpcmp_parts_f+0x3a>
    20fe:	92 30       	cpi	r25, 0x02	; 2
    2100:	31 f4       	brne	.+12     	; 0x210e <__fpcmp_parts_f+0x42>
    2102:	82 30       	cpi	r24, 0x02	; 2
    2104:	b9 f1       	breq	.+110    	; 0x2174 <__fpcmp_parts_f+0xa8>
    2106:	81 81       	ldd	r24, Z+1	; 0x01
    2108:	88 23       	and	r24, r24
    210a:	89 f1       	breq	.+98     	; 0x216e <__fpcmp_parts_f+0xa2>
    210c:	2d c0       	rjmp	.+90     	; 0x2168 <__fpcmp_parts_f+0x9c>
    210e:	11 96       	adiw	r26, 0x01	; 1
    2110:	1c 91       	ld	r17, X
    2112:	11 97       	sbiw	r26, 0x01	; 1
    2114:	82 30       	cpi	r24, 0x02	; 2
    2116:	f1 f0       	breq	.+60     	; 0x2154 <__fpcmp_parts_f+0x88>
    2118:	81 81       	ldd	r24, Z+1	; 0x01
    211a:	18 17       	cp	r17, r24
    211c:	d9 f4       	brne	.+54     	; 0x2154 <__fpcmp_parts_f+0x88>
    211e:	12 96       	adiw	r26, 0x02	; 2
    2120:	2d 91       	ld	r18, X+
    2122:	3c 91       	ld	r19, X
    2124:	13 97       	sbiw	r26, 0x03	; 3
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	82 17       	cp	r24, r18
    212c:	93 07       	cpc	r25, r19
    212e:	94 f0       	brlt	.+36     	; 0x2154 <__fpcmp_parts_f+0x88>
    2130:	28 17       	cp	r18, r24
    2132:	39 07       	cpc	r19, r25
    2134:	bc f0       	brlt	.+46     	; 0x2164 <__fpcmp_parts_f+0x98>
    2136:	14 96       	adiw	r26, 0x04	; 4
    2138:	8d 91       	ld	r24, X+
    213a:	9d 91       	ld	r25, X+
    213c:	0d 90       	ld	r0, X+
    213e:	bc 91       	ld	r27, X
    2140:	a0 2d       	mov	r26, r0
    2142:	24 81       	ldd	r18, Z+4	; 0x04
    2144:	35 81       	ldd	r19, Z+5	; 0x05
    2146:	46 81       	ldd	r20, Z+6	; 0x06
    2148:	57 81       	ldd	r21, Z+7	; 0x07
    214a:	28 17       	cp	r18, r24
    214c:	39 07       	cpc	r19, r25
    214e:	4a 07       	cpc	r20, r26
    2150:	5b 07       	cpc	r21, r27
    2152:	18 f4       	brcc	.+6      	; 0x215a <__fpcmp_parts_f+0x8e>
    2154:	11 23       	and	r17, r17
    2156:	41 f0       	breq	.+16     	; 0x2168 <__fpcmp_parts_f+0x9c>
    2158:	0a c0       	rjmp	.+20     	; 0x216e <__fpcmp_parts_f+0xa2>
    215a:	82 17       	cp	r24, r18
    215c:	93 07       	cpc	r25, r19
    215e:	a4 07       	cpc	r26, r20
    2160:	b5 07       	cpc	r27, r21
    2162:	40 f4       	brcc	.+16     	; 0x2174 <__fpcmp_parts_f+0xa8>
    2164:	11 23       	and	r17, r17
    2166:	19 f0       	breq	.+6      	; 0x216e <__fpcmp_parts_f+0xa2>
    2168:	61 e0       	ldi	r22, 0x01	; 1
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	05 c0       	rjmp	.+10     	; 0x2178 <__fpcmp_parts_f+0xac>
    216e:	6f ef       	ldi	r22, 0xFF	; 255
    2170:	7f ef       	ldi	r23, 0xFF	; 255
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <__fpcmp_parts_f+0xac>
    2174:	60 e0       	ldi	r22, 0x00	; 0
    2176:	70 e0       	ldi	r23, 0x00	; 0
    2178:	cb 01       	movw	r24, r22
    217a:	1f 91       	pop	r17
    217c:	08 95       	ret

0000217e <ADC_VidInit>:
#include "INTERRUPT_Interface.h"
#include "ADC_interface.h"
#include "ADC_private.h"
#include "ADC_cfg.h"

void ADC_VidInit (void){
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62

#if VREF_USED == AVCC_5V
	ADMUX = 0x40 ;
    2186:	e7 e2       	ldi	r30, 0x27	; 39
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 e4       	ldi	r24, 0x40	; 64
    218c:	80 83       	st	Z, r24
#elif PRE_SCALAR ==   PRE_SCALAR_32
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS0) ;
#elif PRE_SCALAR ==  PRE_SCALAR_64
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) ;
#elif PRE_SCALAR == PRE_SCALAR_128
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0) ;
    218e:	e6 e2       	ldi	r30, 0x26	; 38
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	87 e8       	ldi	r24, 0x87	; 135
    2194:	80 83       	st	Z, r24
#endif

#if ADJUSTED_USED == RIGHT_ADJEUSTED
	CLR_BIT(ADMUX,ADLAR);                             //CLEAR ADLAR , RIGHT_ADJEUSTED
    2196:	a7 e2       	ldi	r26, 0x27	; 39
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e7 e2       	ldi	r30, 0x27	; 39
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	8f 7d       	andi	r24, 0xDF	; 223
    21a2:	8c 93       	st	X, r24
#elif ADJUSTED_USED == LEFT_ADJUSTED
	SET_BIT(ADMUX,ADLAR);                             //SET ADLAR , LEFT_ADJUSTED
#endif

}
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <ADC_VidReadChannel>:

u16 ADC_VidReadChannel (u8 Copy_U8Channel){
    21aa:	2f 92       	push	r2
    21ac:	3f 92       	push	r3
    21ae:	4f 92       	push	r4
    21b0:	5f 92       	push	r5
    21b2:	6f 92       	push	r6
    21b4:	7f 92       	push	r7
    21b6:	8f 92       	push	r8
    21b8:	9f 92       	push	r9
    21ba:	af 92       	push	r10
    21bc:	bf 92       	push	r11
    21be:	cf 92       	push	r12
    21c0:	df 92       	push	r13
    21c2:	ef 92       	push	r14
    21c4:	ff 92       	push	r15
    21c6:	0f 93       	push	r16
    21c8:	1f 93       	push	r17
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <ADC_VidReadChannel+0x26>
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0 ;                                   //to clear ADMUX
    21d6:	a7 e2       	ldi	r26, 0x27	; 39
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e7 e2       	ldi	r30, 0x27	; 39
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	80 7e       	andi	r24, 0xE0	; 224
    21e2:	8c 93       	st	X, r24
	ADMUX |= ( 0x1F & Copy_U8Channel ) ;              //to check that the channel out of 8 pins
    21e4:	a7 e2       	ldi	r26, 0x27	; 39
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e7 e2       	ldi	r30, 0x27	; 39
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	98 2f       	mov	r25, r24
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	8f 71       	andi	r24, 0x1F	; 31
    21f4:	89 2b       	or	r24, r25
    21f6:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC) ;                            //to start conversion
    21f8:	a6 e2       	ldi	r26, 0x26	; 38
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e6 e2       	ldi	r30, 0x26	; 38
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	80 64       	ori	r24, 0x40	; 64
    2204:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,ADATE) ;                           //to disable  Auto Trigger
    2206:	a6 e2       	ldi	r26, 0x26	; 38
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e6 e2       	ldi	r30, 0x26	; 38
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	8f 7d       	andi	r24, 0xDF	; 223
    2212:	8c 93       	st	X, r24
	while ( GET_BIT(ADCSRA,ADIF) == 0 ) ;             //to stac while conversion
    2214:	e6 e2       	ldi	r30, 0x26	; 38
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    SET_BIT(ADCSRA,ADIF);                             //to clear flag
    221a:	a6 e2       	ldi	r26, 0x26	; 38
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e6 e2       	ldi	r30, 0x26	; 38
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	80 61       	ori	r24, 0x10	; 16
    2226:	8c 93       	st	X, r24

#if ADJUSTED_USED == RIGHT_ADJEUSTED
    return ( (u64)ADC*VREF*1000)/MAX_DIGITAL ;        //to return Analog value in mv value
    2228:	e4 e2       	ldi	r30, 0x24	; 36
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	5c 01       	movw	r10, r24
    2232:	cc 24       	eor	r12, r12
    2234:	dd 24       	eor	r13, r13
    2236:	ee 24       	eor	r14, r14
    2238:	ff 24       	eor	r15, r15
    223a:	87 01       	movw	r16, r14
    223c:	2a 2d       	mov	r18, r10
    223e:	3b 2d       	mov	r19, r11
    2240:	4c 2d       	mov	r20, r12
    2242:	5d 2d       	mov	r21, r13
    2244:	6e 2d       	mov	r22, r14
    2246:	7f 2d       	mov	r23, r15
    2248:	80 2f       	mov	r24, r16
    224a:	91 2f       	mov	r25, r17
    224c:	0f 2e       	mov	r0, r31
    224e:	f8 e8       	ldi	r31, 0x88	; 136
    2250:	af 2e       	mov	r10, r31
    2252:	f0 2d       	mov	r31, r0
    2254:	0f 2e       	mov	r0, r31
    2256:	f3 e1       	ldi	r31, 0x13	; 19
    2258:	bf 2e       	mov	r11, r31
    225a:	f0 2d       	mov	r31, r0
    225c:	cc 24       	eor	r12, r12
    225e:	dd 24       	eor	r13, r13
    2260:	ee 24       	eor	r14, r14
    2262:	ff 24       	eor	r15, r15
    2264:	00 e0       	ldi	r16, 0x00	; 0
    2266:	10 e0       	ldi	r17, 0x00	; 0
    2268:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    226c:	22 2e       	mov	r2, r18
    226e:	33 2e       	mov	r3, r19
    2270:	44 2e       	mov	r4, r20
    2272:	55 2e       	mov	r5, r21
    2274:	66 2e       	mov	r6, r22
    2276:	77 2e       	mov	r7, r23
    2278:	88 2e       	mov	r8, r24
    227a:	99 2e       	mov	r9, r25
    227c:	a2 2c       	mov	r10, r2
    227e:	b3 2c       	mov	r11, r3
    2280:	c4 2c       	mov	r12, r4
    2282:	d5 2c       	mov	r13, r5
    2284:	e6 2c       	mov	r14, r6
    2286:	f7 2c       	mov	r15, r7
    2288:	08 2d       	mov	r16, r8
    228a:	19 2d       	mov	r17, r9
    228c:	2a 2d       	mov	r18, r10
    228e:	3b 2d       	mov	r19, r11
    2290:	4c 2d       	mov	r20, r12
    2292:	5d 2d       	mov	r21, r13
    2294:	6e 2d       	mov	r22, r14
    2296:	7f 2d       	mov	r23, r15
    2298:	80 2f       	mov	r24, r16
    229a:	91 2f       	mov	r25, r17
    229c:	aa 24       	eor	r10, r10
    229e:	aa 94       	dec	r10
    22a0:	0f 2e       	mov	r0, r31
    22a2:	f3 e0       	ldi	r31, 0x03	; 3
    22a4:	bf 2e       	mov	r11, r31
    22a6:	f0 2d       	mov	r31, r0
    22a8:	cc 24       	eor	r12, r12
    22aa:	dd 24       	eor	r13, r13
    22ac:	ee 24       	eor	r14, r14
    22ae:	ff 24       	eor	r15, r15
    22b0:	00 e0       	ldi	r16, 0x00	; 0
    22b2:	10 e0       	ldi	r17, 0x00	; 0
    22b4:	0e 94 cb 02 	call	0x596	; 0x596 <__udivdi3>
    22b8:	a2 2e       	mov	r10, r18
    22ba:	b3 2e       	mov	r11, r19
    22bc:	c4 2e       	mov	r12, r20
    22be:	d5 2e       	mov	r13, r21
    22c0:	e6 2e       	mov	r14, r22
    22c2:	f7 2e       	mov	r15, r23
    22c4:	08 2f       	mov	r16, r24
    22c6:	19 2f       	mov	r17, r25
    22c8:	2a 2d       	mov	r18, r10
    22ca:	3b 2d       	mov	r19, r11
    22cc:	4c 2d       	mov	r20, r12
    22ce:	5d 2d       	mov	r21, r13
    22d0:	6e 2d       	mov	r22, r14
    22d2:	7f 2d       	mov	r23, r15
    22d4:	80 2f       	mov	r24, r16
    22d6:	91 2f       	mov	r25, r17
    22d8:	c9 01       	movw	r24, r18
#elif ADJUSTED_USED == LEFT_ADJUSTED
    ADCH = (ADCH<<2) ;
    return ( (u64)ADCH*VREF*1000)/MAX_DIGITAL ;        //to return Analog value in mv value
#endif
}
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	1f 91       	pop	r17
    22e4:	0f 91       	pop	r16
    22e6:	ff 90       	pop	r15
    22e8:	ef 90       	pop	r14
    22ea:	df 90       	pop	r13
    22ec:	cf 90       	pop	r12
    22ee:	bf 90       	pop	r11
    22f0:	af 90       	pop	r10
    22f2:	9f 90       	pop	r9
    22f4:	8f 90       	pop	r8
    22f6:	7f 90       	pop	r7
    22f8:	6f 90       	pop	r6
    22fa:	5f 90       	pop	r5
    22fc:	4f 90       	pop	r4
    22fe:	3f 90       	pop	r3
    2300:	2f 90       	pop	r2
    2302:	08 95       	ret

00002304 <ADC_VidDeinit>:

void ADC_VidDeinit (void){
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADCSRA,ADEN);                             //to disable ADC perpherial
    230c:	a6 e2       	ldi	r26, 0x26	; 38
    230e:	b0 e0       	ldi	r27, 0x00	; 0
    2310:	e6 e2       	ldi	r30, 0x26	; 38
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	8f 77       	andi	r24, 0x7F	; 127
    2318:	8c 93       	st	X, r24
    ADMUX = 0x00 ;                                    //to clear ADMUX
    231a:	e7 e2       	ldi	r30, 0x27	; 39
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	10 82       	st	Z, r1
	/*to disable interrupt of ADC :
	 1) close global interrupt
	 2) clear ADIE
	  */
	GIE_VidDisable();
    2320:	0e 94 3c 1a 	call	0x3478	; 0x3478 <GIE_VidDisable>
	CLR_BIT(ADCSRA,ADIE);
    2324:	a6 e2       	ldi	r26, 0x26	; 38
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e6 e2       	ldi	r30, 0x26	; 38
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	87 7f       	andi	r24, 0xF7	; 247
    2330:	8c 93       	st	X, r24
}
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <CURT2_VidInit>:
 Input       : void
 Output      : void
 Description : to initialize every function in project
*/

void CURT2_VidInit(){
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	2e 97       	sbiw	r28, 0x0e	; 14
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
	/* For DcMotor */
	TIMER0_VidInitialize();
    234c:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <TIMER0_VidInitialize>
	TIMER1_VidInit();
    2350:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <TIMER1_VidInit>
	TIMER2_VidInitialize();
    2354:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <TIMER2_VidInitialize>

	   /* For LCD & LM35 & DCMOTOR & USART*/
		ADC_VidInit();
    2358:	0e 94 bf 10 	call	0x217e	; 0x217e <ADC_VidInit>
		//DcMotor_VidInit();

		UART_Vidinit();
    235c:	0e 94 db 24 	call	0x49b6	; 0x49b6 <UART_Vidinit>


		/* decleration of external interrupt to exist room */
	    GIE_VidEnable();
    2360:	0e 94 2e 1a 	call	0x345c	; 0x345c <GIE_VidEnable>

	    DIO_VidSetPinDirection(BUZZER_PORT,BUZZER_PIN,HIGH);
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	66 e0       	ldi	r22, 0x06	; 6
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>

	    DIO_VidSetPinDirection(0,3,1);
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	63 e0       	ldi	r22, 0x03	; 3
    2372:	41 e0       	ldi	r20, 0x01	; 1
    2374:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>
	    DIO_VidSetPinValue(0,3,1);
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	63 e0       	ldi	r22, 0x03	; 3
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>


		DIO_VidSetPinDirection(SERVO_PORT,SERVO_PIN,HIGH);			  //define Servo pin direction
    2382:	83 e0       	ldi	r24, 0x03	; 3
    2384:	65 e0       	ldi	r22, 0x05	; 5
    2386:	41 e0       	ldi	r20, 0x01	; 1
    2388:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>


		DIO_VidSetPinDirection(PORT_LED,GREEN_LED_PIN,HIGH);
    238c:	82 e0       	ldi	r24, 0x02	; 2
    238e:	63 e0       	ldi	r22, 0x03	; 3
    2390:	41 e0       	ldi	r20, 0x01	; 1
    2392:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>
		DIO_VidSetPinValue(PORT_LED,GREEN_LED_PIN,LOW);
    2396:	82 e0       	ldi	r24, 0x02	; 2
    2398:	63 e0       	ldi	r22, 0x03	; 3
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>

		DIO_VidSetPinDirection(PORT_LED,YELLOW_LED_PIN,HIGH);
    23a0:	82 e0       	ldi	r24, 0x02	; 2
    23a2:	64 e0       	ldi	r22, 0x04	; 4
    23a4:	41 e0       	ldi	r20, 0x01	; 1
    23a6:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>
		DIO_VidSetPinValue(PORT_LED,YELLOW_LED_PIN,LOW);
    23aa:	82 e0       	ldi	r24, 0x02	; 2
    23ac:	64 e0       	ldi	r22, 0x04	; 4
    23ae:	40 e0       	ldi	r20, 0x00	; 0
    23b0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>

		DIO_VidSetPinDirection(PORT_LED,RED_LED_PIN,HIGH);
    23b4:	82 e0       	ldi	r24, 0x02	; 2
    23b6:	65 e0       	ldi	r22, 0x05	; 5
    23b8:	41 e0       	ldi	r20, 0x01	; 1
    23ba:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>
		DIO_VidSetPinValue(PORT_LED,RED_LED_PIN,LOW);
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	65 e0       	ldi	r22, 0x05	; 5
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	a6 e1       	ldi	r26, 0x16	; 22
    23ce:	b3 e4       	ldi	r27, 0x43	; 67
    23d0:	8b 87       	std	Y+11, r24	; 0x0b
    23d2:	9c 87       	std	Y+12, r25	; 0x0c
    23d4:	ad 87       	std	Y+13, r26	; 0x0d
    23d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23da:	7c 85       	ldd	r23, Y+12	; 0x0c
    23dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23de:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	4a ef       	ldi	r20, 0xFA	; 250
    23e6:	54 e4       	ldi	r21, 0x44	; 68
    23e8:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	8f 83       	std	Y+7, r24	; 0x07
    23f2:	98 87       	std	Y+8, r25	; 0x08
    23f4:	a9 87       	std	Y+9, r26	; 0x09
    23f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23f8:	6f 81       	ldd	r22, Y+7	; 0x07
    23fa:	78 85       	ldd	r23, Y+8	; 0x08
    23fc:	89 85       	ldd	r24, Y+9	; 0x09
    23fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e8       	ldi	r20, 0x80	; 128
    2406:	5f e3       	ldi	r21, 0x3F	; 63
    2408:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__ltsf2>
    240c:	88 23       	and	r24, r24
    240e:	2c f4       	brge	.+10     	; 0x241a <CURT2_VidInit+0xe2>
		__ticks = 1;
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
    2418:	3f c0       	rjmp	.+126    	; 0x2498 <CURT2_VidInit+0x160>
	else if (__tmp > 65535)
    241a:	6f 81       	ldd	r22, Y+7	; 0x07
    241c:	78 85       	ldd	r23, Y+8	; 0x08
    241e:	89 85       	ldd	r24, Y+9	; 0x09
    2420:	9a 85       	ldd	r25, Y+10	; 0x0a
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	3f ef       	ldi	r19, 0xFF	; 255
    2426:	4f e7       	ldi	r20, 0x7F	; 127
    2428:	57 e4       	ldi	r21, 0x47	; 71
    242a:	0e 94 90 0c 	call	0x1920	; 0x1920 <__gtsf2>
    242e:	18 16       	cp	r1, r24
    2430:	4c f5       	brge	.+82     	; 0x2484 <CURT2_VidInit+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2432:	6b 85       	ldd	r22, Y+11	; 0x0b
    2434:	7c 85       	ldd	r23, Y+12	; 0x0c
    2436:	8d 85       	ldd	r24, Y+13	; 0x0d
    2438:	9e 85       	ldd	r25, Y+14	; 0x0e
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e2       	ldi	r20, 0x20	; 32
    2440:	51 e4       	ldi	r21, 0x41	; 65
    2442:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	9e 83       	std	Y+6, r25	; 0x06
    2458:	8d 83       	std	Y+5, r24	; 0x05
    245a:	0f c0       	rjmp	.+30     	; 0x247a <CURT2_VidInit+0x142>
    245c:	88 ec       	ldi	r24, 0xC8	; 200
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	9c 83       	std	Y+4, r25	; 0x04
    2462:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <CURT2_VidInit+0x130>
    246c:	9c 83       	std	Y+4, r25	; 0x04
    246e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2470:	8d 81       	ldd	r24, Y+5	; 0x05
    2472:	9e 81       	ldd	r25, Y+6	; 0x06
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247a:	8d 81       	ldd	r24, Y+5	; 0x05
    247c:	9e 81       	ldd	r25, Y+6	; 0x06
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	69 f7       	brne	.-38     	; 0x245c <CURT2_VidInit+0x124>
    2482:	14 c0       	rjmp	.+40     	; 0x24ac <CURT2_VidInit+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2484:	6f 81       	ldd	r22, Y+7	; 0x07
    2486:	78 85       	ldd	r23, Y+8	; 0x08
    2488:	89 85       	ldd	r24, Y+9	; 0x09
    248a:	9a 85       	ldd	r25, Y+10	; 0x0a
    248c:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <CURT2_VidInit+0x16c>
    24a8:	9a 83       	std	Y+2, r25	; 0x02
    24aa:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(150);
}
    24ac:	2e 96       	adiw	r28, 0x0e	; 14
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <Check_States>:
 Name        : Check_States
 Input       : void
 Output      : void
 Description : to recieve the uart from the other MCU then check for the state of the LEDs, Servo Motor, Machine State.
*/
void Check_States(){
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <Check_States+0x6>
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
	x= UART_U8GetChar();
    24c8:	0e 94 14 25 	call	0x4a28	; 0x4a28 <UART_U8GetChar>
    24cc:	80 93 be 01 	sts	0x01BE, r24
	static Flag = 0;
	if(!Flag)
    24d0:	80 91 71 01 	lds	r24, 0x0171
    24d4:	90 91 72 01 	lds	r25, 0x0172
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	09 f0       	breq	.+2      	; 0x24de <Check_States+0x20>
    24dc:	cb c0       	rjmp	.+406    	; 0x2674 <Check_States+0x1b6>
	{
	switch(x)
    24de:	80 91 be 01 	lds	r24, 0x01BE
    24e2:	28 2f       	mov	r18, r24
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	3a 83       	std	Y+2, r19	; 0x02
    24e8:	29 83       	std	Y+1, r18	; 0x01
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	9a 81       	ldd	r25, Y+2	; 0x02
    24ee:	82 33       	cpi	r24, 0x32	; 50
    24f0:	91 05       	cpc	r25, r1
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <Check_States+0x38>
    24f4:	4d c0       	rjmp	.+154    	; 0x2590 <Check_States+0xd2>
    24f6:	29 81       	ldd	r18, Y+1	; 0x01
    24f8:	3a 81       	ldd	r19, Y+2	; 0x02
    24fa:	23 33       	cpi	r18, 0x33	; 51
    24fc:	31 05       	cpc	r19, r1
    24fe:	5c f4       	brge	.+22     	; 0x2516 <Check_States+0x58>
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	80 33       	cpi	r24, 0x30	; 48
    2506:	91 05       	cpc	r25, r1
    2508:	c9 f0       	breq	.+50     	; 0x253c <Check_States+0x7e>
    250a:	29 81       	ldd	r18, Y+1	; 0x01
    250c:	3a 81       	ldd	r19, Y+2	; 0x02
    250e:	21 33       	cpi	r18, 0x31	; 49
    2510:	31 05       	cpc	r19, r1
    2512:	01 f1       	breq	.+64     	; 0x2554 <Check_States+0x96>
    2514:	af c0       	rjmp	.+350    	; 0x2674 <Check_States+0x1b6>
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	9a 81       	ldd	r25, Y+2	; 0x02
    251a:	84 33       	cpi	r24, 0x34	; 52
    251c:	91 05       	cpc	r25, r1
    251e:	09 f4       	brne	.+2      	; 0x2522 <Check_States+0x64>
    2520:	6e c0       	rjmp	.+220    	; 0x25fe <Check_States+0x140>
    2522:	29 81       	ldd	r18, Y+1	; 0x01
    2524:	3a 81       	ldd	r19, Y+2	; 0x02
    2526:	24 33       	cpi	r18, 0x34	; 52
    2528:	31 05       	cpc	r19, r1
    252a:	0c f4       	brge	.+2      	; 0x252e <Check_States+0x70>
    252c:	4f c0       	rjmp	.+158    	; 0x25cc <Check_States+0x10e>
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	85 33       	cpi	r24, 0x35	; 53
    2534:	91 05       	cpc	r25, r1
    2536:	09 f4       	brne	.+2      	; 0x253a <Check_States+0x7c>
    2538:	80 c0       	rjmp	.+256    	; 0x263a <Check_States+0x17c>
    253a:	9c c0       	rjmp	.+312    	; 0x2674 <Check_States+0x1b6>
	{
	case STOP_MACHINE:
		MACHINE_STATE = MACHINE_OFF;
    253c:	10 92 68 01 	sts	0x0168, r1
		SERVOMOTOR_VidSetDirection(92,OC1A_PIN);
    2540:	8c e5       	ldi	r24, 0x5C	; 92
    2542:	65 e0       	ldi	r22, 0x05	; 5
    2544:	0e 94 4a 1a 	call	0x3494	; 0x3494 <SERVOMOTOR_VidSetDirection>
	    DIO_VidSetPinValue(0,3,0);
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	63 e0       	ldi	r22, 0x03	; 3
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
    2552:	90 c0       	rjmp	.+288    	; 0x2674 <Check_States+0x1b6>
			break;
	case Normal_State_Lower_than_20:
		DIO_VidSetPinValue(PORT_LED,RED_LED_PIN,LOW);
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	65 e0       	ldi	r22, 0x05	; 5
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_LED,YELLOW_LED_PIN,LOW);
    255e:	82 e0       	ldi	r24, 0x02	; 2
    2560:	64 e0       	ldi	r22, 0x04	; 4
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,LOW);
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	66 e0       	ldi	r22, 0x06	; 6
    256c:	40 e0       	ldi	r20, 0x00	; 0
    256e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_LED,GREEN_LED_PIN,HIGH);
    2572:	82 e0       	ldi	r24, 0x02	; 2
    2574:	63 e0       	ldi	r22, 0x03	; 3
    2576:	41 e0       	ldi	r20, 0x01	; 1
    2578:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		SERVOMOTOR_VidSetDirection(92,OC1A_PIN);
    257c:	8c e5       	ldi	r24, 0x5C	; 92
    257e:	65 e0       	ldi	r22, 0x05	; 5
    2580:	0e 94 4a 1a 	call	0x3494	; 0x3494 <SERVOMOTOR_VidSetDirection>
	    DIO_VidSetPinValue(0,3,1);
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	63 e0       	ldi	r22, 0x03	; 3
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
    258e:	72 c0       	rjmp	.+228    	; 0x2674 <Check_States+0x1b6>
		break;
	case Normal_State_Between_20_40:
		DIO_VidSetPinValue(PORT_LED,GREEN_LED_PIN,LOW);
    2590:	82 e0       	ldi	r24, 0x02	; 2
    2592:	63 e0       	ldi	r22, 0x03	; 3
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_LED,RED_LED_PIN,LOW);
    259a:	82 e0       	ldi	r24, 0x02	; 2
    259c:	65 e0       	ldi	r22, 0x05	; 5
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,LOW);
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	66 e0       	ldi	r22, 0x06	; 6
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_LED,YELLOW_LED_PIN,HIGH);
    25ae:	82 e0       	ldi	r24, 0x02	; 2
    25b0:	64 e0       	ldi	r22, 0x04	; 4
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		SERVOMOTOR_VidSetDirection(92,OC1A_PIN);
    25b8:	8c e5       	ldi	r24, 0x5C	; 92
    25ba:	65 e0       	ldi	r22, 0x05	; 5
    25bc:	0e 94 4a 1a 	call	0x3494	; 0x3494 <SERVOMOTOR_VidSetDirection>
	    DIO_VidSetPinValue(0,3,1);
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	63 e0       	ldi	r22, 0x03	; 3
    25c4:	41 e0       	ldi	r20, 0x01	; 1
    25c6:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
    25ca:	54 c0       	rjmp	.+168    	; 0x2674 <Check_States+0x1b6>
		break;
	case Normal_State_Between_40_50:
		DIO_VidSetPinValue(PORT_LED,GREEN_LED_PIN,LOW);
    25cc:	82 e0       	ldi	r24, 0x02	; 2
    25ce:	63 e0       	ldi	r22, 0x03	; 3
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_LED,YELLOW_LED_PIN,LOW);
    25d6:	82 e0       	ldi	r24, 0x02	; 2
    25d8:	64 e0       	ldi	r22, 0x04	; 4
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,LOW);
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	66 e0       	ldi	r22, 0x06	; 6
    25e4:	40 e0       	ldi	r20, 0x00	; 0
    25e6:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_LED,RED_LED_PIN,HIGH);
    25ea:	82 e0       	ldi	r24, 0x02	; 2
    25ec:	65 e0       	ldi	r22, 0x05	; 5
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		SERVOMOTOR_VidSetDirection(92,OC1A_PIN);
    25f4:	8c e5       	ldi	r24, 0x5C	; 92
    25f6:	65 e0       	ldi	r22, 0x05	; 5
    25f8:	0e 94 4a 1a 	call	0x3494	; 0x3494 <SERVOMOTOR_VidSetDirection>
    25fc:	3b c0       	rjmp	.+118    	; 0x2674 <Check_States+0x1b6>
		break;

	case Emergency_State:
		DIO_VidSetPinValue(PORT_LED,GREEN_LED_PIN,LOW);
    25fe:	82 e0       	ldi	r24, 0x02	; 2
    2600:	63 e0       	ldi	r22, 0x03	; 3
    2602:	40 e0       	ldi	r20, 0x00	; 0
    2604:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_LED,YELLOW_LED_PIN,LOW);
    2608:	82 e0       	ldi	r24, 0x02	; 2
    260a:	64 e0       	ldi	r22, 0x04	; 4
    260c:	40 e0       	ldi	r20, 0x00	; 0
    260e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_LED,RED_LED_PIN,HIGH);
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	65 e0       	ldi	r22, 0x05	; 5
    2616:	41 e0       	ldi	r20, 0x01	; 1
    2618:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,HIGH);
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	66 e0       	ldi	r22, 0x06	; 6
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		SERVOMOTOR_VidSetDirection(92,OC1A_PIN);
    2626:	8c e5       	ldi	r24, 0x5C	; 92
    2628:	65 e0       	ldi	r22, 0x05	; 5
    262a:	0e 94 4a 1a 	call	0x3494	; 0x3494 <SERVOMOTOR_VidSetDirection>
	    DIO_VidSetPinValue(0,3,1);
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	63 e0       	ldi	r22, 0x03	; 3
    2632:	41 e0       	ldi	r20, 0x01	; 1
    2634:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
    2638:	1d c0       	rjmp	.+58     	; 0x2674 <Check_States+0x1b6>
		break;
	case Abnormal_State:
		DIO_VidSetPinValue(PORT_LED,GREEN_LED_PIN,LOW);
    263a:	82 e0       	ldi	r24, 0x02	; 2
    263c:	63 e0       	ldi	r22, 0x03	; 3
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_LED,YELLOW_LED_PIN,LOW);
    2644:	82 e0       	ldi	r24, 0x02	; 2
    2646:	64 e0       	ldi	r22, 0x04	; 4
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(PORT_LED,RED_LED_PIN,HIGH);
    264e:	82 e0       	ldi	r24, 0x02	; 2
    2650:	65 e0       	ldi	r22, 0x05	; 5
    2652:	41 e0       	ldi	r20, 0x01	; 1
    2654:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(BUZZER_PORT,BUZZER_PIN,HIGH);
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	66 e0       	ldi	r22, 0x06	; 6
    265c:	41 e0       	ldi	r20, 0x01	; 1
    265e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		SERVOMOTOR_VidSetDirection(180,OC1A_PIN);
    2662:	84 eb       	ldi	r24, 0xB4	; 180
    2664:	65 e0       	ldi	r22, 0x05	; 5
    2666:	0e 94 4a 1a 	call	0x3494	; 0x3494 <SERVOMOTOR_VidSetDirection>
	    DIO_VidSetPinValue(0,3,0);
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	63 e0       	ldi	r22, 0x03	; 3
    266e:	40 e0       	ldi	r20, 0x00	; 0
    2670:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>

		break;
	}}
	if (x == '5')
    2674:	80 91 be 01 	lds	r24, 0x01BE
    2678:	85 33       	cpi	r24, 0x35	; 53
    267a:	39 f4       	brne	.+14     	; 0x268a <Check_States+0x1cc>
	{
		Flag = 1;
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	90 93 72 01 	sts	0x0172, r25
    2684:	80 93 71 01 	sts	0x0171, r24
    2688:	17 c0       	rjmp	.+46     	; 0x26b8 <Check_States+0x1fa>
	}
	else if(count >= 50)
    268a:	80 91 70 01 	lds	r24, 0x0170
    268e:	82 33       	cpi	r24, 0x32	; 50
    2690:	38 f0       	brcs	.+14     	; 0x26a0 <Check_States+0x1e2>
	{
		Flag = 0;
    2692:	10 92 72 01 	sts	0x0172, r1
    2696:	10 92 71 01 	sts	0x0171, r1
		count =0;
    269a:	10 92 70 01 	sts	0x0170, r1
    269e:	0c c0       	rjmp	.+24     	; 0x26b8 <Check_States+0x1fa>
	}
	else if(Flag == 1)
    26a0:	80 91 71 01 	lds	r24, 0x0171
    26a4:	90 91 72 01 	lds	r25, 0x0172
    26a8:	81 30       	cpi	r24, 0x01	; 1
    26aa:	91 05       	cpc	r25, r1
    26ac:	29 f4       	brne	.+10     	; 0x26b8 <Check_States+0x1fa>
	{
		count++;
    26ae:	80 91 70 01 	lds	r24, 0x0170
    26b2:	8f 5f       	subi	r24, 0xFF	; 255
    26b4:	80 93 70 01 	sts	0x0170, r24
}}
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <DcMotor_VidInit>:
#include "DIO_interface.h"
#include "DCMOTOR_Interface.h"
#include "DCMOTOR_Private.h"
#include "DCMOTOR_CFG.h"

void DcMotor_VidInit(void){
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
	/*set the direction of the two input pins of the dc motor to be output pins */
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN1 , HIGH);
    26ca:	83 e0       	ldi	r24, 0x03	; 3
    26cc:	60 e0       	ldi	r22, 0x00	; 0
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(DC_MOTOR_PORT , DC_MOTOR_PIN2 , HIGH);
    26d4:	83 e0       	ldi	r24, 0x03	; 3
    26d6:	61 e0       	ldi	r22, 0x01	; 1
    26d8:	41 e0       	ldi	r20, 0x01	; 1
    26da:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>

	/*initialize the dc motor to be stop at the beginning*/
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    26de:	83 e0       	ldi	r24, 0x03	; 3
    26e0:	60 e0       	ldi	r22, 0x00	; 0
    26e2:	40 e0       	ldi	r20, 0x00	; 0
    26e4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
	DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    26e8:	83 e0       	ldi	r24, 0x03	; 3
    26ea:	61 e0       	ldi	r22, 0x01	; 1
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
}
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <DcMotor_VidRotate>:

void DcMotor_VidRotate(u8 state){
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <DcMotor_VidRotate+0x6>
    26fe:	0f 92       	push	r0
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	89 83       	std	Y+1, r24	; 0x01
	switch(state){
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	28 2f       	mov	r18, r24
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	3b 83       	std	Y+3, r19	; 0x03
    270e:	2a 83       	std	Y+2, r18	; 0x02
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	9b 81       	ldd	r25, Y+3	; 0x03
    2714:	81 30       	cpi	r24, 0x01	; 1
    2716:	91 05       	cpc	r25, r1
    2718:	a1 f0       	breq	.+40     	; 0x2742 <DcMotor_VidRotate+0x4a>
    271a:	2a 81       	ldd	r18, Y+2	; 0x02
    271c:	3b 81       	ldd	r19, Y+3	; 0x03
    271e:	22 30       	cpi	r18, 0x02	; 2
    2720:	31 05       	cpc	r19, r1
    2722:	d1 f0       	breq	.+52     	; 0x2758 <DcMotor_VidRotate+0x60>
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	9b 81       	ldd	r25, Y+3	; 0x03
    2728:	00 97       	sbiw	r24, 0x00	; 0
    272a:	01 f5       	brne	.+64     	; 0x276c <DcMotor_VidRotate+0x74>
	case STOP:
		/*make the dc motor stop*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    272c:	83 e0       	ldi	r24, 0x03	; 3
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    2736:	83 e0       	ldi	r24, 0x03	; 3
    2738:	61 e0       	ldi	r22, 0x01	; 1
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
    2740:	15 c0       	rjmp	.+42     	; 0x276c <DcMotor_VidRotate+0x74>
		break;
	case CLK_WISE:
		/*make the dc motor start in CLOCK_WISE direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , LOW);
    2742:	83 e0       	ldi	r24, 0x03	; 3
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	40 e0       	ldi	r20, 0x00	; 0
    2748:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , HIGH);
    274c:	83 e0       	ldi	r24, 0x03	; 3
    274e:	61 e0       	ldi	r22, 0x01	; 1
    2750:	41 e0       	ldi	r20, 0x01	; 1
    2752:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
    2756:	0a c0       	rjmp	.+20     	; 0x276c <DcMotor_VidRotate+0x74>
		break;
	case ANTI_CLK_WISE:
		/*make the dc motor start in ANTI_CLOCK_WISE  direction*/
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN1 , HIGH);
    2758:	83 e0       	ldi	r24, 0x03	; 3
    275a:	60 e0       	ldi	r22, 0x00	; 0
    275c:	41 e0       	ldi	r20, 0x01	; 1
    275e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		DIO_VidSetPinValue(DC_MOTOR_PORT , DC_MOTOR_PIN2 , LOW);
    2762:	83 e0       	ldi	r24, 0x03	; 3
    2764:	61 e0       	ldi	r22, 0x01	; 1
    2766:	40 e0       	ldi	r20, 0x00	; 0
    2768:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		break;
	}
}
    276c:	0f 90       	pop	r0
    276e:	0f 90       	pop	r0
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <DIO_VidSetPinDirection>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"DIO_private.h"
#include"DIO_interface.h"

void DIO_VidSetPinDirection (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Dir ) {
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	27 97       	sbiw	r28, 0x07	; 7
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	de bf       	out	0x3e, r29	; 62
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	cd bf       	out	0x3d, r28	; 61
    278c:	89 83       	std	Y+1, r24	; 0x01
    278e:	6a 83       	std	Y+2, r22	; 0x02
    2790:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Dir ){
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	81 30       	cpi	r24, 0x01	; 1
    2796:	09 f0       	breq	.+2      	; 0x279a <DIO_VidSetPinDirection+0x22>
    2798:	6f c0       	rjmp	.+222    	; 0x2878 <DIO_VidSetPinDirection+0x100>
		switch (Copy_U8Port){
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	28 2f       	mov	r18, r24
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	3f 83       	std	Y+7, r19	; 0x07
    27a2:	2e 83       	std	Y+6, r18	; 0x06
    27a4:	8e 81       	ldd	r24, Y+6	; 0x06
    27a6:	9f 81       	ldd	r25, Y+7	; 0x07
    27a8:	81 30       	cpi	r24, 0x01	; 1
    27aa:	91 05       	cpc	r25, r1
    27ac:	49 f1       	breq	.+82     	; 0x2800 <DIO_VidSetPinDirection+0x88>
    27ae:	2e 81       	ldd	r18, Y+6	; 0x06
    27b0:	3f 81       	ldd	r19, Y+7	; 0x07
    27b2:	22 30       	cpi	r18, 0x02	; 2
    27b4:	31 05       	cpc	r19, r1
    27b6:	2c f4       	brge	.+10     	; 0x27c2 <DIO_VidSetPinDirection+0x4a>
    27b8:	8e 81       	ldd	r24, Y+6	; 0x06
    27ba:	9f 81       	ldd	r25, Y+7	; 0x07
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	61 f0       	breq	.+24     	; 0x27d8 <DIO_VidSetPinDirection+0x60>
    27c0:	d2 c0       	rjmp	.+420    	; 0x2966 <DIO_VidSetPinDirection+0x1ee>
    27c2:	2e 81       	ldd	r18, Y+6	; 0x06
    27c4:	3f 81       	ldd	r19, Y+7	; 0x07
    27c6:	22 30       	cpi	r18, 0x02	; 2
    27c8:	31 05       	cpc	r19, r1
    27ca:	71 f1       	breq	.+92     	; 0x2828 <DIO_VidSetPinDirection+0xb0>
    27cc:	8e 81       	ldd	r24, Y+6	; 0x06
    27ce:	9f 81       	ldd	r25, Y+7	; 0x07
    27d0:	83 30       	cpi	r24, 0x03	; 3
    27d2:	91 05       	cpc	r25, r1
    27d4:	e9 f1       	breq	.+122    	; 0x2850 <DIO_VidSetPinDirection+0xd8>
    27d6:	c7 c0       	rjmp	.+398    	; 0x2966 <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    SET_BIT(DDRA,Copy_U8Pin);
    27d8:	aa e3       	ldi	r26, 0x3A	; 58
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	ea e3       	ldi	r30, 0x3A	; 58
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	48 2f       	mov	r20, r24
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	02 2e       	mov	r0, r18
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <DIO_VidSetPinDirection+0x7e>
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	0a 94       	dec	r0
    27f8:	e2 f7       	brpl	.-8      	; 0x27f2 <DIO_VidSetPinDirection+0x7a>
    27fa:	84 2b       	or	r24, r20
    27fc:	8c 93       	st	X, r24
    27fe:	b3 c0       	rjmp	.+358    	; 0x2966 <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(DDRB,Copy_U8Pin);
    2800:	a7 e3       	ldi	r26, 0x37	; 55
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e7 e3       	ldi	r30, 0x37	; 55
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	48 2f       	mov	r20, r24
    280c:	8a 81       	ldd	r24, Y+2	; 0x02
    280e:	28 2f       	mov	r18, r24
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	02 2e       	mov	r0, r18
    2818:	02 c0       	rjmp	.+4      	; 0x281e <DIO_VidSetPinDirection+0xa6>
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	0a 94       	dec	r0
    2820:	e2 f7       	brpl	.-8      	; 0x281a <DIO_VidSetPinDirection+0xa2>
    2822:	84 2b       	or	r24, r20
    2824:	8c 93       	st	X, r24
    2826:	9f c0       	rjmp	.+318    	; 0x2966 <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(DDRC,Copy_U8Pin);
    2828:	a4 e3       	ldi	r26, 0x34	; 52
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	e4 e3       	ldi	r30, 0x34	; 52
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	48 2f       	mov	r20, r24
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	02 2e       	mov	r0, r18
    2840:	02 c0       	rjmp	.+4      	; 0x2846 <DIO_VidSetPinDirection+0xce>
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	0a 94       	dec	r0
    2848:	e2 f7       	brpl	.-8      	; 0x2842 <DIO_VidSetPinDirection+0xca>
    284a:	84 2b       	or	r24, r20
    284c:	8c 93       	st	X, r24
    284e:	8b c0       	rjmp	.+278    	; 0x2966 <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(DDRD,Copy_U8Pin);
    2850:	a1 e3       	ldi	r26, 0x31	; 49
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	e1 e3       	ldi	r30, 0x31	; 49
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	48 2f       	mov	r20, r24
    285c:	8a 81       	ldd	r24, Y+2	; 0x02
    285e:	28 2f       	mov	r18, r24
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	02 2e       	mov	r0, r18
    2868:	02 c0       	rjmp	.+4      	; 0x286e <DIO_VidSetPinDirection+0xf6>
    286a:	88 0f       	add	r24, r24
    286c:	99 1f       	adc	r25, r25
    286e:	0a 94       	dec	r0
    2870:	e2 f7       	brpl	.-8      	; 0x286a <DIO_VidSetPinDirection+0xf2>
    2872:	84 2b       	or	r24, r20
    2874:	8c 93       	st	X, r24
    2876:	77 c0       	rjmp	.+238    	; 0x2966 <DIO_VidSetPinDirection+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Dir ) {
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	88 23       	and	r24, r24
    287c:	09 f0       	breq	.+2      	; 0x2880 <DIO_VidSetPinDirection+0x108>
    287e:	73 c0       	rjmp	.+230    	; 0x2966 <DIO_VidSetPinDirection+0x1ee>
		switch (Copy_U8Port){
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	28 2f       	mov	r18, r24
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	3d 83       	std	Y+5, r19	; 0x05
    2888:	2c 83       	std	Y+4, r18	; 0x04
    288a:	8c 81       	ldd	r24, Y+4	; 0x04
    288c:	9d 81       	ldd	r25, Y+5	; 0x05
    288e:	81 30       	cpi	r24, 0x01	; 1
    2890:	91 05       	cpc	r25, r1
    2892:	59 f1       	breq	.+86     	; 0x28ea <DIO_VidSetPinDirection+0x172>
    2894:	2c 81       	ldd	r18, Y+4	; 0x04
    2896:	3d 81       	ldd	r19, Y+5	; 0x05
    2898:	22 30       	cpi	r18, 0x02	; 2
    289a:	31 05       	cpc	r19, r1
    289c:	2c f4       	brge	.+10     	; 0x28a8 <DIO_VidSetPinDirection+0x130>
    289e:	8c 81       	ldd	r24, Y+4	; 0x04
    28a0:	9d 81       	ldd	r25, Y+5	; 0x05
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	69 f0       	breq	.+26     	; 0x28c0 <DIO_VidSetPinDirection+0x148>
    28a6:	5f c0       	rjmp	.+190    	; 0x2966 <DIO_VidSetPinDirection+0x1ee>
    28a8:	2c 81       	ldd	r18, Y+4	; 0x04
    28aa:	3d 81       	ldd	r19, Y+5	; 0x05
    28ac:	22 30       	cpi	r18, 0x02	; 2
    28ae:	31 05       	cpc	r19, r1
    28b0:	89 f1       	breq	.+98     	; 0x2914 <DIO_VidSetPinDirection+0x19c>
    28b2:	8c 81       	ldd	r24, Y+4	; 0x04
    28b4:	9d 81       	ldd	r25, Y+5	; 0x05
    28b6:	83 30       	cpi	r24, 0x03	; 3
    28b8:	91 05       	cpc	r25, r1
    28ba:	09 f4       	brne	.+2      	; 0x28be <DIO_VidSetPinDirection+0x146>
    28bc:	40 c0       	rjmp	.+128    	; 0x293e <DIO_VidSetPinDirection+0x1c6>
    28be:	53 c0       	rjmp	.+166    	; 0x2966 <DIO_VidSetPinDirection+0x1ee>
			case 0 : 
			    CLR_BIT(DDRA,Copy_U8Pin);
    28c0:	aa e3       	ldi	r26, 0x3A	; 58
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	ea e3       	ldi	r30, 0x3A	; 58
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	48 2f       	mov	r20, r24
    28cc:	8a 81       	ldd	r24, Y+2	; 0x02
    28ce:	28 2f       	mov	r18, r24
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	81 e0       	ldi	r24, 0x01	; 1
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	02 2e       	mov	r0, r18
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <DIO_VidSetPinDirection+0x166>
    28da:	88 0f       	add	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	0a 94       	dec	r0
    28e0:	e2 f7       	brpl	.-8      	; 0x28da <DIO_VidSetPinDirection+0x162>
    28e2:	80 95       	com	r24
    28e4:	84 23       	and	r24, r20
    28e6:	8c 93       	st	X, r24
    28e8:	3e c0       	rjmp	.+124    	; 0x2966 <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(DDRB,Copy_U8Pin);
    28ea:	a7 e3       	ldi	r26, 0x37	; 55
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	e7 e3       	ldi	r30, 0x37	; 55
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	48 2f       	mov	r20, r24
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	02 2e       	mov	r0, r18
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <DIO_VidSetPinDirection+0x190>
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	0a 94       	dec	r0
    290a:	e2 f7       	brpl	.-8      	; 0x2904 <DIO_VidSetPinDirection+0x18c>
    290c:	80 95       	com	r24
    290e:	84 23       	and	r24, r20
    2910:	8c 93       	st	X, r24
    2912:	29 c0       	rjmp	.+82     	; 0x2966 <DIO_VidSetPinDirection+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(DDRC,Copy_U8Pin);
    2914:	a4 e3       	ldi	r26, 0x34	; 52
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	e4 e3       	ldi	r30, 0x34	; 52
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	80 81       	ld	r24, Z
    291e:	48 2f       	mov	r20, r24
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	02 2e       	mov	r0, r18
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <DIO_VidSetPinDirection+0x1ba>
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	0a 94       	dec	r0
    2934:	e2 f7       	brpl	.-8      	; 0x292e <DIO_VidSetPinDirection+0x1b6>
    2936:	80 95       	com	r24
    2938:	84 23       	and	r24, r20
    293a:	8c 93       	st	X, r24
    293c:	14 c0       	rjmp	.+40     	; 0x2966 <DIO_VidSetPinDirection+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(DDRD,Copy_U8Pin);
    293e:	a1 e3       	ldi	r26, 0x31	; 49
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e1 e3       	ldi	r30, 0x31	; 49
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	48 2f       	mov	r20, r24
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	28 2f       	mov	r18, r24
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	02 2e       	mov	r0, r18
    2956:	02 c0       	rjmp	.+4      	; 0x295c <DIO_VidSetPinDirection+0x1e4>
    2958:	88 0f       	add	r24, r24
    295a:	99 1f       	adc	r25, r25
    295c:	0a 94       	dec	r0
    295e:	e2 f7       	brpl	.-8      	; 0x2958 <DIO_VidSetPinDirection+0x1e0>
    2960:	80 95       	com	r24
    2962:	84 23       	and	r24, r20
    2964:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if 
}//end FUNC DIO_VidSetPinDirection
    2966:	27 96       	adiw	r28, 0x07	; 7
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	cf 91       	pop	r28
    2974:	df 91       	pop	r29
    2976:	08 95       	ret

00002978 <DIO_VidSetPortDirection>:
void DIO_VidSetPortDirection (u8 Copy_U8Port , u8 Copy_U8Dir ) {
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	00 d0       	rcall	.+0      	; 0x297e <DIO_VidSetPortDirection+0x6>
    297e:	00 d0       	rcall	.+0      	; 0x2980 <DIO_VidSetPortDirection+0x8>
    2980:	cd b7       	in	r28, 0x3d	; 61
    2982:	de b7       	in	r29, 0x3e	; 62
    2984:	89 83       	std	Y+1, r24	; 0x01
    2986:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	28 2f       	mov	r18, r24
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	3c 83       	std	Y+4, r19	; 0x04
    2990:	2b 83       	std	Y+3, r18	; 0x03
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	81 30       	cpi	r24, 0x01	; 1
    2998:	91 05       	cpc	r25, r1
    299a:	d1 f0       	breq	.+52     	; 0x29d0 <DIO_VidSetPortDirection+0x58>
    299c:	2b 81       	ldd	r18, Y+3	; 0x03
    299e:	3c 81       	ldd	r19, Y+4	; 0x04
    29a0:	22 30       	cpi	r18, 0x02	; 2
    29a2:	31 05       	cpc	r19, r1
    29a4:	2c f4       	brge	.+10     	; 0x29b0 <DIO_VidSetPortDirection+0x38>
    29a6:	8b 81       	ldd	r24, Y+3	; 0x03
    29a8:	9c 81       	ldd	r25, Y+4	; 0x04
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	61 f0       	breq	.+24     	; 0x29c6 <DIO_VidSetPortDirection+0x4e>
    29ae:	1e c0       	rjmp	.+60     	; 0x29ec <DIO_VidSetPortDirection+0x74>
    29b0:	2b 81       	ldd	r18, Y+3	; 0x03
    29b2:	3c 81       	ldd	r19, Y+4	; 0x04
    29b4:	22 30       	cpi	r18, 0x02	; 2
    29b6:	31 05       	cpc	r19, r1
    29b8:	81 f0       	breq	.+32     	; 0x29da <DIO_VidSetPortDirection+0x62>
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	83 30       	cpi	r24, 0x03	; 3
    29c0:	91 05       	cpc	r25, r1
    29c2:	81 f0       	breq	.+32     	; 0x29e4 <DIO_VidSetPortDirection+0x6c>
    29c4:	13 c0       	rjmp	.+38     	; 0x29ec <DIO_VidSetPortDirection+0x74>
		case 0 : 
			DDRA = Copy_U8Dir ;
    29c6:	ea e3       	ldi	r30, 0x3A	; 58
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	8a 81       	ldd	r24, Y+2	; 0x02
    29cc:	80 83       	st	Z, r24
    29ce:	0e c0       	rjmp	.+28     	; 0x29ec <DIO_VidSetPortDirection+0x74>
			break ;  
		case 1 : 
			DDRB = Copy_U8Dir ;
    29d0:	e7 e3       	ldi	r30, 0x37	; 55
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	80 83       	st	Z, r24
    29d8:	09 c0       	rjmp	.+18     	; 0x29ec <DIO_VidSetPortDirection+0x74>
			break ;			
		case 2 : 
			DDRC = Copy_U8Dir ;
    29da:	e4 e3       	ldi	r30, 0x34	; 52
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	8a 81       	ldd	r24, Y+2	; 0x02
    29e0:	80 83       	st	Z, r24
    29e2:	04 c0       	rjmp	.+8      	; 0x29ec <DIO_VidSetPortDirection+0x74>
			break ;  
		case 3 : 
			DDRD = Copy_U8Dir ;
    29e4:	e1 e3       	ldi	r30, 0x31	; 49
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	80 83       	st	Z, r24
			break ; 
		}//end switch
}// end FUNC DIO_VidSetPortDirection
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <DIO_VidSetPinValue>:
void DIO_VidSetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin , u8 Copy_U8Val ) {
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	27 97       	sbiw	r28, 0x07	; 7
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	89 83       	std	Y+1, r24	; 0x01
    2a10:	6a 83       	std	Y+2, r22	; 0x02
    2a12:	4b 83       	std	Y+3, r20	; 0x03
	if ( 1 == Copy_U8Val ){
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	81 30       	cpi	r24, 0x01	; 1
    2a18:	09 f0       	breq	.+2      	; 0x2a1c <DIO_VidSetPinValue+0x22>
    2a1a:	6f c0       	rjmp	.+222    	; 0x2afa <DIO_VidSetPinValue+0x100>
		switch (Copy_U8Port){
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	28 2f       	mov	r18, r24
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	3f 83       	std	Y+7, r19	; 0x07
    2a24:	2e 83       	std	Y+6, r18	; 0x06
    2a26:	8e 81       	ldd	r24, Y+6	; 0x06
    2a28:	9f 81       	ldd	r25, Y+7	; 0x07
    2a2a:	81 30       	cpi	r24, 0x01	; 1
    2a2c:	91 05       	cpc	r25, r1
    2a2e:	49 f1       	breq	.+82     	; 0x2a82 <DIO_VidSetPinValue+0x88>
    2a30:	2e 81       	ldd	r18, Y+6	; 0x06
    2a32:	3f 81       	ldd	r19, Y+7	; 0x07
    2a34:	22 30       	cpi	r18, 0x02	; 2
    2a36:	31 05       	cpc	r19, r1
    2a38:	2c f4       	brge	.+10     	; 0x2a44 <DIO_VidSetPinValue+0x4a>
    2a3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	61 f0       	breq	.+24     	; 0x2a5a <DIO_VidSetPinValue+0x60>
    2a42:	d2 c0       	rjmp	.+420    	; 0x2be8 <DIO_VidSetPinValue+0x1ee>
    2a44:	2e 81       	ldd	r18, Y+6	; 0x06
    2a46:	3f 81       	ldd	r19, Y+7	; 0x07
    2a48:	22 30       	cpi	r18, 0x02	; 2
    2a4a:	31 05       	cpc	r19, r1
    2a4c:	71 f1       	breq	.+92     	; 0x2aaa <DIO_VidSetPinValue+0xb0>
    2a4e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a50:	9f 81       	ldd	r25, Y+7	; 0x07
    2a52:	83 30       	cpi	r24, 0x03	; 3
    2a54:	91 05       	cpc	r25, r1
    2a56:	e9 f1       	breq	.+122    	; 0x2ad2 <DIO_VidSetPinValue+0xd8>
    2a58:	c7 c0       	rjmp	.+398    	; 0x2be8 <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    SET_BIT(PORTA,Copy_U8Pin);
    2a5a:	ab e3       	ldi	r26, 0x3B	; 59
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	eb e3       	ldi	r30, 0x3B	; 59
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	48 2f       	mov	r20, r24
    2a66:	8a 81       	ldd	r24, Y+2	; 0x02
    2a68:	28 2f       	mov	r18, r24
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	02 2e       	mov	r0, r18
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <DIO_VidSetPinValue+0x7e>
    2a74:	88 0f       	add	r24, r24
    2a76:	99 1f       	adc	r25, r25
    2a78:	0a 94       	dec	r0
    2a7a:	e2 f7       	brpl	.-8      	; 0x2a74 <DIO_VidSetPinValue+0x7a>
    2a7c:	84 2b       	or	r24, r20
    2a7e:	8c 93       	st	X, r24
    2a80:	b3 c0       	rjmp	.+358    	; 0x2be8 <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    SET_BIT(PORTB,Copy_U8Pin);
    2a82:	a8 e3       	ldi	r26, 0x38	; 56
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	e8 e3       	ldi	r30, 0x38	; 56
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	48 2f       	mov	r20, r24
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	81 e0       	ldi	r24, 0x01	; 1
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	02 2e       	mov	r0, r18
    2a9a:	02 c0       	rjmp	.+4      	; 0x2aa0 <DIO_VidSetPinValue+0xa6>
    2a9c:	88 0f       	add	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	0a 94       	dec	r0
    2aa2:	e2 f7       	brpl	.-8      	; 0x2a9c <DIO_VidSetPinValue+0xa2>
    2aa4:	84 2b       	or	r24, r20
    2aa6:	8c 93       	st	X, r24
    2aa8:	9f c0       	rjmp	.+318    	; 0x2be8 <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    SET_BIT(PORTC,Copy_U8Pin);
    2aaa:	a5 e3       	ldi	r26, 0x35	; 53
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	e5 e3       	ldi	r30, 0x35	; 53
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	48 2f       	mov	r20, r24
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	02 2e       	mov	r0, r18
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <DIO_VidSetPinValue+0xce>
    2ac4:	88 0f       	add	r24, r24
    2ac6:	99 1f       	adc	r25, r25
    2ac8:	0a 94       	dec	r0
    2aca:	e2 f7       	brpl	.-8      	; 0x2ac4 <DIO_VidSetPinValue+0xca>
    2acc:	84 2b       	or	r24, r20
    2ace:	8c 93       	st	X, r24
    2ad0:	8b c0       	rjmp	.+278    	; 0x2be8 <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    SET_BIT(PORTD,Copy_U8Pin);
    2ad2:	a2 e3       	ldi	r26, 0x32	; 50
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	e2 e3       	ldi	r30, 0x32	; 50
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	80 81       	ld	r24, Z
    2adc:	48 2f       	mov	r20, r24
    2ade:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae0:	28 2f       	mov	r18, r24
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	02 2e       	mov	r0, r18
    2aea:	02 c0       	rjmp	.+4      	; 0x2af0 <DIO_VidSetPinValue+0xf6>
    2aec:	88 0f       	add	r24, r24
    2aee:	99 1f       	adc	r25, r25
    2af0:	0a 94       	dec	r0
    2af2:	e2 f7       	brpl	.-8      	; 0x2aec <DIO_VidSetPinValue+0xf2>
    2af4:	84 2b       	or	r24, r20
    2af6:	8c 93       	st	X, r24
    2af8:	77 c0       	rjmp	.+238    	; 0x2be8 <DIO_VidSetPinValue+0x1ee>
			    break ; 
		}//end switch
	}//end if
	else if ( 0 == Copy_U8Val){
    2afa:	8b 81       	ldd	r24, Y+3	; 0x03
    2afc:	88 23       	and	r24, r24
    2afe:	09 f0       	breq	.+2      	; 0x2b02 <DIO_VidSetPinValue+0x108>
    2b00:	73 c0       	rjmp	.+230    	; 0x2be8 <DIO_VidSetPinValue+0x1ee>
		switch (Copy_U8Port){
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	28 2f       	mov	r18, r24
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	3d 83       	std	Y+5, r19	; 0x05
    2b0a:	2c 83       	std	Y+4, r18	; 0x04
    2b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	91 05       	cpc	r25, r1
    2b14:	59 f1       	breq	.+86     	; 0x2b6c <DIO_VidSetPinValue+0x172>
    2b16:	2c 81       	ldd	r18, Y+4	; 0x04
    2b18:	3d 81       	ldd	r19, Y+5	; 0x05
    2b1a:	22 30       	cpi	r18, 0x02	; 2
    2b1c:	31 05       	cpc	r19, r1
    2b1e:	2c f4       	brge	.+10     	; 0x2b2a <DIO_VidSetPinValue+0x130>
    2b20:	8c 81       	ldd	r24, Y+4	; 0x04
    2b22:	9d 81       	ldd	r25, Y+5	; 0x05
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	69 f0       	breq	.+26     	; 0x2b42 <DIO_VidSetPinValue+0x148>
    2b28:	5f c0       	rjmp	.+190    	; 0x2be8 <DIO_VidSetPinValue+0x1ee>
    2b2a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b2c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b2e:	22 30       	cpi	r18, 0x02	; 2
    2b30:	31 05       	cpc	r19, r1
    2b32:	89 f1       	breq	.+98     	; 0x2b96 <DIO_VidSetPinValue+0x19c>
    2b34:	8c 81       	ldd	r24, Y+4	; 0x04
    2b36:	9d 81       	ldd	r25, Y+5	; 0x05
    2b38:	83 30       	cpi	r24, 0x03	; 3
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <DIO_VidSetPinValue+0x146>
    2b3e:	40 c0       	rjmp	.+128    	; 0x2bc0 <DIO_VidSetPinValue+0x1c6>
    2b40:	53 c0       	rjmp	.+166    	; 0x2be8 <DIO_VidSetPinValue+0x1ee>
			case 0 : 
			    CLR_BIT(PORTA,Copy_U8Pin);
    2b42:	ab e3       	ldi	r26, 0x3B	; 59
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	eb e3       	ldi	r30, 0x3B	; 59
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	48 2f       	mov	r20, r24
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	28 2f       	mov	r18, r24
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	02 2e       	mov	r0, r18
    2b5a:	02 c0       	rjmp	.+4      	; 0x2b60 <DIO_VidSetPinValue+0x166>
    2b5c:	88 0f       	add	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	0a 94       	dec	r0
    2b62:	e2 f7       	brpl	.-8      	; 0x2b5c <DIO_VidSetPinValue+0x162>
    2b64:	80 95       	com	r24
    2b66:	84 23       	and	r24, r20
    2b68:	8c 93       	st	X, r24
    2b6a:	3e c0       	rjmp	.+124    	; 0x2be8 <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 1 : 
			    CLR_BIT(PORTB,Copy_U8Pin);
    2b6c:	a8 e3       	ldi	r26, 0x38	; 56
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e8 e3       	ldi	r30, 0x38	; 56
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	80 81       	ld	r24, Z
    2b76:	48 2f       	mov	r20, r24
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	28 2f       	mov	r18, r24
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	02 2e       	mov	r0, r18
    2b84:	02 c0       	rjmp	.+4      	; 0x2b8a <DIO_VidSetPinValue+0x190>
    2b86:	88 0f       	add	r24, r24
    2b88:	99 1f       	adc	r25, r25
    2b8a:	0a 94       	dec	r0
    2b8c:	e2 f7       	brpl	.-8      	; 0x2b86 <DIO_VidSetPinValue+0x18c>
    2b8e:	80 95       	com	r24
    2b90:	84 23       	and	r24, r20
    2b92:	8c 93       	st	X, r24
    2b94:	29 c0       	rjmp	.+82     	; 0x2be8 <DIO_VidSetPinValue+0x1ee>
			    break ;			
			case 2 : 
			    CLR_BIT(PORTC,Copy_U8Pin);
    2b96:	a5 e3       	ldi	r26, 0x35	; 53
    2b98:	b0 e0       	ldi	r27, 0x00	; 0
    2b9a:	e5 e3       	ldi	r30, 0x35	; 53
    2b9c:	f0 e0       	ldi	r31, 0x00	; 0
    2b9e:	80 81       	ld	r24, Z
    2ba0:	48 2f       	mov	r20, r24
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	28 2f       	mov	r18, r24
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	02 2e       	mov	r0, r18
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <DIO_VidSetPinValue+0x1ba>
    2bb0:	88 0f       	add	r24, r24
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	0a 94       	dec	r0
    2bb6:	e2 f7       	brpl	.-8      	; 0x2bb0 <DIO_VidSetPinValue+0x1b6>
    2bb8:	80 95       	com	r24
    2bba:	84 23       	and	r24, r20
    2bbc:	8c 93       	st	X, r24
    2bbe:	14 c0       	rjmp	.+40     	; 0x2be8 <DIO_VidSetPinValue+0x1ee>
			    break ;  
			case 3 : 
			    CLR_BIT(PORTD,Copy_U8Pin);
    2bc0:	a2 e3       	ldi	r26, 0x32	; 50
    2bc2:	b0 e0       	ldi	r27, 0x00	; 0
    2bc4:	e2 e3       	ldi	r30, 0x32	; 50
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	80 81       	ld	r24, Z
    2bca:	48 2f       	mov	r20, r24
    2bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bce:	28 2f       	mov	r18, r24
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	02 2e       	mov	r0, r18
    2bd8:	02 c0       	rjmp	.+4      	; 0x2bde <DIO_VidSetPinValue+0x1e4>
    2bda:	88 0f       	add	r24, r24
    2bdc:	99 1f       	adc	r25, r25
    2bde:	0a 94       	dec	r0
    2be0:	e2 f7       	brpl	.-8      	; 0x2bda <DIO_VidSetPinValue+0x1e0>
    2be2:	80 95       	com	r24
    2be4:	84 23       	and	r24, r20
    2be6:	8c 93       	st	X, r24
			    break ; 
		}//end switch
	}//end else if
}// end FUNC DIO_VidSetPinValue
    2be8:	27 96       	adiw	r28, 0x07	; 7
    2bea:	0f b6       	in	r0, 0x3f	; 63
    2bec:	f8 94       	cli
    2bee:	de bf       	out	0x3e, r29	; 62
    2bf0:	0f be       	out	0x3f, r0	; 63
    2bf2:	cd bf       	out	0x3d, r28	; 61
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <DIO_VidSetPortValue>:
void DIO_VidSetPortValue (u8 Copy_U8Port , u8 Copy_U8Val ) {
    2bfa:	df 93       	push	r29
    2bfc:	cf 93       	push	r28
    2bfe:	00 d0       	rcall	.+0      	; 0x2c00 <DIO_VidSetPortValue+0x6>
    2c00:	00 d0       	rcall	.+0      	; 0x2c02 <DIO_VidSetPortValue+0x8>
    2c02:	cd b7       	in	r28, 0x3d	; 61
    2c04:	de b7       	in	r29, 0x3e	; 62
    2c06:	89 83       	std	Y+1, r24	; 0x01
    2c08:	6a 83       	std	Y+2, r22	; 0x02
    switch (Copy_U8Port){
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	28 2f       	mov	r18, r24
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	3c 83       	std	Y+4, r19	; 0x04
    2c12:	2b 83       	std	Y+3, r18	; 0x03
    2c14:	8b 81       	ldd	r24, Y+3	; 0x03
    2c16:	9c 81       	ldd	r25, Y+4	; 0x04
    2c18:	81 30       	cpi	r24, 0x01	; 1
    2c1a:	91 05       	cpc	r25, r1
    2c1c:	d1 f0       	breq	.+52     	; 0x2c52 <DIO_VidSetPortValue+0x58>
    2c1e:	2b 81       	ldd	r18, Y+3	; 0x03
    2c20:	3c 81       	ldd	r19, Y+4	; 0x04
    2c22:	22 30       	cpi	r18, 0x02	; 2
    2c24:	31 05       	cpc	r19, r1
    2c26:	2c f4       	brge	.+10     	; 0x2c32 <DIO_VidSetPortValue+0x38>
    2c28:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2c:	00 97       	sbiw	r24, 0x00	; 0
    2c2e:	61 f0       	breq	.+24     	; 0x2c48 <DIO_VidSetPortValue+0x4e>
    2c30:	1e c0       	rjmp	.+60     	; 0x2c6e <DIO_VidSetPortValue+0x74>
    2c32:	2b 81       	ldd	r18, Y+3	; 0x03
    2c34:	3c 81       	ldd	r19, Y+4	; 0x04
    2c36:	22 30       	cpi	r18, 0x02	; 2
    2c38:	31 05       	cpc	r19, r1
    2c3a:	81 f0       	breq	.+32     	; 0x2c5c <DIO_VidSetPortValue+0x62>
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c40:	83 30       	cpi	r24, 0x03	; 3
    2c42:	91 05       	cpc	r25, r1
    2c44:	81 f0       	breq	.+32     	; 0x2c66 <DIO_VidSetPortValue+0x6c>
    2c46:	13 c0       	rjmp	.+38     	; 0x2c6e <DIO_VidSetPortValue+0x74>
		case 0 : 
			PORTA = Copy_U8Val ;
    2c48:	eb e3       	ldi	r30, 0x3B	; 59
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4e:	80 83       	st	Z, r24
    2c50:	0e c0       	rjmp	.+28     	; 0x2c6e <DIO_VidSetPortValue+0x74>
			break ;  
		case 1 : 
			PORTB = Copy_U8Val ;
    2c52:	e8 e3       	ldi	r30, 0x38	; 56
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	8a 81       	ldd	r24, Y+2	; 0x02
    2c58:	80 83       	st	Z, r24
    2c5a:	09 c0       	rjmp	.+18     	; 0x2c6e <DIO_VidSetPortValue+0x74>
			break ;			
		case 2 : 
			PORTC = Copy_U8Val ;
    2c5c:	e5 e3       	ldi	r30, 0x35	; 53
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	80 83       	st	Z, r24
    2c64:	04 c0       	rjmp	.+8      	; 0x2c6e <DIO_VidSetPortValue+0x74>
			break ;  
		case 3 : 
			PORTD = Copy_U8Val ;
    2c66:	e2 e3       	ldi	r30, 0x32	; 50
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	80 83       	st	Z, r24
			break ; 
		}//end switch
}//end FUNC DIO_VidSetPortValue
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <DIO_VidTogglePinValue>:
void DIO_VidTogglePinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <DIO_VidTogglePinValue+0x6>
    2c82:	00 d0       	rcall	.+0      	; 0x2c84 <DIO_VidTogglePinValue+0x8>
    2c84:	cd b7       	in	r28, 0x3d	; 61
    2c86:	de b7       	in	r29, 0x3e	; 62
    2c88:	89 83       	std	Y+1, r24	; 0x01
    2c8a:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	28 2f       	mov	r18, r24
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	3c 83       	std	Y+4, r19	; 0x04
    2c94:	2b 83       	std	Y+3, r18	; 0x03
    2c96:	8b 81       	ldd	r24, Y+3	; 0x03
    2c98:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9a:	81 30       	cpi	r24, 0x01	; 1
    2c9c:	91 05       	cpc	r25, r1
    2c9e:	49 f1       	breq	.+82     	; 0x2cf2 <DIO_VidTogglePinValue+0x76>
    2ca0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ca2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ca4:	22 30       	cpi	r18, 0x02	; 2
    2ca6:	31 05       	cpc	r19, r1
    2ca8:	2c f4       	brge	.+10     	; 0x2cb4 <DIO_VidTogglePinValue+0x38>
    2caa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cac:	9c 81       	ldd	r25, Y+4	; 0x04
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	61 f0       	breq	.+24     	; 0x2cca <DIO_VidTogglePinValue+0x4e>
    2cb2:	5a c0       	rjmp	.+180    	; 0x2d68 <DIO_VidTogglePinValue+0xec>
    2cb4:	2b 81       	ldd	r18, Y+3	; 0x03
    2cb6:	3c 81       	ldd	r19, Y+4	; 0x04
    2cb8:	22 30       	cpi	r18, 0x02	; 2
    2cba:	31 05       	cpc	r19, r1
    2cbc:	71 f1       	breq	.+92     	; 0x2d1a <DIO_VidTogglePinValue+0x9e>
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc2:	83 30       	cpi	r24, 0x03	; 3
    2cc4:	91 05       	cpc	r25, r1
    2cc6:	e9 f1       	breq	.+122    	; 0x2d42 <DIO_VidTogglePinValue+0xc6>
    2cc8:	4f c0       	rjmp	.+158    	; 0x2d68 <DIO_VidTogglePinValue+0xec>
		case 0 : 
		    TOGGLE_BIT( PORTA , Copy_U8Pin ) ;
    2cca:	ab e3       	ldi	r26, 0x3B	; 59
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	eb e3       	ldi	r30, 0x3B	; 59
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	48 2f       	mov	r20, r24
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	02 2e       	mov	r0, r18
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <DIO_VidTogglePinValue+0x6c>
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	0a 94       	dec	r0
    2cea:	e2 f7       	brpl	.-8      	; 0x2ce4 <DIO_VidTogglePinValue+0x68>
    2cec:	84 27       	eor	r24, r20
    2cee:	8c 93       	st	X, r24
    2cf0:	3b c0       	rjmp	.+118    	; 0x2d68 <DIO_VidTogglePinValue+0xec>
			break ;  
		case 1 : 
			TOGGLE_BIT( PORTB , Copy_U8Pin ) ;
    2cf2:	a8 e3       	ldi	r26, 0x38	; 56
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	e8 e3       	ldi	r30, 0x38	; 56
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	48 2f       	mov	r20, r24
    2cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2d00:	28 2f       	mov	r18, r24
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	02 2e       	mov	r0, r18
    2d0a:	02 c0       	rjmp	.+4      	; 0x2d10 <DIO_VidTogglePinValue+0x94>
    2d0c:	88 0f       	add	r24, r24
    2d0e:	99 1f       	adc	r25, r25
    2d10:	0a 94       	dec	r0
    2d12:	e2 f7       	brpl	.-8      	; 0x2d0c <DIO_VidTogglePinValue+0x90>
    2d14:	84 27       	eor	r24, r20
    2d16:	8c 93       	st	X, r24
    2d18:	27 c0       	rjmp	.+78     	; 0x2d68 <DIO_VidTogglePinValue+0xec>
			break ;			
		case 2 : 
			TOGGLE_BIT( PORTC , Copy_U8Pin ) ;
    2d1a:	a5 e3       	ldi	r26, 0x35	; 53
    2d1c:	b0 e0       	ldi	r27, 0x00	; 0
    2d1e:	e5 e3       	ldi	r30, 0x35	; 53
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	80 81       	ld	r24, Z
    2d24:	48 2f       	mov	r20, r24
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	02 2e       	mov	r0, r18
    2d32:	02 c0       	rjmp	.+4      	; 0x2d38 <DIO_VidTogglePinValue+0xbc>
    2d34:	88 0f       	add	r24, r24
    2d36:	99 1f       	adc	r25, r25
    2d38:	0a 94       	dec	r0
    2d3a:	e2 f7       	brpl	.-8      	; 0x2d34 <DIO_VidTogglePinValue+0xb8>
    2d3c:	84 27       	eor	r24, r20
    2d3e:	8c 93       	st	X, r24
    2d40:	13 c0       	rjmp	.+38     	; 0x2d68 <DIO_VidTogglePinValue+0xec>
			break ;  
		case 3 : 
			TOGGLE_BIT( PORTD , Copy_U8Pin ) ;
    2d42:	a2 e3       	ldi	r26, 0x32	; 50
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	e2 e3       	ldi	r30, 0x32	; 50
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	48 2f       	mov	r20, r24
    2d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d50:	28 2f       	mov	r18, r24
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	02 2e       	mov	r0, r18
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <DIO_VidTogglePinValue+0xe4>
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	0a 94       	dec	r0
    2d62:	e2 f7       	brpl	.-8      	; 0x2d5c <DIO_VidTogglePinValue+0xe0>
    2d64:	84 27       	eor	r24, r20
    2d66:	8c 93       	st	X, r24
			break ; 
	}//end switch
}//end FUNC DIO_VidTogglePinValue
    2d68:	0f 90       	pop	r0
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	08 95       	ret

00002d76 <DIO_U8GetPinValue>:
u8 DIO_U8GetPinValue (u8 Copy_U8Port , u8 Copy_U8Pin ) {
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <DIO_U8GetPinValue+0x6>
    2d7c:	00 d0       	rcall	.+0      	; 0x2d7e <DIO_U8GetPinValue+0x8>
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <DIO_U8GetPinValue+0xa>
    2d80:	cd b7       	in	r28, 0x3d	; 61
    2d82:	de b7       	in	r29, 0x3e	; 62
    2d84:	89 83       	std	Y+1, r24	; 0x01
    2d86:	6a 83       	std	Y+2, r22	; 0x02
	switch ( Copy_U8Port ) {
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	28 2f       	mov	r18, r24
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	3d 83       	std	Y+5, r19	; 0x05
    2d90:	2c 83       	std	Y+4, r18	; 0x04
    2d92:	4c 81       	ldd	r20, Y+4	; 0x04
    2d94:	5d 81       	ldd	r21, Y+5	; 0x05
    2d96:	41 30       	cpi	r20, 0x01	; 1
    2d98:	51 05       	cpc	r21, r1
    2d9a:	49 f1       	breq	.+82     	; 0x2dee <DIO_U8GetPinValue+0x78>
    2d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2da0:	82 30       	cpi	r24, 0x02	; 2
    2da2:	91 05       	cpc	r25, r1
    2da4:	34 f4       	brge	.+12     	; 0x2db2 <DIO_U8GetPinValue+0x3c>
    2da6:	2c 81       	ldd	r18, Y+4	; 0x04
    2da8:	3d 81       	ldd	r19, Y+5	; 0x05
    2daa:	21 15       	cp	r18, r1
    2dac:	31 05       	cpc	r19, r1
    2dae:	61 f0       	breq	.+24     	; 0x2dc8 <DIO_U8GetPinValue+0x52>
    2db0:	57 c0       	rjmp	.+174    	; 0x2e60 <DIO_U8GetPinValue+0xea>
    2db2:	4c 81       	ldd	r20, Y+4	; 0x04
    2db4:	5d 81       	ldd	r21, Y+5	; 0x05
    2db6:	42 30       	cpi	r20, 0x02	; 2
    2db8:	51 05       	cpc	r21, r1
    2dba:	61 f1       	breq	.+88     	; 0x2e14 <DIO_U8GetPinValue+0x9e>
    2dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc0:	83 30       	cpi	r24, 0x03	; 3
    2dc2:	91 05       	cpc	r25, r1
    2dc4:	d1 f1       	breq	.+116    	; 0x2e3a <DIO_U8GetPinValue+0xc4>
    2dc6:	4c c0       	rjmp	.+152    	; 0x2e60 <DIO_U8GetPinValue+0xea>
		case 0 : 
		   return GET_BIT( PINA , Copy_U8Pin ) ;
    2dc8:	e9 e3       	ldi	r30, 0x39	; 57
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	28 2f       	mov	r18, r24
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd4:	88 2f       	mov	r24, r24
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	a9 01       	movw	r20, r18
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <DIO_U8GetPinValue+0x6a>
    2ddc:	55 95       	asr	r21
    2dde:	47 95       	ror	r20
    2de0:	8a 95       	dec	r24
    2de2:	e2 f7       	brpl	.-8      	; 0x2ddc <DIO_U8GetPinValue+0x66>
    2de4:	ca 01       	movw	r24, r20
    2de6:	58 2f       	mov	r21, r24
    2de8:	51 70       	andi	r21, 0x01	; 1
    2dea:	5b 83       	std	Y+3, r21	; 0x03
    2dec:	3a c0       	rjmp	.+116    	; 0x2e62 <DIO_U8GetPinValue+0xec>
		case 1 : 
			return GET_BIT( PINB , Copy_U8Pin ) ;
    2dee:	e6 e3       	ldi	r30, 0x36	; 54
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	80 81       	ld	r24, Z
    2df4:	28 2f       	mov	r18, r24
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	88 2f       	mov	r24, r24
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	a9 01       	movw	r20, r18
    2e00:	02 c0       	rjmp	.+4      	; 0x2e06 <DIO_U8GetPinValue+0x90>
    2e02:	55 95       	asr	r21
    2e04:	47 95       	ror	r20
    2e06:	8a 95       	dec	r24
    2e08:	e2 f7       	brpl	.-8      	; 0x2e02 <DIO_U8GetPinValue+0x8c>
    2e0a:	ca 01       	movw	r24, r20
    2e0c:	58 2f       	mov	r21, r24
    2e0e:	51 70       	andi	r21, 0x01	; 1
    2e10:	5b 83       	std	Y+3, r21	; 0x03
    2e12:	27 c0       	rjmp	.+78     	; 0x2e62 <DIO_U8GetPinValue+0xec>
		case 2 : 
			return GET_BIT( PINC , Copy_U8Pin ) ;
    2e14:	e3 e3       	ldi	r30, 0x33	; 51
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	88 2f       	mov	r24, r24
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	a9 01       	movw	r20, r18
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <DIO_U8GetPinValue+0xb6>
    2e28:	55 95       	asr	r21
    2e2a:	47 95       	ror	r20
    2e2c:	8a 95       	dec	r24
    2e2e:	e2 f7       	brpl	.-8      	; 0x2e28 <DIO_U8GetPinValue+0xb2>
    2e30:	ca 01       	movw	r24, r20
    2e32:	58 2f       	mov	r21, r24
    2e34:	51 70       	andi	r21, 0x01	; 1
    2e36:	5b 83       	std	Y+3, r21	; 0x03
    2e38:	14 c0       	rjmp	.+40     	; 0x2e62 <DIO_U8GetPinValue+0xec>
		case 3 : 
			return GET_BIT( PIND , Copy_U8Pin ) ;
    2e3a:	e0 e3       	ldi	r30, 0x30	; 48
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	28 2f       	mov	r18, r24
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	88 2f       	mov	r24, r24
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	a9 01       	movw	r20, r18
    2e4c:	02 c0       	rjmp	.+4      	; 0x2e52 <DIO_U8GetPinValue+0xdc>
    2e4e:	55 95       	asr	r21
    2e50:	47 95       	ror	r20
    2e52:	8a 95       	dec	r24
    2e54:	e2 f7       	brpl	.-8      	; 0x2e4e <DIO_U8GetPinValue+0xd8>
    2e56:	ca 01       	movw	r24, r20
    2e58:	58 2f       	mov	r21, r24
    2e5a:	51 70       	andi	r21, 0x01	; 1
    2e5c:	5b 83       	std	Y+3, r21	; 0x03
    2e5e:	01 c0       	rjmp	.+2      	; 0x2e62 <DIO_U8GetPinValue+0xec>
    2e60:	02 c0       	rjmp	.+4      	; 0x2e66 <DIO_U8GetPinValue+0xf0>
	}//end switch	
}//end FUNC DIO_VidU8PinValue 
    2e62:	8b 81       	ldd	r24, Y+3	; 0x03
    2e64:	8e 83       	std	Y+6, r24	; 0x06
    2e66:	8e 81       	ldd	r24, Y+6	; 0x06
    2e68:	26 96       	adiw	r28, 0x06	; 6
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	de bf       	out	0x3e, r29	; 62
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	cd bf       	out	0x3d, r28	; 61
    2e74:	cf 91       	pop	r28
    2e76:	df 91       	pop	r29
    2e78:	08 95       	ret

00002e7a <EX_INT_VidSetCallBack>:
static void (*INT1_PFUNC)(void) = 0 ;
static void (*INT2_PFUNC)(void) = 0 ;


//preferred to use this FUNC in line 1 in main code to avoid some problems in memory
void EX_INT_VidSetCallBack (u8 Copy_NumOfINT , void (*ptr)(void)){
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	00 d0       	rcall	.+0      	; 0x2e80 <EX_INT_VidSetCallBack+0x6>
    2e80:	00 d0       	rcall	.+0      	; 0x2e82 <EX_INT_VidSetCallBack+0x8>
    2e82:	0f 92       	push	r0
    2e84:	cd b7       	in	r28, 0x3d	; 61
    2e86:	de b7       	in	r29, 0x3e	; 62
    2e88:	89 83       	std	Y+1, r24	; 0x01
    2e8a:	7b 83       	std	Y+3, r23	; 0x03
    2e8c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_NumOfINT){
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
    2e90:	28 2f       	mov	r18, r24
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	3d 83       	std	Y+5, r19	; 0x05
    2e96:	2c 83       	std	Y+4, r18	; 0x04
    2e98:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9c:	81 30       	cpi	r24, 0x01	; 1
    2e9e:	91 05       	cpc	r25, r1
    2ea0:	81 f0       	breq	.+32     	; 0x2ec2 <EX_INT_VidSetCallBack+0x48>
    2ea2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ea4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ea6:	22 30       	cpi	r18, 0x02	; 2
    2ea8:	31 05       	cpc	r19, r1
    2eaa:	91 f0       	breq	.+36     	; 0x2ed0 <EX_INT_VidSetCallBack+0x56>
    2eac:	8c 81       	ldd	r24, Y+4	; 0x04
    2eae:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	a1 f4       	brne	.+40     	; 0x2edc <EX_INT_VidSetCallBack+0x62>
	case 0 :INT0_PFUNC = ptr ;             break ;
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb8:	90 93 74 01 	sts	0x0174, r25
    2ebc:	80 93 73 01 	sts	0x0173, r24
    2ec0:	0d c0       	rjmp	.+26     	; 0x2edc <EX_INT_VidSetCallBack+0x62>
	case 1 :INT1_PFUNC = ptr ;             break ;
    2ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ec6:	90 93 76 01 	sts	0x0176, r25
    2eca:	80 93 75 01 	sts	0x0175, r24
    2ece:	06 c0       	rjmp	.+12     	; 0x2edc <EX_INT_VidSetCallBack+0x62>
	case 2 :INT2_PFUNC = ptr ;             break ;
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed4:	90 93 78 01 	sts	0x0178, r25
    2ed8:	80 93 77 01 	sts	0x0177, r24
	}
}
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	08 95       	ret

00002eec <EX_INT_VidINIT>:
/**********************************************************/
void EX_INT_VidINIT(void){
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	cd b7       	in	r28, 0x3d	; 61
    2ef2:	de b7       	in	r29, 0x3e	; 62

#ifdef INT0       //to define edge of interrupt 0
    if (INT0_SENSE == LOW_LEVEL) {
    2ef4:	80 91 69 01 	lds	r24, 0x0169
    2ef8:	83 30       	cpi	r24, 0x03	; 3
    2efa:	79 f4       	brne	.+30     	; 0x2f1a <EX_INT_VidINIT+0x2e>
        //INT0 sense control = low level
    	CLR_BIT(MCUCR,ISC00);
    2efc:	a5 e5       	ldi	r26, 0x55	; 85
    2efe:	b0 e0       	ldi	r27, 0x00	; 0
    2f00:	e5 e5       	ldi	r30, 0x55	; 85
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	80 81       	ld	r24, Z
    2f06:	8e 7f       	andi	r24, 0xFE	; 254
    2f08:	8c 93       	st	X, r24
    	CLR_BIT(MCUCR,ISC01);
    2f0a:	a5 e5       	ldi	r26, 0x55	; 85
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e5 e5       	ldi	r30, 0x55	; 85
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	8d 7f       	andi	r24, 0xFD	; 253
    2f16:	8c 93       	st	X, r24
    2f18:	42 c0       	rjmp	.+132    	; 0x2f9e <EX_INT_VidINIT+0xb2>
    }
	else if (INT0_SENSE == CHANG_EDGE) {
    2f1a:	80 91 69 01 	lds	r24, 0x0169
    2f1e:	84 30       	cpi	r24, 0x04	; 4
    2f20:	79 f4       	brne	.+30     	; 0x2f40 <EX_INT_VidINIT+0x54>
		//INT0 sense control = change edge
    	SET_BIT(MCUCR,ISC00);
    2f22:	a5 e5       	ldi	r26, 0x55	; 85
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	e5 e5       	ldi	r30, 0x55	; 85
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	81 60       	ori	r24, 0x01	; 1
    2f2e:	8c 93       	st	X, r24
    	CLR_BIT(MCUCR,ISC01);
    2f30:	a5 e5       	ldi	r26, 0x55	; 85
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	e5 e5       	ldi	r30, 0x55	; 85
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	8d 7f       	andi	r24, 0xFD	; 253
    2f3c:	8c 93       	st	X, r24
    2f3e:	2f c0       	rjmp	.+94     	; 0x2f9e <EX_INT_VidINIT+0xb2>
    }
    else if (INT0_SENSE == FALLING){
    2f40:	80 91 69 01 	lds	r24, 0x0169
    2f44:	81 30       	cpi	r24, 0x01	; 1
    2f46:	c9 f4       	brne	.+50     	; 0x2f7a <EX_INT_VidINIT+0x8e>
		//INT0 sense control = falling edge
        DIO_VidSetPinDirection(PORTD,PD2,LOW);     //to define bit interrupt 0 as input
    2f48:	83 e0       	ldi	r24, 0x03	; 3
    2f4a:	62 e0       	ldi	r22, 0x02	; 2
    2f4c:	40 e0       	ldi	r20, 0x00	; 0
    2f4e:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>
        DIO_VidSetPinValue(PORTD,PD2,HIGH);        // pull up resistor on interrupt 0
    2f52:	83 e0       	ldi	r24, 0x03	; 3
    2f54:	62 e0       	ldi	r22, 0x02	; 2
    2f56:	41 e0       	ldi	r20, 0x01	; 1
    2f58:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		CLR_BIT(MCUCR,ISC00);
    2f5c:	a5 e5       	ldi	r26, 0x55	; 85
    2f5e:	b0 e0       	ldi	r27, 0x00	; 0
    2f60:	e5 e5       	ldi	r30, 0x55	; 85
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	80 81       	ld	r24, Z
    2f66:	8e 7f       	andi	r24, 0xFE	; 254
    2f68:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC01);
    2f6a:	a5 e5       	ldi	r26, 0x55	; 85
    2f6c:	b0 e0       	ldi	r27, 0x00	; 0
    2f6e:	e5 e5       	ldi	r30, 0x55	; 85
    2f70:	f0 e0       	ldi	r31, 0x00	; 0
    2f72:	80 81       	ld	r24, Z
    2f74:	82 60       	ori	r24, 0x02	; 2
    2f76:	8c 93       	st	X, r24
    2f78:	12 c0       	rjmp	.+36     	; 0x2f9e <EX_INT_VidINIT+0xb2>
    }
    else if (INT0_SENSE == RASING) {
    2f7a:	80 91 69 01 	lds	r24, 0x0169
    2f7e:	82 30       	cpi	r24, 0x02	; 2
    2f80:	71 f4       	brne	.+28     	; 0x2f9e <EX_INT_VidINIT+0xb2>
        //INT0 sense control = raising edge
    	SET_BIT(MCUCR,ISC00);
    2f82:	a5 e5       	ldi	r26, 0x55	; 85
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	e5 e5       	ldi	r30, 0x55	; 85
    2f88:	f0 e0       	ldi	r31, 0x00	; 0
    2f8a:	80 81       	ld	r24, Z
    2f8c:	81 60       	ori	r24, 0x01	; 1
    2f8e:	8c 93       	st	X, r24
        SET_BIT(MCUCR,ISC01);
    2f90:	a5 e5       	ldi	r26, 0x55	; 85
    2f92:	b0 e0       	ldi	r27, 0x00	; 0
    2f94:	e5 e5       	ldi	r30, 0x55	; 85
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	80 81       	ld	r24, Z
    2f9a:	82 60       	ori	r24, 0x02	; 2
    2f9c:	8c 93       	st	X, r24
    }
#endif

#ifdef INT1      //to define edge of interrupt 1
    if (INT1_SENSE == LOW_LEVEL) {
    2f9e:	80 91 6a 01 	lds	r24, 0x016A
    2fa2:	83 30       	cpi	r24, 0x03	; 3
    2fa4:	79 f4       	brne	.+30     	; 0x2fc4 <EX_INT_VidINIT+0xd8>
        //INT1 sense control = low level
    	CLR_BIT(MCUCR,ISC10);
    2fa6:	a5 e5       	ldi	r26, 0x55	; 85
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	e5 e5       	ldi	r30, 0x55	; 85
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	80 81       	ld	r24, Z
    2fb0:	8b 7f       	andi	r24, 0xFB	; 251
    2fb2:	8c 93       	st	X, r24
    	CLR_BIT(MCUCR,ISC11);
    2fb4:	a5 e5       	ldi	r26, 0x55	; 85
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	e5 e5       	ldi	r30, 0x55	; 85
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	87 7f       	andi	r24, 0xF7	; 247
    2fc0:	8c 93       	st	X, r24
    2fc2:	42 c0       	rjmp	.+132    	; 0x3048 <EX_INT_VidINIT+0x15c>
    }
	else if (INT1_SENSE == CHANG_EDGE) {
    2fc4:	80 91 6a 01 	lds	r24, 0x016A
    2fc8:	84 30       	cpi	r24, 0x04	; 4
    2fca:	79 f4       	brne	.+30     	; 0x2fea <EX_INT_VidINIT+0xfe>
		//INT1 sense control = change edge
    	SET_BIT(MCUCR,ISC10);
    2fcc:	a5 e5       	ldi	r26, 0x55	; 85
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	e5 e5       	ldi	r30, 0x55	; 85
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	80 81       	ld	r24, Z
    2fd6:	84 60       	ori	r24, 0x04	; 4
    2fd8:	8c 93       	st	X, r24
    	CLR_BIT(MCUCR,ISC11);
    2fda:	a5 e5       	ldi	r26, 0x55	; 85
    2fdc:	b0 e0       	ldi	r27, 0x00	; 0
    2fde:	e5 e5       	ldi	r30, 0x55	; 85
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	80 81       	ld	r24, Z
    2fe4:	87 7f       	andi	r24, 0xF7	; 247
    2fe6:	8c 93       	st	X, r24
    2fe8:	2f c0       	rjmp	.+94     	; 0x3048 <EX_INT_VidINIT+0x15c>
    }
    else if (INT1_SENSE == FALLING){
    2fea:	80 91 6a 01 	lds	r24, 0x016A
    2fee:	81 30       	cpi	r24, 0x01	; 1
    2ff0:	c9 f4       	brne	.+50     	; 0x3024 <EX_INT_VidINIT+0x138>
		//INT1 sense control = falling edge
        DIO_VidSetPinDirection(PORTD,PD3,LOW);     //to define bit interrupt 1 as input
    2ff2:	83 e0       	ldi	r24, 0x03	; 3
    2ff4:	63 e0       	ldi	r22, 0x03	; 3
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>
        DIO_VidSetPinValue(PORTD,PD3,HIGH);        // pull up resistor on interrupt 1
    2ffc:	83 e0       	ldi	r24, 0x03	; 3
    2ffe:	63 e0       	ldi	r22, 0x03	; 3
    3000:	41 e0       	ldi	r20, 0x01	; 1
    3002:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		CLR_BIT(MCUCR,ISC10);
    3006:	a5 e5       	ldi	r26, 0x55	; 85
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	e5 e5       	ldi	r30, 0x55	; 85
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	80 81       	ld	r24, Z
    3010:	8b 7f       	andi	r24, 0xFB	; 251
    3012:	8c 93       	st	X, r24
		SET_BIT(MCUCR,ISC11);
    3014:	a5 e5       	ldi	r26, 0x55	; 85
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	e5 e5       	ldi	r30, 0x55	; 85
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	88 60       	ori	r24, 0x08	; 8
    3020:	8c 93       	st	X, r24
    3022:	12 c0       	rjmp	.+36     	; 0x3048 <EX_INT_VidINIT+0x15c>
    }
    else if (INT1_SENSE == RASING) {
    3024:	80 91 6a 01 	lds	r24, 0x016A
    3028:	82 30       	cpi	r24, 0x02	; 2
    302a:	71 f4       	brne	.+28     	; 0x3048 <EX_INT_VidINIT+0x15c>
        //INT1 sense control = raising edge
    	SET_BIT(MCUCR,ISC10);
    302c:	a5 e5       	ldi	r26, 0x55	; 85
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	e5 e5       	ldi	r30, 0x55	; 85
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	84 60       	ori	r24, 0x04	; 4
    3038:	8c 93       	st	X, r24
        SET_BIT(MCUCR,ISC11);
    303a:	a5 e5       	ldi	r26, 0x55	; 85
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	e5 e5       	ldi	r30, 0x55	; 85
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	88 60       	ori	r24, 0x08	; 8
    3046:	8c 93       	st	X, r24
    }
#endif

#ifdef INT2      //to define edge of interrupt 2
    if (INT2_SENSE == FALLING){
    3048:	80 91 6b 01 	lds	r24, 0x016B
    304c:	81 30       	cpi	r24, 0x01	; 1
    304e:	91 f4       	brne	.+36     	; 0x3074 <EX_INT_VidINIT+0x188>
        DIO_VidSetPinDirection(PORTB,PB2,LOW);     //to define bit interrupt 2 as input
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	62 e0       	ldi	r22, 0x02	; 2
    3054:	40 e0       	ldi	r20, 0x00	; 0
    3056:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>
        DIO_VidSetPinValue(PORTB,PB2,HIGH);        // pull up resistor on interrupt 2
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	62 e0       	ldi	r22, 0x02	; 2
    305e:	41 e0       	ldi	r20, 0x01	; 1
    3060:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
		CLR_BIT(MCUCSR,ISC2);		//INT2 sense control = falling edge
    3064:	a4 e5       	ldi	r26, 0x54	; 84
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	e4 e5       	ldi	r30, 0x54	; 84
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	8f 7b       	andi	r24, 0xBF	; 191
    3070:	8c 93       	st	X, r24
    3072:	0b c0       	rjmp	.+22     	; 0x308a <EX_INT_VidINIT+0x19e>
    }
    else if (INT2_SENSE == RASING) {
    3074:	80 91 6b 01 	lds	r24, 0x016B
    3078:	82 30       	cpi	r24, 0x02	; 2
    307a:	39 f4       	brne	.+14     	; 0x308a <EX_INT_VidINIT+0x19e>
    	SET_BIT(MCUCSR,ISC2);        //INT2 sense control = raising edge
    307c:	a4 e5       	ldi	r26, 0x54	; 84
    307e:	b0 e0       	ldi	r27, 0x00	; 0
    3080:	e4 e5       	ldi	r30, 0x54	; 84
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	80 81       	ld	r24, Z
    3086:	80 64       	ori	r24, 0x40	; 64
    3088:	8c 93       	st	X, r24
    }
#endif

}
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <EX_PIE_VidEnable>:

/**********************************************************/
void EX_PIE_VidEnable(u8 COPY_U8INT_NUM){
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	00 d0       	rcall	.+0      	; 0x3096 <EX_PIE_VidEnable+0x6>
    3096:	0f 92       	push	r0
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	89 83       	std	Y+1, r24	; 0x01
	switch(COPY_U8INT_NUM) {
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	28 2f       	mov	r18, r24
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	3b 83       	std	Y+3, r19	; 0x03
    30a6:	2a 83       	std	Y+2, r18	; 0x02
    30a8:	8a 81       	ldd	r24, Y+2	; 0x02
    30aa:	9b 81       	ldd	r25, Y+3	; 0x03
    30ac:	81 30       	cpi	r24, 0x01	; 1
    30ae:	91 05       	cpc	r25, r1
    30b0:	89 f0       	breq	.+34     	; 0x30d4 <EX_PIE_VidEnable+0x44>
    30b2:	2a 81       	ldd	r18, Y+2	; 0x02
    30b4:	3b 81       	ldd	r19, Y+3	; 0x03
    30b6:	22 30       	cpi	r18, 0x02	; 2
    30b8:	31 05       	cpc	r19, r1
    30ba:	a1 f0       	breq	.+40     	; 0x30e4 <EX_PIE_VidEnable+0x54>
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	9b 81       	ldd	r25, Y+3	; 0x03
    30c0:	00 97       	sbiw	r24, 0x00	; 0
    30c2:	b9 f4       	brne	.+46     	; 0x30f2 <EX_PIE_VidEnable+0x62>
	case 0 : SET_BIT(GICR,INT0);  break ;   //INT0 Enable
    30c4:	ab e5       	ldi	r26, 0x5B	; 91
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	eb e5       	ldi	r30, 0x5B	; 91
    30ca:	f0 e0       	ldi	r31, 0x00	; 0
    30cc:	80 81       	ld	r24, Z
    30ce:	80 64       	ori	r24, 0x40	; 64
    30d0:	8c 93       	st	X, r24
    30d2:	0f c0       	rjmp	.+30     	; 0x30f2 <EX_PIE_VidEnable+0x62>
	case 1 : SET_BIT(GICR,INT1);  break ;   //INT1 Enable
    30d4:	ab e5       	ldi	r26, 0x5B	; 91
    30d6:	b0 e0       	ldi	r27, 0x00	; 0
    30d8:	eb e5       	ldi	r30, 0x5B	; 91
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 81       	ld	r24, Z
    30de:	80 68       	ori	r24, 0x80	; 128
    30e0:	8c 93       	st	X, r24
    30e2:	07 c0       	rjmp	.+14     	; 0x30f2 <EX_PIE_VidEnable+0x62>
	case 2 : SET_BIT(GICR,INT2);  break ;   //INT2 Enable
    30e4:	ab e5       	ldi	r26, 0x5B	; 91
    30e6:	b0 e0       	ldi	r27, 0x00	; 0
    30e8:	eb e5       	ldi	r30, 0x5B	; 91
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	80 62       	ori	r24, 0x20	; 32
    30f0:	8c 93       	st	X, r24
	}
}
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	08 95       	ret

000030fe <EX_PIE_VidDisable>:

void EX_PIE_VidDisable(u8 COPY_U8INT_NUM){
    30fe:	df 93       	push	r29
    3100:	cf 93       	push	r28
    3102:	00 d0       	rcall	.+0      	; 0x3104 <EX_PIE_VidDisable+0x6>
    3104:	0f 92       	push	r0
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	89 83       	std	Y+1, r24	; 0x01
	switch(COPY_U8INT_NUM) {
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	28 2f       	mov	r18, r24
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	3b 83       	std	Y+3, r19	; 0x03
    3114:	2a 83       	std	Y+2, r18	; 0x02
    3116:	8a 81       	ldd	r24, Y+2	; 0x02
    3118:	9b 81       	ldd	r25, Y+3	; 0x03
    311a:	81 30       	cpi	r24, 0x01	; 1
    311c:	91 05       	cpc	r25, r1
    311e:	89 f0       	breq	.+34     	; 0x3142 <EX_PIE_VidDisable+0x44>
    3120:	2a 81       	ldd	r18, Y+2	; 0x02
    3122:	3b 81       	ldd	r19, Y+3	; 0x03
    3124:	22 30       	cpi	r18, 0x02	; 2
    3126:	31 05       	cpc	r19, r1
    3128:	a1 f0       	breq	.+40     	; 0x3152 <EX_PIE_VidDisable+0x54>
    312a:	8a 81       	ldd	r24, Y+2	; 0x02
    312c:	9b 81       	ldd	r25, Y+3	; 0x03
    312e:	00 97       	sbiw	r24, 0x00	; 0
    3130:	b9 f4       	brne	.+46     	; 0x3160 <EX_PIE_VidDisable+0x62>
	case 0 : CLR_BIT(GICR,INT0);  break ;   //INT0 Enable
    3132:	ab e5       	ldi	r26, 0x5B	; 91
    3134:	b0 e0       	ldi	r27, 0x00	; 0
    3136:	eb e5       	ldi	r30, 0x5B	; 91
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	8f 7b       	andi	r24, 0xBF	; 191
    313e:	8c 93       	st	X, r24
    3140:	0f c0       	rjmp	.+30     	; 0x3160 <EX_PIE_VidDisable+0x62>
	case 1 : CLR_BIT(GICR,INT1);  break ;   //INT1 Enable
    3142:	ab e5       	ldi	r26, 0x5B	; 91
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	eb e5       	ldi	r30, 0x5B	; 91
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	8f 77       	andi	r24, 0x7F	; 127
    314e:	8c 93       	st	X, r24
    3150:	07 c0       	rjmp	.+14     	; 0x3160 <EX_PIE_VidDisable+0x62>
	case 2 : CLR_BIT(GICR,INT2);  break ;   //INT2 Enable
    3152:	ab e5       	ldi	r26, 0x5B	; 91
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	eb e5       	ldi	r30, 0x5B	; 91
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	8f 7d       	andi	r24, 0xDF	; 223
    315e:	8c 93       	st	X, r24
	}
}
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	cf 91       	pop	r28
    3168:	df 91       	pop	r29
    316a:	08 95       	ret

0000316c <__vector_1>:

/**********************************************************/
void __vector_1(void){
    316c:	1f 92       	push	r1
    316e:	0f 92       	push	r0
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	0f 92       	push	r0
    3174:	11 24       	eor	r1, r1
    3176:	2f 93       	push	r18
    3178:	3f 93       	push	r19
    317a:	4f 93       	push	r20
    317c:	5f 93       	push	r21
    317e:	6f 93       	push	r22
    3180:	7f 93       	push	r23
    3182:	8f 93       	push	r24
    3184:	9f 93       	push	r25
    3186:	af 93       	push	r26
    3188:	bf 93       	push	r27
    318a:	ef 93       	push	r30
    318c:	ff 93       	push	r31
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
	//to toggle led
	INT0_PFUNC();
    3196:	e0 91 73 01 	lds	r30, 0x0173
    319a:	f0 91 74 01 	lds	r31, 0x0174
    319e:	09 95       	icall
}
    31a0:	cf 91       	pop	r28
    31a2:	df 91       	pop	r29
    31a4:	ff 91       	pop	r31
    31a6:	ef 91       	pop	r30
    31a8:	bf 91       	pop	r27
    31aa:	af 91       	pop	r26
    31ac:	9f 91       	pop	r25
    31ae:	8f 91       	pop	r24
    31b0:	7f 91       	pop	r23
    31b2:	6f 91       	pop	r22
    31b4:	5f 91       	pop	r21
    31b6:	4f 91       	pop	r20
    31b8:	3f 91       	pop	r19
    31ba:	2f 91       	pop	r18
    31bc:	0f 90       	pop	r0
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	0f 90       	pop	r0
    31c2:	1f 90       	pop	r1
    31c4:	18 95       	reti

000031c6 <__vector_2>:

void __vector_2(void){
    31c6:	1f 92       	push	r1
    31c8:	0f 92       	push	r0
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	0f 92       	push	r0
    31ce:	11 24       	eor	r1, r1
    31d0:	2f 93       	push	r18
    31d2:	3f 93       	push	r19
    31d4:	4f 93       	push	r20
    31d6:	5f 93       	push	r21
    31d8:	6f 93       	push	r22
    31da:	7f 93       	push	r23
    31dc:	8f 93       	push	r24
    31de:	9f 93       	push	r25
    31e0:	af 93       	push	r26
    31e2:	bf 93       	push	r27
    31e4:	ef 93       	push	r30
    31e6:	ff 93       	push	r31
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	cd b7       	in	r28, 0x3d	; 61
    31ee:	de b7       	in	r29, 0x3e	; 62
	//to toggle led
	INT1_PFUNC();
    31f0:	e0 91 75 01 	lds	r30, 0x0175
    31f4:	f0 91 76 01 	lds	r31, 0x0176
    31f8:	09 95       	icall
}
    31fa:	cf 91       	pop	r28
    31fc:	df 91       	pop	r29
    31fe:	ff 91       	pop	r31
    3200:	ef 91       	pop	r30
    3202:	bf 91       	pop	r27
    3204:	af 91       	pop	r26
    3206:	9f 91       	pop	r25
    3208:	8f 91       	pop	r24
    320a:	7f 91       	pop	r23
    320c:	6f 91       	pop	r22
    320e:	5f 91       	pop	r21
    3210:	4f 91       	pop	r20
    3212:	3f 91       	pop	r19
    3214:	2f 91       	pop	r18
    3216:	0f 90       	pop	r0
    3218:	0f be       	out	0x3f, r0	; 63
    321a:	0f 90       	pop	r0
    321c:	1f 90       	pop	r1
    321e:	18 95       	reti

00003220 <__vector_3>:

void __vector_3(void){
    3220:	1f 92       	push	r1
    3222:	0f 92       	push	r0
    3224:	0f b6       	in	r0, 0x3f	; 63
    3226:	0f 92       	push	r0
    3228:	11 24       	eor	r1, r1
    322a:	2f 93       	push	r18
    322c:	3f 93       	push	r19
    322e:	4f 93       	push	r20
    3230:	5f 93       	push	r21
    3232:	6f 93       	push	r22
    3234:	7f 93       	push	r23
    3236:	8f 93       	push	r24
    3238:	9f 93       	push	r25
    323a:	af 93       	push	r26
    323c:	bf 93       	push	r27
    323e:	ef 93       	push	r30
    3240:	ff 93       	push	r31
    3242:	df 93       	push	r29
    3244:	cf 93       	push	r28
    3246:	cd b7       	in	r28, 0x3d	; 61
    3248:	de b7       	in	r29, 0x3e	; 62
	//to toggle led
	INT2_PFUNC();
    324a:	e0 91 77 01 	lds	r30, 0x0177
    324e:	f0 91 78 01 	lds	r31, 0x0178
    3252:	09 95       	icall
}
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	ff 91       	pop	r31
    325a:	ef 91       	pop	r30
    325c:	bf 91       	pop	r27
    325e:	af 91       	pop	r26
    3260:	9f 91       	pop	r25
    3262:	8f 91       	pop	r24
    3264:	7f 91       	pop	r23
    3266:	6f 91       	pop	r22
    3268:	5f 91       	pop	r21
    326a:	4f 91       	pop	r20
    326c:	3f 91       	pop	r19
    326e:	2f 91       	pop	r18
    3270:	0f 90       	pop	r0
    3272:	0f be       	out	0x3f, r0	; 63
    3274:	0f 90       	pop	r0
    3276:	1f 90       	pop	r1
    3278:	18 95       	reti

0000327a <EX_INT_VidSetEdge>:

void EX_INT_VidSetEdge(u8 COPY_U8INT_NUM , u8 COPY_U8INT_EDGE){
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	00 d0       	rcall	.+0      	; 0x3280 <EX_INT_VidSetEdge+0x6>
    3280:	00 d0       	rcall	.+0      	; 0x3282 <EX_INT_VidSetEdge+0x8>
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	89 83       	std	Y+1, r24	; 0x01
    3288:	6a 83       	std	Y+2, r22	; 0x02
	switch (COPY_U8INT_EDGE){
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	3c 83       	std	Y+4, r19	; 0x04
    3292:	2b 83       	std	Y+3, r18	; 0x03
    3294:	8b 81       	ldd	r24, Y+3	; 0x03
    3296:	9c 81       	ldd	r25, Y+4	; 0x04
    3298:	82 30       	cpi	r24, 0x02	; 2
    329a:	91 05       	cpc	r25, r1
    329c:	09 f4       	brne	.+2      	; 0x32a0 <EX_INT_VidSetEdge+0x26>
    329e:	64 c0       	rjmp	.+200    	; 0x3368 <EX_INT_VidSetEdge+0xee>
    32a0:	2b 81       	ldd	r18, Y+3	; 0x03
    32a2:	3c 81       	ldd	r19, Y+4	; 0x04
    32a4:	23 30       	cpi	r18, 0x03	; 3
    32a6:	31 05       	cpc	r19, r1
    32a8:	34 f4       	brge	.+12     	; 0x32b6 <EX_INT_VidSetEdge+0x3c>
    32aa:	8b 81       	ldd	r24, Y+3	; 0x03
    32ac:	9c 81       	ldd	r25, Y+4	; 0x04
    32ae:	81 30       	cpi	r24, 0x01	; 1
    32b0:	91 05       	cpc	r25, r1
    32b2:	71 f0       	breq	.+28     	; 0x32d0 <EX_INT_VidSetEdge+0x56>
    32b4:	cc c0       	rjmp	.+408    	; 0x344e <EX_INT_VidSetEdge+0x1d4>
    32b6:	2b 81       	ldd	r18, Y+3	; 0x03
    32b8:	3c 81       	ldd	r19, Y+4	; 0x04
    32ba:	23 30       	cpi	r18, 0x03	; 3
    32bc:	31 05       	cpc	r19, r1
    32be:	09 f4       	brne	.+2      	; 0x32c2 <EX_INT_VidSetEdge+0x48>
    32c0:	81 c0       	rjmp	.+258    	; 0x33c4 <EX_INT_VidSetEdge+0x14a>
    32c2:	8b 81       	ldd	r24, Y+3	; 0x03
    32c4:	9c 81       	ldd	r25, Y+4	; 0x04
    32c6:	84 30       	cpi	r24, 0x04	; 4
    32c8:	91 05       	cpc	r25, r1
    32ca:	09 f4       	brne	.+2      	; 0x32ce <EX_INT_VidSetEdge+0x54>
    32cc:	9e c0       	rjmp	.+316    	; 0x340a <EX_INT_VidSetEdge+0x190>
    32ce:	bf c0       	rjmp	.+382    	; 0x344e <EX_INT_VidSetEdge+0x1d4>
	case 1 :
		if (COPY_U8INT_NUM == 0 ){
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	88 23       	and	r24, r24
    32d4:	c1 f4       	brne	.+48     	; 0x3306 <EX_INT_VidSetEdge+0x8c>
			//INT0 sense control = falling edge
	        DIO_VidSetPinDirection(PORTD,PD2,LOW);     //to define bit interrupt 0 as input
    32d6:	83 e0       	ldi	r24, 0x03	; 3
    32d8:	62 e0       	ldi	r22, 0x02	; 2
    32da:	40 e0       	ldi	r20, 0x00	; 0
    32dc:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>
	        DIO_VidSetPinValue(PORTD,PD2,HIGH);        // pull up resistor on interrupt 0
    32e0:	83 e0       	ldi	r24, 0x03	; 3
    32e2:	62 e0       	ldi	r22, 0x02	; 2
    32e4:	41 e0       	ldi	r20, 0x01	; 1
    32e6:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
			CLR_BIT(MCUCR,ISC00);
    32ea:	a5 e5       	ldi	r26, 0x55	; 85
    32ec:	b0 e0       	ldi	r27, 0x00	; 0
    32ee:	e5 e5       	ldi	r30, 0x55	; 85
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	80 81       	ld	r24, Z
    32f4:	8e 7f       	andi	r24, 0xFE	; 254
    32f6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC01);
    32f8:	a5 e5       	ldi	r26, 0x55	; 85
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	e5 e5       	ldi	r30, 0x55	; 85
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	80 81       	ld	r24, Z
    3302:	82 60       	ori	r24, 0x02	; 2
    3304:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 1 ){
    3306:	89 81       	ldd	r24, Y+1	; 0x01
    3308:	81 30       	cpi	r24, 0x01	; 1
    330a:	c1 f4       	brne	.+48     	; 0x333c <EX_INT_VidSetEdge+0xc2>
			//INT1 sense control = falling edge
	        DIO_VidSetPinDirection(PORTD,PD3,LOW);     //to define bit interrupt 1 as input
    330c:	83 e0       	ldi	r24, 0x03	; 3
    330e:	63 e0       	ldi	r22, 0x03	; 3
    3310:	40 e0       	ldi	r20, 0x00	; 0
    3312:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>
	        DIO_VidSetPinValue(PORTD,PD3,HIGH);        // pull up resistor on interrupt 1
    3316:	83 e0       	ldi	r24, 0x03	; 3
    3318:	63 e0       	ldi	r22, 0x03	; 3
    331a:	41 e0       	ldi	r20, 0x01	; 1
    331c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
			CLR_BIT(MCUCR,ISC10);
    3320:	a5 e5       	ldi	r26, 0x55	; 85
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	e5 e5       	ldi	r30, 0x55	; 85
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	8b 7f       	andi	r24, 0xFB	; 251
    332c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC11);
    332e:	a5 e5       	ldi	r26, 0x55	; 85
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	e5 e5       	ldi	r30, 0x55	; 85
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	80 81       	ld	r24, Z
    3338:	88 60       	ori	r24, 0x08	; 8
    333a:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 2 ){
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	82 30       	cpi	r24, 0x02	; 2
    3340:	09 f0       	breq	.+2      	; 0x3344 <EX_INT_VidSetEdge+0xca>
    3342:	85 c0       	rjmp	.+266    	; 0x344e <EX_INT_VidSetEdge+0x1d4>
	        DIO_VidSetPinDirection(PORTB,PB2,LOW);     //to define bit interrupt 2 as input
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	62 e0       	ldi	r22, 0x02	; 2
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>
	        DIO_VidSetPinValue(PORTB,PB2,HIGH);        // pull up resistor on interrupt 2
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	62 e0       	ldi	r22, 0x02	; 2
    3352:	41 e0       	ldi	r20, 0x01	; 1
    3354:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>
			CLR_BIT(MCUCSR,ISC2);		//INT2 sense control = falling edge
    3358:	a4 e5       	ldi	r26, 0x54	; 84
    335a:	b0 e0       	ldi	r27, 0x00	; 0
    335c:	e4 e5       	ldi	r30, 0x54	; 84
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
    3362:	8f 7b       	andi	r24, 0xBF	; 191
    3364:	8c 93       	st	X, r24
    3366:	73 c0       	rjmp	.+230    	; 0x344e <EX_INT_VidSetEdge+0x1d4>
		}
		break ;
	case 2 :
		if (COPY_U8INT_NUM == 0 ){
    3368:	89 81       	ldd	r24, Y+1	; 0x01
    336a:	88 23       	and	r24, r24
    336c:	71 f4       	brne	.+28     	; 0x338a <EX_INT_VidSetEdge+0x110>
	        //INT0 sense control = raising edge
	    	SET_BIT(MCUCR,ISC00);
    336e:	a5 e5       	ldi	r26, 0x55	; 85
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	e5 e5       	ldi	r30, 0x55	; 85
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	81 60       	ori	r24, 0x01	; 1
    337a:	8c 93       	st	X, r24
	        SET_BIT(MCUCR,ISC01);
    337c:	a5 e5       	ldi	r26, 0x55	; 85
    337e:	b0 e0       	ldi	r27, 0x00	; 0
    3380:	e5 e5       	ldi	r30, 0x55	; 85
    3382:	f0 e0       	ldi	r31, 0x00	; 0
    3384:	80 81       	ld	r24, Z
    3386:	82 60       	ori	r24, 0x02	; 2
    3388:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 1 ){
    338a:	89 81       	ldd	r24, Y+1	; 0x01
    338c:	81 30       	cpi	r24, 0x01	; 1
    338e:	71 f4       	brne	.+28     	; 0x33ac <EX_INT_VidSetEdge+0x132>
	        //INT1 sense control = raising edge
	    	SET_BIT(MCUCR,ISC10);
    3390:	a5 e5       	ldi	r26, 0x55	; 85
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	e5 e5       	ldi	r30, 0x55	; 85
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	84 60       	ori	r24, 0x04	; 4
    339c:	8c 93       	st	X, r24
	        SET_BIT(MCUCR,ISC11);
    339e:	a5 e5       	ldi	r26, 0x55	; 85
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	e5 e5       	ldi	r30, 0x55	; 85
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 81       	ld	r24, Z
    33a8:	88 60       	ori	r24, 0x08	; 8
    33aa:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 2 ){
    33ac:	89 81       	ldd	r24, Y+1	; 0x01
    33ae:	82 30       	cpi	r24, 0x02	; 2
    33b0:	09 f0       	breq	.+2      	; 0x33b4 <EX_INT_VidSetEdge+0x13a>
    33b2:	4d c0       	rjmp	.+154    	; 0x344e <EX_INT_VidSetEdge+0x1d4>
	    	SET_BIT(MCUCSR,ISC2);        //INT2 sense control = raising edge
    33b4:	a4 e5       	ldi	r26, 0x54	; 84
    33b6:	b0 e0       	ldi	r27, 0x00	; 0
    33b8:	e4 e5       	ldi	r30, 0x54	; 84
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	80 81       	ld	r24, Z
    33be:	80 64       	ori	r24, 0x40	; 64
    33c0:	8c 93       	st	X, r24
    33c2:	45 c0       	rjmp	.+138    	; 0x344e <EX_INT_VidSetEdge+0x1d4>
		}
	    break ;
	case 3 :
		if (COPY_U8INT_NUM == 0 ){
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	88 23       	and	r24, r24
    33c8:	71 f4       	brne	.+28     	; 0x33e6 <EX_INT_VidSetEdge+0x16c>
			//INT0 sense control = low level
	    	CLR_BIT(MCUCR,ISC00);
    33ca:	a5 e5       	ldi	r26, 0x55	; 85
    33cc:	b0 e0       	ldi	r27, 0x00	; 0
    33ce:	e5 e5       	ldi	r30, 0x55	; 85
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	80 81       	ld	r24, Z
    33d4:	8e 7f       	andi	r24, 0xFE	; 254
    33d6:	8c 93       	st	X, r24
	    	CLR_BIT(MCUCR,ISC01);
    33d8:	a5 e5       	ldi	r26, 0x55	; 85
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	e5 e5       	ldi	r30, 0x55	; 85
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	8d 7f       	andi	r24, 0xFD	; 253
    33e4:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 1 ){
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	81 30       	cpi	r24, 0x01	; 1
    33ea:	89 f5       	brne	.+98     	; 0x344e <EX_INT_VidSetEdge+0x1d4>
	        //INT1 sense control = low level
	    	CLR_BIT(MCUCR,ISC10);
    33ec:	a5 e5       	ldi	r26, 0x55	; 85
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	e5 e5       	ldi	r30, 0x55	; 85
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	8b 7f       	andi	r24, 0xFB	; 251
    33f8:	8c 93       	st	X, r24
	    	CLR_BIT(MCUCR,ISC11);
    33fa:	a5 e5       	ldi	r26, 0x55	; 85
    33fc:	b0 e0       	ldi	r27, 0x00	; 0
    33fe:	e5 e5       	ldi	r30, 0x55	; 85
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	80 81       	ld	r24, Z
    3404:	87 7f       	andi	r24, 0xF7	; 247
    3406:	8c 93       	st	X, r24
    3408:	22 c0       	rjmp	.+68     	; 0x344e <EX_INT_VidSetEdge+0x1d4>
		}
		break ;
	case 4 :
		if (COPY_U8INT_NUM == 0 ){
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	88 23       	and	r24, r24
    340e:	71 f4       	brne	.+28     	; 0x342c <EX_INT_VidSetEdge+0x1b2>
			//INT0 sense control = change edge
	    	SET_BIT(MCUCR,ISC00);
    3410:	a5 e5       	ldi	r26, 0x55	; 85
    3412:	b0 e0       	ldi	r27, 0x00	; 0
    3414:	e5 e5       	ldi	r30, 0x55	; 85
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	80 81       	ld	r24, Z
    341a:	81 60       	ori	r24, 0x01	; 1
    341c:	8c 93       	st	X, r24
	    	CLR_BIT(MCUCR,ISC01);
    341e:	a5 e5       	ldi	r26, 0x55	; 85
    3420:	b0 e0       	ldi	r27, 0x00	; 0
    3422:	e5 e5       	ldi	r30, 0x55	; 85
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	80 81       	ld	r24, Z
    3428:	8d 7f       	andi	r24, 0xFD	; 253
    342a:	8c 93       	st	X, r24
		}
		if (COPY_U8INT_NUM == 1 ){
    342c:	89 81       	ldd	r24, Y+1	; 0x01
    342e:	81 30       	cpi	r24, 0x01	; 1
    3430:	71 f4       	brne	.+28     	; 0x344e <EX_INT_VidSetEdge+0x1d4>
			//INT1 sense control = change edge
	    	SET_BIT(MCUCR,ISC10);
    3432:	a5 e5       	ldi	r26, 0x55	; 85
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	e5 e5       	ldi	r30, 0x55	; 85
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	80 81       	ld	r24, Z
    343c:	84 60       	ori	r24, 0x04	; 4
    343e:	8c 93       	st	X, r24
	    	CLR_BIT(MCUCR,ISC11);
    3440:	a5 e5       	ldi	r26, 0x55	; 85
    3442:	b0 e0       	ldi	r27, 0x00	; 0
    3444:	e5 e5       	ldi	r30, 0x55	; 85
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	80 81       	ld	r24, Z
    344a:	87 7f       	andi	r24, 0xF7	; 247
    344c:	8c 93       	st	X, r24
		}
		break ;
	}
}
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	0f 90       	pop	r0
    3456:	cf 91       	pop	r28
    3458:	df 91       	pop	r29
    345a:	08 95       	ret

0000345c <GIE_VidEnable>:
#include"BIT_MATH.h"
#include "DIO_interface.h"
#include "INTERRUPT_Interface.h"
#include "INTERRUPT_private.h"

void GIE_VidEnable (void){
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
	//to enable general interrupt
	SET_BIT(SREG,I_BIT);
    3464:	af e5       	ldi	r26, 0x5F	; 95
    3466:	b0 e0       	ldi	r27, 0x00	; 0
    3468:	ef e5       	ldi	r30, 0x5F	; 95
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	80 81       	ld	r24, Z
    346e:	80 68       	ori	r24, 0x80	; 128
    3470:	8c 93       	st	X, r24
}
    3472:	cf 91       	pop	r28
    3474:	df 91       	pop	r29
    3476:	08 95       	ret

00003478 <GIE_VidDisable>:

void GIE_VidDisable (void){
    3478:	df 93       	push	r29
    347a:	cf 93       	push	r28
    347c:	cd b7       	in	r28, 0x3d	; 61
    347e:	de b7       	in	r29, 0x3e	; 62
	//to disable general interrupt
	CLR_BIT(SREG,I_BIT);
    3480:	af e5       	ldi	r26, 0x5F	; 95
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	ef e5       	ldi	r30, 0x5F	; 95
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	8f 77       	andi	r24, 0x7F	; 127
    348c:	8c 93       	st	X, r24
}
    348e:	cf 91       	pop	r28
    3490:	df 91       	pop	r29
    3492:	08 95       	ret

00003494 <SERVOMOTOR_VidSetDirection>:
#define OC1A_PIN 5
#define OC1B_PIN 4


void SERVOMOTOR_VidSetDirection(u8 Degree,u8 PWMPin)
{
    3494:	df 93       	push	r29
    3496:	cf 93       	push	r28
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	28 97       	sbiw	r28, 0x08	; 8
    349e:	0f b6       	in	r0, 0x3f	; 63
    34a0:	f8 94       	cli
    34a2:	de bf       	out	0x3e, r29	; 62
    34a4:	0f be       	out	0x3f, r0	; 63
    34a6:	cd bf       	out	0x3d, r28	; 61
    34a8:	8d 83       	std	Y+5, r24	; 0x05
    34aa:	6e 83       	std	Y+6, r22	; 0x06
	f32 Duty=(Degree+48.75)/18.75;
    34ac:	8d 81       	ldd	r24, Y+5	; 0x05
    34ae:	88 2f       	mov	r24, r24
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	aa 27       	eor	r26, r26
    34b4:	97 fd       	sbrc	r25, 7
    34b6:	a0 95       	com	r26
    34b8:	ba 2f       	mov	r27, r26
    34ba:	bc 01       	movw	r22, r24
    34bc:	cd 01       	movw	r24, r26
    34be:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__floatsisf>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	bc 01       	movw	r22, r24
    34c8:	cd 01       	movw	r24, r26
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	43 e4       	ldi	r20, 0x43	; 67
    34d0:	52 e4       	ldi	r21, 0x42	; 66
    34d2:	0e 94 bd 0a 	call	0x157a	; 0x157a <__addsf3>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	bc 01       	movw	r22, r24
    34dc:	cd 01       	movw	r24, r26
    34de:	20 e0       	ldi	r18, 0x00	; 0
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	46 e9       	ldi	r20, 0x96	; 150
    34e4:	51 e4       	ldi	r21, 0x41	; 65
    34e6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    34ea:	dc 01       	movw	r26, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	89 83       	std	Y+1, r24	; 0x01
    34f0:	9a 83       	std	Y+2, r25	; 0x02
    34f2:	ab 83       	std	Y+3, r26	; 0x03
    34f4:	bc 83       	std	Y+4, r27	; 0x04
	switch(PWMPin)
    34f6:	8e 81       	ldd	r24, Y+6	; 0x06
    34f8:	28 2f       	mov	r18, r24
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	38 87       	std	Y+8, r19	; 0x08
    34fe:	2f 83       	std	Y+7, r18	; 0x07
    3500:	8f 81       	ldd	r24, Y+7	; 0x07
    3502:	98 85       	ldd	r25, Y+8	; 0x08
    3504:	84 30       	cpi	r24, 0x04	; 4
    3506:	91 05       	cpc	r25, r1
    3508:	81 f0       	breq	.+32     	; 0x352a <SERVOMOTOR_VidSetDirection+0x96>
    350a:	2f 81       	ldd	r18, Y+7	; 0x07
    350c:	38 85       	ldd	r19, Y+8	; 0x08
    350e:	25 30       	cpi	r18, 0x05	; 5
    3510:	31 05       	cpc	r19, r1
    3512:	a9 f4       	brne	.+42     	; 0x353e <SERVOMOTOR_VidSetDirection+0xaa>
	{
	/*Generate PWM of frequency 0.050KHz of the desired Duty cycle percentage*/
	case OC1A_PIN:{TIMER1_VidPWMGenerationOC1A(0.050,Duty); break;}
    3514:	29 81       	ldd	r18, Y+1	; 0x01
    3516:	3a 81       	ldd	r19, Y+2	; 0x02
    3518:	4b 81       	ldd	r20, Y+3	; 0x03
    351a:	5c 81       	ldd	r21, Y+4	; 0x04
    351c:	6d ec       	ldi	r22, 0xCD	; 205
    351e:	7c ec       	ldi	r23, 0xCC	; 204
    3520:	8c e4       	ldi	r24, 0x4C	; 76
    3522:	9d e3       	ldi	r25, 0x3D	; 61
    3524:	0e 94 06 23 	call	0x460c	; 0x460c <TIMER1_VidPWMGenerationOC1A>
    3528:	0a c0       	rjmp	.+20     	; 0x353e <SERVOMOTOR_VidSetDirection+0xaa>
	case OC1B_PIN:{TIMER1_VidPWMGenerationOC1B(0.050,Duty); break;}
    352a:	29 81       	ldd	r18, Y+1	; 0x01
    352c:	3a 81       	ldd	r19, Y+2	; 0x02
    352e:	4b 81       	ldd	r20, Y+3	; 0x03
    3530:	5c 81       	ldd	r21, Y+4	; 0x04
    3532:	6d ec       	ldi	r22, 0xCD	; 205
    3534:	7c ec       	ldi	r23, 0xCC	; 204
    3536:	8c e4       	ldi	r24, 0x4C	; 76
    3538:	9d e3       	ldi	r25, 0x3D	; 61
    353a:	0e 94 7e 23 	call	0x46fc	; 0x46fc <TIMER1_VidPWMGenerationOC1B>
	}

}
    353e:	28 96       	adiw	r28, 0x08	; 8
    3540:	0f b6       	in	r0, 0x3f	; 63
    3542:	f8 94       	cli
    3544:	de bf       	out	0x3e, r29	; 62
    3546:	0f be       	out	0x3f, r0	; 63
    3548:	cd bf       	out	0x3d, r28	; 61
    354a:	cf 91       	pop	r28
    354c:	df 91       	pop	r29
    354e:	08 95       	ret

00003550 <TIMER_VidSetCallBack>:
static u16 PRE_SCALAR_TIMER2 ;
static f32 T_OV_TIMER2  ;
static f32 NUM_OV_TIMER2 ;
static f32 PRE_LOAD_TIMER2 ;

void TIMER_VidSetCallBack (u8 Copy_NumOfINT , void (*ptr)(void)){
    3550:	df 93       	push	r29
    3552:	cf 93       	push	r28
    3554:	00 d0       	rcall	.+0      	; 0x3556 <TIMER_VidSetCallBack+0x6>
    3556:	00 d0       	rcall	.+0      	; 0x3558 <TIMER_VidSetCallBack+0x8>
    3558:	0f 92       	push	r0
    355a:	cd b7       	in	r28, 0x3d	; 61
    355c:	de b7       	in	r29, 0x3e	; 62
    355e:	89 83       	std	Y+1, r24	; 0x01
    3560:	7b 83       	std	Y+3, r23	; 0x03
    3562:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_NumOfINT){
    3564:	89 81       	ldd	r24, Y+1	; 0x01
    3566:	28 2f       	mov	r18, r24
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	3d 83       	std	Y+5, r19	; 0x05
    356c:	2c 83       	std	Y+4, r18	; 0x04
    356e:	8c 81       	ldd	r24, Y+4	; 0x04
    3570:	9d 81       	ldd	r25, Y+5	; 0x05
    3572:	81 30       	cpi	r24, 0x01	; 1
    3574:	91 05       	cpc	r25, r1
    3576:	81 f0       	breq	.+32     	; 0x3598 <TIMER_VidSetCallBack+0x48>
    3578:	2c 81       	ldd	r18, Y+4	; 0x04
    357a:	3d 81       	ldd	r19, Y+5	; 0x05
    357c:	22 30       	cpi	r18, 0x02	; 2
    357e:	31 05       	cpc	r19, r1
    3580:	91 f0       	breq	.+36     	; 0x35a6 <TIMER_VidSetCallBack+0x56>
    3582:	8c 81       	ldd	r24, Y+4	; 0x04
    3584:	9d 81       	ldd	r25, Y+5	; 0x05
    3586:	00 97       	sbiw	r24, 0x00	; 0
    3588:	a1 f4       	brne	.+40     	; 0x35b2 <TIMER_VidSetCallBack+0x62>
	case 0 :TIMER0_PFUNC = ptr ;             break ;
    358a:	8a 81       	ldd	r24, Y+2	; 0x02
    358c:	9b 81       	ldd	r25, Y+3	; 0x03
    358e:	90 93 7a 01 	sts	0x017A, r25
    3592:	80 93 79 01 	sts	0x0179, r24
    3596:	0d c0       	rjmp	.+26     	; 0x35b2 <TIMER_VidSetCallBack+0x62>
	case 1 :TIMER1_PFUNC = ptr ;             break ;
    3598:	8a 81       	ldd	r24, Y+2	; 0x02
    359a:	9b 81       	ldd	r25, Y+3	; 0x03
    359c:	90 93 7c 01 	sts	0x017C, r25
    35a0:	80 93 7b 01 	sts	0x017B, r24
    35a4:	06 c0       	rjmp	.+12     	; 0x35b2 <TIMER_VidSetCallBack+0x62>
	case 2 :TIMER2_PFUNC = ptr ;             break ;
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	9b 81       	ldd	r25, Y+3	; 0x03
    35aa:	90 93 7e 01 	sts	0x017E, r25
    35ae:	80 93 7d 01 	sts	0x017D, r24
	}
}
    35b2:	0f 90       	pop	r0
    35b4:	0f 90       	pop	r0
    35b6:	0f 90       	pop	r0
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	cf 91       	pop	r28
    35be:	df 91       	pop	r29
    35c0:	08 95       	ret

000035c2 <TIMER0_VidInitialize>:




/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
void TIMER0_VidInitialize (void) {
    35c2:	df 93       	push	r29
    35c4:	cf 93       	push	r28
    35c6:	cd b7       	in	r28, 0x3d	; 61
    35c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,OCIE0);
#endif

#if TIMER0_MODE == FAST_PWM
	//define pin of timer 0
	DIO_VidSetPinDirection(1,3,1);
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	63 e0       	ldi	r22, 0x03	; 3
    35ce:	41 e0       	ldi	r20, 0x01	; 1
    35d0:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(1,3,0);
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	63 e0       	ldi	r22, 0x03	; 3
    35d8:	40 e0       	ldi	r20, 0x00	; 0
    35da:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>

	// to initialize timer0 on 0 , FOCO = 0
	TCCR0 = 0 ;
    35de:	e3 e5       	ldi	r30, 0x53	; 83
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	10 82       	st	Z, r1

	// 1 1 Fast PWM
	SET_BIT(TCCR0,WGM00);
    35e4:	a3 e5       	ldi	r26, 0x53	; 83
    35e6:	b0 e0       	ldi	r27, 0x00	; 0
    35e8:	e3 e5       	ldi	r30, 0x53	; 83
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	80 81       	ld	r24, Z
    35ee:	80 64       	ori	r24, 0x40	; 64
    35f0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    35f2:	a3 e5       	ldi	r26, 0x53	; 83
    35f4:	b0 e0       	ldi	r27, 0x00	; 0
    35f6:	e3 e5       	ldi	r30, 0x53	; 83
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	80 81       	ld	r24, Z
    35fc:	88 60       	ori	r24, 0x08	; 8
    35fe:	8c 93       	st	X, r24

	//1 0 Clear OC0 on compare match, set OC0 at TOP ,  NON_INVERED MODE PWM
	SET_BIT(TCCR0,COM01);
    3600:	a3 e5       	ldi	r26, 0x53	; 83
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	e3 e5       	ldi	r30, 0x53	; 83
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	80 62       	ori	r24, 0x20	; 32
    360c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,COM00);
    360e:	a3 e5       	ldi	r26, 0x53	; 83
    3610:	b0 e0       	ldi	r27, 0x00	; 0
    3612:	e3 e5       	ldi	r30, 0x53	; 83
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	80 81       	ld	r24, Z
    3618:	8f 7e       	andi	r24, 0xEF	; 239
    361a:	8c 93       	st	X, r24
#if PRE_TYPE_TIMER0 == NO_PRE
	CLR_BIT(TCCR0,CS02);
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);
#elif PRE_TYPE_TIMER0 == PRE_8
	CLR_BIT(TCCR0,CS02);
    361c:	a3 e5       	ldi	r26, 0x53	; 83
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	e3 e5       	ldi	r30, 0x53	; 83
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	80 81       	ld	r24, Z
    3626:	8b 7f       	andi	r24, 0xFB	; 251
    3628:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    362a:	a3 e5       	ldi	r26, 0x53	; 83
    362c:	b0 e0       	ldi	r27, 0x00	; 0
    362e:	e3 e5       	ldi	r30, 0x53	; 83
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	80 81       	ld	r24, Z
    3634:	82 60       	ori	r24, 0x02	; 2
    3636:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,CS00);
    3638:	a3 e5       	ldi	r26, 0x53	; 83
    363a:	b0 e0       	ldi	r27, 0x00	; 0
    363c:	e3 e5       	ldi	r30, 0x53	; 83
    363e:	f0 e0       	ldi	r31, 0x00	; 0
    3640:	80 81       	ld	r24, Z
    3642:	8e 7f       	andi	r24, 0xFE	; 254
    3644:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER0 = 8 ;
    3646:	88 e0       	ldi	r24, 0x08	; 8
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	90 93 90 01 	sts	0x0190, r25
    364e:	80 93 8f 01 	sts	0x018F, r24
	CLR_BIT(TCCR0,CS01);
	SET_BIT(TCCR0,CS00);
	PRE_SCALAR_TIMER0 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    3652:	cf 91       	pop	r28
    3654:	df 91       	pop	r29
    3656:	08 95       	ret

00003658 <Timer0_VidSETDUTY>:

#endif

#if TIMER0_MODE == FAST_PWM

void Timer0_VidSETDUTY (u8 duty ) {
    3658:	df 93       	push	r29
    365a:	cf 93       	push	r28
    365c:	0f 92       	push	r0
    365e:	cd b7       	in	r28, 0x3d	; 61
    3660:	de b7       	in	r29, 0x3e	; 62
    3662:	89 83       	std	Y+1, r24	; 0x01
	duty = (u8)( (u16)duty*255/100 ) ;
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	48 2f       	mov	r20, r24
    3668:	50 e0       	ldi	r21, 0x00	; 0
    366a:	ca 01       	movw	r24, r20
    366c:	9c 01       	movw	r18, r24
    366e:	22 0f       	add	r18, r18
    3670:	33 1f       	adc	r19, r19
    3672:	c9 01       	movw	r24, r18
    3674:	96 95       	lsr	r25
    3676:	98 2f       	mov	r25, r24
    3678:	88 27       	eor	r24, r24
    367a:	97 95       	ror	r25
    367c:	87 95       	ror	r24
    367e:	82 1b       	sub	r24, r18
    3680:	93 0b       	sbc	r25, r19
    3682:	84 0f       	add	r24, r20
    3684:	95 1f       	adc	r25, r21
    3686:	24 e6       	ldi	r18, 0x64	; 100
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	b9 01       	movw	r22, r18
    368c:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <__udivmodhi4>
    3690:	cb 01       	movw	r24, r22
    3692:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = duty ;
    3694:	ec e5       	ldi	r30, 0x5C	; 92
    3696:	f0 e0       	ldi	r31, 0x00	; 0
    3698:	89 81       	ldd	r24, Y+1	; 0x01
    369a:	80 83       	st	Z, r24
}
    369c:	0f 90       	pop	r0
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <TIMER2_VidInitialize>:



/*******************To initialize OV or COMPARE or FAST_PWM mode***************************************/
//to check that you don't use OV or COMPARE or FAST_PWM mode
void TIMER2_VidInitialize (void) {
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	cd b7       	in	r28, 0x3d	; 61
    36aa:	de b7       	in	r29, 0x3e	; 62
	//define pin of timer 2
	DIO_VidSetPinDirection(3,7,1);
    36ac:	83 e0       	ldi	r24, 0x03	; 3
    36ae:	67 e0       	ldi	r22, 0x07	; 7
    36b0:	41 e0       	ldi	r20, 0x01	; 1
    36b2:	0e 94 bc 13 	call	0x2778	; 0x2778 <DIO_VidSetPinDirection>
	DIO_VidSetPinValue(3,7,0);
    36b6:	83 e0       	ldi	r24, 0x03	; 3
    36b8:	67 e0       	ldi	r22, 0x07	; 7
    36ba:	40 e0       	ldi	r20, 0x00	; 0
    36bc:	0e 94 fd 14 	call	0x29fa	; 0x29fa <DIO_VidSetPinValue>

#if TIMER2_MODE == OV
	/*   overflow mode , to clear FOC0 and register
	     to enable interrupt , when rising flag jump to ISR     */
	TCCR2 = 0 ;
    36c0:	e5 e4       	ldi	r30, 0x45	; 69
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	10 82       	st	Z, r1
	SET_BIT(TIMSK,TOIE2);
    36c6:	a9 e5       	ldi	r26, 0x59	; 89
    36c8:	b0 e0       	ldi	r27, 0x00	; 0
    36ca:	e9 e5       	ldi	r30, 0x59	; 89
    36cc:	f0 e0       	ldi	r31, 0x00	; 0
    36ce:	80 81       	ld	r24, Z
    36d0:	80 64       	ori	r24, 0x40	; 64
    36d2:	8c 93       	st	X, r24
#if PRE_TYPE_TIMER2 == NO_PRE
	CLR_BIT(TCCR2,CS22);
	CLR_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS20);
#elif PRE_TYPE_TIMER2 == PRE_8
	CLR_BIT(TCCR2,CS22);
    36d4:	a5 e4       	ldi	r26, 0x45	; 69
    36d6:	b0 e0       	ldi	r27, 0x00	; 0
    36d8:	e5 e4       	ldi	r30, 0x45	; 69
    36da:	f0 e0       	ldi	r31, 0x00	; 0
    36dc:	80 81       	ld	r24, Z
    36de:	8b 7f       	andi	r24, 0xFB	; 251
    36e0:	8c 93       	st	X, r24
	SET_BIT(TCCR2,CS21);
    36e2:	a5 e4       	ldi	r26, 0x45	; 69
    36e4:	b0 e0       	ldi	r27, 0x00	; 0
    36e6:	e5 e4       	ldi	r30, 0x45	; 69
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	80 81       	ld	r24, Z
    36ec:	82 60       	ori	r24, 0x02	; 2
    36ee:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,CS20);
    36f0:	a5 e4       	ldi	r26, 0x45	; 69
    36f2:	b0 e0       	ldi	r27, 0x00	; 0
    36f4:	e5 e4       	ldi	r30, 0x45	; 69
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	80 81       	ld	r24, Z
    36fa:	8e 7f       	andi	r24, 0xFE	; 254
    36fc:	8c 93       	st	X, r24
	PRE_SCALAR_TIMER2 = 8 ;
    36fe:	88 e0       	ldi	r24, 0x08	; 8
    3700:	90 e0       	ldi	r25, 0x00	; 0
    3702:	90 93 b0 01 	sts	0x01B0, r25
    3706:	80 93 af 01 	sts	0x01AF, r24
	CLR_BIT(TCCR2,CS21);
	SET_BIT(TCCR2,CS20);
	PRE_SCALAR_TIMER2 = 1024 ;
#endif

}//end FUNC TIMER_VidInitialize
    370a:	cf 91       	pop	r28
    370c:	df 91       	pop	r29
    370e:	08 95       	ret

00003710 <TIMER2_Set_Time_S>:

/******************** The part that use to count time  *************************/
//to check that you don't use OV or COMPARE mode
#if TIMER2_MODE == OV

void TIMER2_Set_Time_S (u8 Copy_U8Time){
    3710:	6f 92       	push	r6
    3712:	7f 92       	push	r7
    3714:	8f 92       	push	r8
    3716:	9f 92       	push	r9
    3718:	af 92       	push	r10
    371a:	bf 92       	push	r11
    371c:	cf 92       	push	r12
    371e:	df 92       	push	r13
    3720:	ef 92       	push	r14
    3722:	ff 92       	push	r15
    3724:	0f 93       	push	r16
    3726:	1f 93       	push	r17
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
    3730:	cf 54       	subi	r28, 0x4F	; 79
    3732:	d0 40       	sbci	r29, 0x00	; 0
    3734:	0f b6       	in	r0, 0x3f	; 63
    3736:	f8 94       	cli
    3738:	de bf       	out	0x3e, r29	; 62
    373a:	0f be       	out	0x3f, r0	; 63
    373c:	cd bf       	out	0x3d, r28	; 61
    373e:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER2 = (u64)Copy_U8Time*1000 ;                                    //time in ms
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	08 2f       	mov	r16, r24
    3744:	10 e0       	ldi	r17, 0x00	; 0
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	40 e0       	ldi	r20, 0x00	; 0
    374c:	50 e0       	ldi	r21, 0x00	; 0
    374e:	60 e0       	ldi	r22, 0x00	; 0
    3750:	70 e0       	ldi	r23, 0x00	; 0
    3752:	0a 83       	std	Y+2, r16	; 0x02
    3754:	1b 83       	std	Y+3, r17	; 0x03
    3756:	2c 83       	std	Y+4, r18	; 0x04
    3758:	3d 83       	std	Y+5, r19	; 0x05
    375a:	4e 83       	std	Y+6, r20	; 0x06
    375c:	5f 83       	std	Y+7, r21	; 0x07
    375e:	68 87       	std	Y+8, r22	; 0x08
    3760:	79 87       	std	Y+9, r23	; 0x09
    3762:	aa 80       	ldd	r10, Y+2	; 0x02
    3764:	bb 80       	ldd	r11, Y+3	; 0x03
    3766:	cc 80       	ldd	r12, Y+4	; 0x04
    3768:	dd 80       	ldd	r13, Y+5	; 0x05
    376a:	ee 80       	ldd	r14, Y+6	; 0x06
    376c:	ff 80       	ldd	r15, Y+7	; 0x07
    376e:	08 85       	ldd	r16, Y+8	; 0x08
    3770:	19 85       	ldd	r17, Y+9	; 0x09
    3772:	2a 2d       	mov	r18, r10
    3774:	3b 2d       	mov	r19, r11
    3776:	4c 2d       	mov	r20, r12
    3778:	5d 2d       	mov	r21, r13
    377a:	6e 2d       	mov	r22, r14
    377c:	7f 2d       	mov	r23, r15
    377e:	80 2f       	mov	r24, r16
    3780:	91 2f       	mov	r25, r17
    3782:	02 e0       	ldi	r16, 0x02	; 2
    3784:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    3788:	2a 87       	std	Y+10, r18	; 0x0a
    378a:	3b 87       	std	Y+11, r19	; 0x0b
    378c:	4c 87       	std	Y+12, r20	; 0x0c
    378e:	5d 87       	std	Y+13, r21	; 0x0d
    3790:	6e 87       	std	Y+14, r22	; 0x0e
    3792:	7f 87       	std	Y+15, r23	; 0x0f
    3794:	88 8b       	std	Y+16, r24	; 0x10
    3796:	99 8b       	std	Y+17, r25	; 0x11
    3798:	2a 85       	ldd	r18, Y+10	; 0x0a
    379a:	3b 85       	ldd	r19, Y+11	; 0x0b
    379c:	4c 85       	ldd	r20, Y+12	; 0x0c
    379e:	5d 85       	ldd	r21, Y+13	; 0x0d
    37a0:	6e 85       	ldd	r22, Y+14	; 0x0e
    37a2:	7f 85       	ldd	r23, Y+15	; 0x0f
    37a4:	88 89       	ldd	r24, Y+16	; 0x10
    37a6:	99 89       	ldd	r25, Y+17	; 0x11
    37a8:	05 e0       	ldi	r16, 0x05	; 5
    37aa:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    37ae:	2a 8b       	std	Y+18, r18	; 0x12
    37b0:	3b 8b       	std	Y+19, r19	; 0x13
    37b2:	4c 8b       	std	Y+20, r20	; 0x14
    37b4:	5d 8b       	std	Y+21, r21	; 0x15
    37b6:	6e 8b       	std	Y+22, r22	; 0x16
    37b8:	7f 8b       	std	Y+23, r23	; 0x17
    37ba:	88 8f       	std	Y+24, r24	; 0x18
    37bc:	99 8f       	std	Y+25, r25	; 0x19
    37be:	1a 89       	ldd	r17, Y+18	; 0x12
    37c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    37c2:	12 1b       	sub	r17, r18
    37c4:	1a 8f       	std	Y+26, r17	; 0x1a
    37c6:	31 e0       	ldi	r19, 0x01	; 1
    37c8:	3a a3       	std	Y+34, r19	; 0x22
    37ca:	4a 8d       	ldd	r20, Y+26	; 0x1a
    37cc:	5a 89       	ldd	r21, Y+18	; 0x12
    37ce:	54 17       	cp	r21, r20
    37d0:	08 f0       	brcs	.+2      	; 0x37d4 <TIMER2_Set_Time_S+0xc4>
    37d2:	1a a2       	std	Y+34, r1	; 0x22
    37d4:	6b 89       	ldd	r22, Y+19	; 0x13
    37d6:	7b 85       	ldd	r23, Y+11	; 0x0b
    37d8:	67 1b       	sub	r22, r23
    37da:	6b 8f       	std	Y+27, r22	; 0x1b
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	8b a3       	std	Y+35, r24	; 0x23
    37e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    37e2:	eb 89       	ldd	r30, Y+19	; 0x13
    37e4:	e9 17       	cp	r30, r25
    37e6:	08 f0       	brcs	.+2      	; 0x37ea <TIMER2_Set_Time_S+0xda>
    37e8:	1b a2       	std	Y+35, r1	; 0x23
    37ea:	fb 8d       	ldd	r31, Y+27	; 0x1b
    37ec:	0a a1       	ldd	r16, Y+34	; 0x22
    37ee:	f0 1b       	sub	r31, r16
    37f0:	fc a3       	std	Y+36, r31	; 0x24
    37f2:	11 e0       	ldi	r17, 0x01	; 1
    37f4:	1d a3       	std	Y+37, r17	; 0x25
    37f6:	2c a1       	ldd	r18, Y+36	; 0x24
    37f8:	3b 8d       	ldd	r19, Y+27	; 0x1b
    37fa:	32 17       	cp	r19, r18
    37fc:	08 f0       	brcs	.+2      	; 0x3800 <TIMER2_Set_Time_S+0xf0>
    37fe:	1d a2       	std	Y+37, r1	; 0x25
    3800:	4b a1       	ldd	r20, Y+35	; 0x23
    3802:	5d a1       	ldd	r21, Y+37	; 0x25
    3804:	45 2b       	or	r20, r21
    3806:	4b a3       	std	Y+35, r20	; 0x23
    3808:	6c a1       	ldd	r22, Y+36	; 0x24
    380a:	6b 8f       	std	Y+27, r22	; 0x1b
    380c:	7c 89       	ldd	r23, Y+20	; 0x14
    380e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3810:	78 1b       	sub	r23, r24
    3812:	7c 8f       	std	Y+28, r23	; 0x1c
    3814:	91 e0       	ldi	r25, 0x01	; 1
    3816:	9e a3       	std	Y+38, r25	; 0x26
    3818:	ec 8d       	ldd	r30, Y+28	; 0x1c
    381a:	fc 89       	ldd	r31, Y+20	; 0x14
    381c:	fe 17       	cp	r31, r30
    381e:	08 f0       	brcs	.+2      	; 0x3822 <TIMER2_Set_Time_S+0x112>
    3820:	1e a2       	std	Y+38, r1	; 0x26
    3822:	0c 8d       	ldd	r16, Y+28	; 0x1c
    3824:	1b a1       	ldd	r17, Y+35	; 0x23
    3826:	01 1b       	sub	r16, r17
    3828:	0f a3       	std	Y+39, r16	; 0x27
    382a:	21 e0       	ldi	r18, 0x01	; 1
    382c:	28 a7       	std	Y+40, r18	; 0x28
    382e:	3f a1       	ldd	r19, Y+39	; 0x27
    3830:	4c 8d       	ldd	r20, Y+28	; 0x1c
    3832:	43 17       	cp	r20, r19
    3834:	08 f0       	brcs	.+2      	; 0x3838 <TIMER2_Set_Time_S+0x128>
    3836:	18 a6       	std	Y+40, r1	; 0x28
    3838:	5e a1       	ldd	r21, Y+38	; 0x26
    383a:	68 a5       	ldd	r22, Y+40	; 0x28
    383c:	56 2b       	or	r21, r22
    383e:	5e a3       	std	Y+38, r21	; 0x26
    3840:	7f a1       	ldd	r23, Y+39	; 0x27
    3842:	7c 8f       	std	Y+28, r23	; 0x1c
    3844:	8d 89       	ldd	r24, Y+21	; 0x15
    3846:	9d 85       	ldd	r25, Y+13	; 0x0d
    3848:	89 1b       	sub	r24, r25
    384a:	8d 8f       	std	Y+29, r24	; 0x1d
    384c:	e1 e0       	ldi	r30, 0x01	; 1
    384e:	e9 a7       	std	Y+41, r30	; 0x29
    3850:	fd 8d       	ldd	r31, Y+29	; 0x1d
    3852:	0d 89       	ldd	r16, Y+21	; 0x15
    3854:	0f 17       	cp	r16, r31
    3856:	08 f0       	brcs	.+2      	; 0x385a <TIMER2_Set_Time_S+0x14a>
    3858:	19 a6       	std	Y+41, r1	; 0x29
    385a:	1d 8d       	ldd	r17, Y+29	; 0x1d
    385c:	2e a1       	ldd	r18, Y+38	; 0x26
    385e:	12 1b       	sub	r17, r18
    3860:	1a a7       	std	Y+42, r17	; 0x2a
    3862:	31 e0       	ldi	r19, 0x01	; 1
    3864:	3b a7       	std	Y+43, r19	; 0x2b
    3866:	4a a5       	ldd	r20, Y+42	; 0x2a
    3868:	5d 8d       	ldd	r21, Y+29	; 0x1d
    386a:	54 17       	cp	r21, r20
    386c:	08 f0       	brcs	.+2      	; 0x3870 <TIMER2_Set_Time_S+0x160>
    386e:	1b a6       	std	Y+43, r1	; 0x2b
    3870:	69 a5       	ldd	r22, Y+41	; 0x29
    3872:	7b a5       	ldd	r23, Y+43	; 0x2b
    3874:	67 2b       	or	r22, r23
    3876:	69 a7       	std	Y+41, r22	; 0x29
    3878:	8a a5       	ldd	r24, Y+42	; 0x2a
    387a:	8d 8f       	std	Y+29, r24	; 0x1d
    387c:	9e 89       	ldd	r25, Y+22	; 0x16
    387e:	ee 85       	ldd	r30, Y+14	; 0x0e
    3880:	9e 1b       	sub	r25, r30
    3882:	9e 8f       	std	Y+30, r25	; 0x1e
    3884:	f1 e0       	ldi	r31, 0x01	; 1
    3886:	fc a7       	std	Y+44, r31	; 0x2c
    3888:	0e 8d       	ldd	r16, Y+30	; 0x1e
    388a:	1e 89       	ldd	r17, Y+22	; 0x16
    388c:	10 17       	cp	r17, r16
    388e:	08 f0       	brcs	.+2      	; 0x3892 <TIMER2_Set_Time_S+0x182>
    3890:	1c a6       	std	Y+44, r1	; 0x2c
    3892:	2e 8d       	ldd	r18, Y+30	; 0x1e
    3894:	39 a5       	ldd	r19, Y+41	; 0x29
    3896:	23 1b       	sub	r18, r19
    3898:	2d a7       	std	Y+45, r18	; 0x2d
    389a:	41 e0       	ldi	r20, 0x01	; 1
    389c:	4e a7       	std	Y+46, r20	; 0x2e
    389e:	5d a5       	ldd	r21, Y+45	; 0x2d
    38a0:	6e 8d       	ldd	r22, Y+30	; 0x1e
    38a2:	65 17       	cp	r22, r21
    38a4:	08 f0       	brcs	.+2      	; 0x38a8 <TIMER2_Set_Time_S+0x198>
    38a6:	1e a6       	std	Y+46, r1	; 0x2e
    38a8:	7c a5       	ldd	r23, Y+44	; 0x2c
    38aa:	8e a5       	ldd	r24, Y+46	; 0x2e
    38ac:	78 2b       	or	r23, r24
    38ae:	7c a7       	std	Y+44, r23	; 0x2c
    38b0:	9d a5       	ldd	r25, Y+45	; 0x2d
    38b2:	9e 8f       	std	Y+30, r25	; 0x1e
    38b4:	ef 89       	ldd	r30, Y+23	; 0x17
    38b6:	ff 85       	ldd	r31, Y+15	; 0x0f
    38b8:	ef 1b       	sub	r30, r31
    38ba:	ef 8f       	std	Y+31, r30	; 0x1f
    38bc:	01 e0       	ldi	r16, 0x01	; 1
    38be:	0f a7       	std	Y+47, r16	; 0x2f
    38c0:	1f 8d       	ldd	r17, Y+31	; 0x1f
    38c2:	2f 89       	ldd	r18, Y+23	; 0x17
    38c4:	21 17       	cp	r18, r17
    38c6:	08 f0       	brcs	.+2      	; 0x38ca <TIMER2_Set_Time_S+0x1ba>
    38c8:	1f a6       	std	Y+47, r1	; 0x2f
    38ca:	3f 8d       	ldd	r19, Y+31	; 0x1f
    38cc:	4c a5       	ldd	r20, Y+44	; 0x2c
    38ce:	34 1b       	sub	r19, r20
    38d0:	38 ab       	std	Y+48, r19	; 0x30
    38d2:	51 e0       	ldi	r21, 0x01	; 1
    38d4:	59 ab       	std	Y+49, r21	; 0x31
    38d6:	68 a9       	ldd	r22, Y+48	; 0x30
    38d8:	7f 8d       	ldd	r23, Y+31	; 0x1f
    38da:	76 17       	cp	r23, r22
    38dc:	08 f0       	brcs	.+2      	; 0x38e0 <TIMER2_Set_Time_S+0x1d0>
    38de:	19 aa       	std	Y+49, r1	; 0x31
    38e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    38e2:	99 a9       	ldd	r25, Y+49	; 0x31
    38e4:	89 2b       	or	r24, r25
    38e6:	8f a7       	std	Y+47, r24	; 0x2f
    38e8:	e8 a9       	ldd	r30, Y+48	; 0x30
    38ea:	ef 8f       	std	Y+31, r30	; 0x1f
    38ec:	f8 8d       	ldd	r31, Y+24	; 0x18
    38ee:	08 89       	ldd	r16, Y+16	; 0x10
    38f0:	f0 1b       	sub	r31, r16
    38f2:	f8 a3       	std	Y+32, r31	; 0x20
    38f4:	11 e0       	ldi	r17, 0x01	; 1
    38f6:	1a ab       	std	Y+50, r17	; 0x32
    38f8:	28 a1       	ldd	r18, Y+32	; 0x20
    38fa:	38 8d       	ldd	r19, Y+24	; 0x18
    38fc:	32 17       	cp	r19, r18
    38fe:	08 f0       	brcs	.+2      	; 0x3902 <TIMER2_Set_Time_S+0x1f2>
    3900:	1a aa       	std	Y+50, r1	; 0x32
    3902:	48 a1       	ldd	r20, Y+32	; 0x20
    3904:	5f a5       	ldd	r21, Y+47	; 0x2f
    3906:	45 1b       	sub	r20, r21
    3908:	4b ab       	std	Y+51, r20	; 0x33
    390a:	61 e0       	ldi	r22, 0x01	; 1
    390c:	6c ab       	std	Y+52, r22	; 0x34
    390e:	7b a9       	ldd	r23, Y+51	; 0x33
    3910:	88 a1       	ldd	r24, Y+32	; 0x20
    3912:	87 17       	cp	r24, r23
    3914:	08 f0       	brcs	.+2      	; 0x3918 <TIMER2_Set_Time_S+0x208>
    3916:	1c aa       	std	Y+52, r1	; 0x34
    3918:	9a a9       	ldd	r25, Y+50	; 0x32
    391a:	ec a9       	ldd	r30, Y+52	; 0x34
    391c:	9e 2b       	or	r25, r30
    391e:	9a ab       	std	Y+50, r25	; 0x32
    3920:	fb a9       	ldd	r31, Y+51	; 0x33
    3922:	f8 a3       	std	Y+32, r31	; 0x20
    3924:	09 8d       	ldd	r16, Y+25	; 0x19
    3926:	19 89       	ldd	r17, Y+17	; 0x11
    3928:	01 1b       	sub	r16, r17
    392a:	09 a3       	std	Y+33, r16	; 0x21
    392c:	89 a1       	ldd	r24, Y+33	; 0x21
    392e:	2a a9       	ldd	r18, Y+50	; 0x32
    3930:	82 1b       	sub	r24, r18
    3932:	89 a3       	std	Y+33, r24	; 0x21
    3934:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3936:	3a 8b       	std	Y+18, r19	; 0x12
    3938:	4b 8d       	ldd	r20, Y+27	; 0x1b
    393a:	4b 8b       	std	Y+19, r20	; 0x13
    393c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    393e:	5c 8b       	std	Y+20, r21	; 0x14
    3940:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3942:	6d 8b       	std	Y+21, r22	; 0x15
    3944:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3946:	7e 8b       	std	Y+22, r23	; 0x16
    3948:	8f 8d       	ldd	r24, Y+31	; 0x1f
    394a:	8f 8b       	std	Y+23, r24	; 0x17
    394c:	98 a1       	ldd	r25, Y+32	; 0x20
    394e:	98 8f       	std	Y+24, r25	; 0x18
    3950:	e9 a1       	ldd	r30, Y+33	; 0x21
    3952:	e9 8f       	std	Y+25, r30	; 0x19
    3954:	fa 89       	ldd	r31, Y+18	; 0x12
    3956:	0a 81       	ldd	r16, Y+2	; 0x02
    3958:	f0 0f       	add	r31, r16
    395a:	fd ab       	std	Y+53, r31	; 0x35
    395c:	11 e0       	ldi	r17, 0x01	; 1
    395e:	1d af       	std	Y+61, r17	; 0x3d
    3960:	2d a9       	ldd	r18, Y+53	; 0x35
    3962:	3a 89       	ldd	r19, Y+18	; 0x12
    3964:	23 17       	cp	r18, r19
    3966:	08 f0       	brcs	.+2      	; 0x396a <TIMER2_Set_Time_S+0x25a>
    3968:	1d ae       	std	Y+61, r1	; 0x3d
    396a:	4b 89       	ldd	r20, Y+19	; 0x13
    396c:	5b 81       	ldd	r21, Y+3	; 0x03
    396e:	45 0f       	add	r20, r21
    3970:	4e ab       	std	Y+54, r20	; 0x36
    3972:	61 e0       	ldi	r22, 0x01	; 1
    3974:	6e af       	std	Y+62, r22	; 0x3e
    3976:	7e a9       	ldd	r23, Y+54	; 0x36
    3978:	8b 89       	ldd	r24, Y+19	; 0x13
    397a:	78 17       	cp	r23, r24
    397c:	08 f0       	brcs	.+2      	; 0x3980 <TIMER2_Set_Time_S+0x270>
    397e:	1e ae       	std	Y+62, r1	; 0x3e
    3980:	9d ad       	ldd	r25, Y+61	; 0x3d
    3982:	ee a9       	ldd	r30, Y+54	; 0x36
    3984:	9e 0f       	add	r25, r30
    3986:	9f af       	std	Y+63, r25	; 0x3f
    3988:	f1 e0       	ldi	r31, 0x01	; 1
    398a:	21 96       	adiw	r28, 0x01	; 1
    398c:	ff af       	std	Y+63, r31	; 0x3f
    398e:	21 97       	sbiw	r28, 0x01	; 1
    3990:	0f ad       	ldd	r16, Y+63	; 0x3f
    3992:	1e a9       	ldd	r17, Y+54	; 0x36
    3994:	01 17       	cp	r16, r17
    3996:	18 f0       	brcs	.+6      	; 0x399e <TIMER2_Set_Time_S+0x28e>
    3998:	21 96       	adiw	r28, 0x01	; 1
    399a:	1f ae       	std	Y+63, r1	; 0x3f
    399c:	21 97       	sbiw	r28, 0x01	; 1
    399e:	2e ad       	ldd	r18, Y+62	; 0x3e
    39a0:	21 96       	adiw	r28, 0x01	; 1
    39a2:	3f ad       	ldd	r19, Y+63	; 0x3f
    39a4:	21 97       	sbiw	r28, 0x01	; 1
    39a6:	23 2b       	or	r18, r19
    39a8:	2e af       	std	Y+62, r18	; 0x3e
    39aa:	4f ad       	ldd	r20, Y+63	; 0x3f
    39ac:	4e ab       	std	Y+54, r20	; 0x36
    39ae:	5c 89       	ldd	r21, Y+20	; 0x14
    39b0:	6c 81       	ldd	r22, Y+4	; 0x04
    39b2:	56 0f       	add	r21, r22
    39b4:	5f ab       	std	Y+55, r21	; 0x37
    39b6:	71 e0       	ldi	r23, 0x01	; 1
    39b8:	22 96       	adiw	r28, 0x02	; 2
    39ba:	7f af       	std	Y+63, r23	; 0x3f
    39bc:	22 97       	sbiw	r28, 0x02	; 2
    39be:	8f a9       	ldd	r24, Y+55	; 0x37
    39c0:	9c 89       	ldd	r25, Y+20	; 0x14
    39c2:	89 17       	cp	r24, r25
    39c4:	18 f0       	brcs	.+6      	; 0x39cc <TIMER2_Set_Time_S+0x2bc>
    39c6:	22 96       	adiw	r28, 0x02	; 2
    39c8:	1f ae       	std	Y+63, r1	; 0x3f
    39ca:	22 97       	sbiw	r28, 0x02	; 2
    39cc:	ee ad       	ldd	r30, Y+62	; 0x3e
    39ce:	ff a9       	ldd	r31, Y+55	; 0x37
    39d0:	ef 0f       	add	r30, r31
    39d2:	23 96       	adiw	r28, 0x03	; 3
    39d4:	ef af       	std	Y+63, r30	; 0x3f
    39d6:	23 97       	sbiw	r28, 0x03	; 3
    39d8:	01 e0       	ldi	r16, 0x01	; 1
    39da:	24 96       	adiw	r28, 0x04	; 4
    39dc:	0f af       	std	Y+63, r16	; 0x3f
    39de:	24 97       	sbiw	r28, 0x04	; 4
    39e0:	23 96       	adiw	r28, 0x03	; 3
    39e2:	1f ad       	ldd	r17, Y+63	; 0x3f
    39e4:	23 97       	sbiw	r28, 0x03	; 3
    39e6:	2f a9       	ldd	r18, Y+55	; 0x37
    39e8:	12 17       	cp	r17, r18
    39ea:	18 f0       	brcs	.+6      	; 0x39f2 <TIMER2_Set_Time_S+0x2e2>
    39ec:	24 96       	adiw	r28, 0x04	; 4
    39ee:	1f ae       	std	Y+63, r1	; 0x3f
    39f0:	24 97       	sbiw	r28, 0x04	; 4
    39f2:	22 96       	adiw	r28, 0x02	; 2
    39f4:	3f ad       	ldd	r19, Y+63	; 0x3f
    39f6:	22 97       	sbiw	r28, 0x02	; 2
    39f8:	24 96       	adiw	r28, 0x04	; 4
    39fa:	4f ad       	ldd	r20, Y+63	; 0x3f
    39fc:	24 97       	sbiw	r28, 0x04	; 4
    39fe:	34 2b       	or	r19, r20
    3a00:	22 96       	adiw	r28, 0x02	; 2
    3a02:	3f af       	std	Y+63, r19	; 0x3f
    3a04:	22 97       	sbiw	r28, 0x02	; 2
    3a06:	23 96       	adiw	r28, 0x03	; 3
    3a08:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a0a:	23 97       	sbiw	r28, 0x03	; 3
    3a0c:	5f ab       	std	Y+55, r21	; 0x37
    3a0e:	6d 89       	ldd	r22, Y+21	; 0x15
    3a10:	7d 81       	ldd	r23, Y+5	; 0x05
    3a12:	67 0f       	add	r22, r23
    3a14:	68 af       	std	Y+56, r22	; 0x38
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	25 96       	adiw	r28, 0x05	; 5
    3a1a:	8f af       	std	Y+63, r24	; 0x3f
    3a1c:	25 97       	sbiw	r28, 0x05	; 5
    3a1e:	98 ad       	ldd	r25, Y+56	; 0x38
    3a20:	ed 89       	ldd	r30, Y+21	; 0x15
    3a22:	9e 17       	cp	r25, r30
    3a24:	18 f0       	brcs	.+6      	; 0x3a2c <TIMER2_Set_Time_S+0x31c>
    3a26:	25 96       	adiw	r28, 0x05	; 5
    3a28:	1f ae       	std	Y+63, r1	; 0x3f
    3a2a:	25 97       	sbiw	r28, 0x05	; 5
    3a2c:	22 96       	adiw	r28, 0x02	; 2
    3a2e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3a30:	22 97       	sbiw	r28, 0x02	; 2
    3a32:	08 ad       	ldd	r16, Y+56	; 0x38
    3a34:	f0 0f       	add	r31, r16
    3a36:	26 96       	adiw	r28, 0x06	; 6
    3a38:	ff af       	std	Y+63, r31	; 0x3f
    3a3a:	26 97       	sbiw	r28, 0x06	; 6
    3a3c:	11 e0       	ldi	r17, 0x01	; 1
    3a3e:	27 96       	adiw	r28, 0x07	; 7
    3a40:	1f af       	std	Y+63, r17	; 0x3f
    3a42:	27 97       	sbiw	r28, 0x07	; 7
    3a44:	26 96       	adiw	r28, 0x06	; 6
    3a46:	2f ad       	ldd	r18, Y+63	; 0x3f
    3a48:	26 97       	sbiw	r28, 0x06	; 6
    3a4a:	38 ad       	ldd	r19, Y+56	; 0x38
    3a4c:	23 17       	cp	r18, r19
    3a4e:	18 f0       	brcs	.+6      	; 0x3a56 <TIMER2_Set_Time_S+0x346>
    3a50:	27 96       	adiw	r28, 0x07	; 7
    3a52:	1f ae       	std	Y+63, r1	; 0x3f
    3a54:	27 97       	sbiw	r28, 0x07	; 7
    3a56:	25 96       	adiw	r28, 0x05	; 5
    3a58:	4f ad       	ldd	r20, Y+63	; 0x3f
    3a5a:	25 97       	sbiw	r28, 0x05	; 5
    3a5c:	27 96       	adiw	r28, 0x07	; 7
    3a5e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3a60:	27 97       	sbiw	r28, 0x07	; 7
    3a62:	45 2b       	or	r20, r21
    3a64:	25 96       	adiw	r28, 0x05	; 5
    3a66:	4f af       	std	Y+63, r20	; 0x3f
    3a68:	25 97       	sbiw	r28, 0x05	; 5
    3a6a:	26 96       	adiw	r28, 0x06	; 6
    3a6c:	6f ad       	ldd	r22, Y+63	; 0x3f
    3a6e:	26 97       	sbiw	r28, 0x06	; 6
    3a70:	68 af       	std	Y+56, r22	; 0x38
    3a72:	7e 89       	ldd	r23, Y+22	; 0x16
    3a74:	8e 81       	ldd	r24, Y+6	; 0x06
    3a76:	78 0f       	add	r23, r24
    3a78:	79 af       	std	Y+57, r23	; 0x39
    3a7a:	91 e0       	ldi	r25, 0x01	; 1
    3a7c:	28 96       	adiw	r28, 0x08	; 8
    3a7e:	9f af       	std	Y+63, r25	; 0x3f
    3a80:	28 97       	sbiw	r28, 0x08	; 8
    3a82:	e9 ad       	ldd	r30, Y+57	; 0x39
    3a84:	fe 89       	ldd	r31, Y+22	; 0x16
    3a86:	ef 17       	cp	r30, r31
    3a88:	18 f0       	brcs	.+6      	; 0x3a90 <TIMER2_Set_Time_S+0x380>
    3a8a:	28 96       	adiw	r28, 0x08	; 8
    3a8c:	1f ae       	std	Y+63, r1	; 0x3f
    3a8e:	28 97       	sbiw	r28, 0x08	; 8
    3a90:	25 96       	adiw	r28, 0x05	; 5
    3a92:	0f ad       	ldd	r16, Y+63	; 0x3f
    3a94:	25 97       	sbiw	r28, 0x05	; 5
    3a96:	19 ad       	ldd	r17, Y+57	; 0x39
    3a98:	01 0f       	add	r16, r17
    3a9a:	29 96       	adiw	r28, 0x09	; 9
    3a9c:	0f af       	std	Y+63, r16	; 0x3f
    3a9e:	29 97       	sbiw	r28, 0x09	; 9
    3aa0:	21 e0       	ldi	r18, 0x01	; 1
    3aa2:	2a 96       	adiw	r28, 0x0a	; 10
    3aa4:	2f af       	std	Y+63, r18	; 0x3f
    3aa6:	2a 97       	sbiw	r28, 0x0a	; 10
    3aa8:	29 96       	adiw	r28, 0x09	; 9
    3aaa:	3f ad       	ldd	r19, Y+63	; 0x3f
    3aac:	29 97       	sbiw	r28, 0x09	; 9
    3aae:	49 ad       	ldd	r20, Y+57	; 0x39
    3ab0:	34 17       	cp	r19, r20
    3ab2:	18 f0       	brcs	.+6      	; 0x3aba <TIMER2_Set_Time_S+0x3aa>
    3ab4:	2a 96       	adiw	r28, 0x0a	; 10
    3ab6:	1f ae       	std	Y+63, r1	; 0x3f
    3ab8:	2a 97       	sbiw	r28, 0x0a	; 10
    3aba:	28 96       	adiw	r28, 0x08	; 8
    3abc:	5f ad       	ldd	r21, Y+63	; 0x3f
    3abe:	28 97       	sbiw	r28, 0x08	; 8
    3ac0:	2a 96       	adiw	r28, 0x0a	; 10
    3ac2:	6f ad       	ldd	r22, Y+63	; 0x3f
    3ac4:	2a 97       	sbiw	r28, 0x0a	; 10
    3ac6:	56 2b       	or	r21, r22
    3ac8:	28 96       	adiw	r28, 0x08	; 8
    3aca:	5f af       	std	Y+63, r21	; 0x3f
    3acc:	28 97       	sbiw	r28, 0x08	; 8
    3ace:	29 96       	adiw	r28, 0x09	; 9
    3ad0:	7f ad       	ldd	r23, Y+63	; 0x3f
    3ad2:	29 97       	sbiw	r28, 0x09	; 9
    3ad4:	79 af       	std	Y+57, r23	; 0x39
    3ad6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ad8:	9f 81       	ldd	r25, Y+7	; 0x07
    3ada:	89 0f       	add	r24, r25
    3adc:	8a af       	std	Y+58, r24	; 0x3a
    3ade:	e1 e0       	ldi	r30, 0x01	; 1
    3ae0:	2b 96       	adiw	r28, 0x0b	; 11
    3ae2:	ef af       	std	Y+63, r30	; 0x3f
    3ae4:	2b 97       	sbiw	r28, 0x0b	; 11
    3ae6:	fa ad       	ldd	r31, Y+58	; 0x3a
    3ae8:	0f 89       	ldd	r16, Y+23	; 0x17
    3aea:	f0 17       	cp	r31, r16
    3aec:	18 f0       	brcs	.+6      	; 0x3af4 <TIMER2_Set_Time_S+0x3e4>
    3aee:	2b 96       	adiw	r28, 0x0b	; 11
    3af0:	1f ae       	std	Y+63, r1	; 0x3f
    3af2:	2b 97       	sbiw	r28, 0x0b	; 11
    3af4:	28 96       	adiw	r28, 0x08	; 8
    3af6:	1f ad       	ldd	r17, Y+63	; 0x3f
    3af8:	28 97       	sbiw	r28, 0x08	; 8
    3afa:	2a ad       	ldd	r18, Y+58	; 0x3a
    3afc:	12 0f       	add	r17, r18
    3afe:	2c 96       	adiw	r28, 0x0c	; 12
    3b00:	1f af       	std	Y+63, r17	; 0x3f
    3b02:	2c 97       	sbiw	r28, 0x0c	; 12
    3b04:	31 e0       	ldi	r19, 0x01	; 1
    3b06:	2d 96       	adiw	r28, 0x0d	; 13
    3b08:	3f af       	std	Y+63, r19	; 0x3f
    3b0a:	2d 97       	sbiw	r28, 0x0d	; 13
    3b0c:	2c 96       	adiw	r28, 0x0c	; 12
    3b0e:	4f ad       	ldd	r20, Y+63	; 0x3f
    3b10:	2c 97       	sbiw	r28, 0x0c	; 12
    3b12:	5a ad       	ldd	r21, Y+58	; 0x3a
    3b14:	45 17       	cp	r20, r21
    3b16:	18 f0       	brcs	.+6      	; 0x3b1e <TIMER2_Set_Time_S+0x40e>
    3b18:	2d 96       	adiw	r28, 0x0d	; 13
    3b1a:	1f ae       	std	Y+63, r1	; 0x3f
    3b1c:	2d 97       	sbiw	r28, 0x0d	; 13
    3b1e:	2b 96       	adiw	r28, 0x0b	; 11
    3b20:	6f ad       	ldd	r22, Y+63	; 0x3f
    3b22:	2b 97       	sbiw	r28, 0x0b	; 11
    3b24:	2d 96       	adiw	r28, 0x0d	; 13
    3b26:	7f ad       	ldd	r23, Y+63	; 0x3f
    3b28:	2d 97       	sbiw	r28, 0x0d	; 13
    3b2a:	67 2b       	or	r22, r23
    3b2c:	2b 96       	adiw	r28, 0x0b	; 11
    3b2e:	6f af       	std	Y+63, r22	; 0x3f
    3b30:	2b 97       	sbiw	r28, 0x0b	; 11
    3b32:	2c 96       	adiw	r28, 0x0c	; 12
    3b34:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b36:	2c 97       	sbiw	r28, 0x0c	; 12
    3b38:	8a af       	std	Y+58, r24	; 0x3a
    3b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b3c:	e8 85       	ldd	r30, Y+8	; 0x08
    3b3e:	9e 0f       	add	r25, r30
    3b40:	9b af       	std	Y+59, r25	; 0x3b
    3b42:	f1 e0       	ldi	r31, 0x01	; 1
    3b44:	2e 96       	adiw	r28, 0x0e	; 14
    3b46:	ff af       	std	Y+63, r31	; 0x3f
    3b48:	2e 97       	sbiw	r28, 0x0e	; 14
    3b4a:	0b ad       	ldd	r16, Y+59	; 0x3b
    3b4c:	18 8d       	ldd	r17, Y+24	; 0x18
    3b4e:	01 17       	cp	r16, r17
    3b50:	18 f0       	brcs	.+6      	; 0x3b58 <TIMER2_Set_Time_S+0x448>
    3b52:	2e 96       	adiw	r28, 0x0e	; 14
    3b54:	1f ae       	std	Y+63, r1	; 0x3f
    3b56:	2e 97       	sbiw	r28, 0x0e	; 14
    3b58:	2b 96       	adiw	r28, 0x0b	; 11
    3b5a:	2f ad       	ldd	r18, Y+63	; 0x3f
    3b5c:	2b 97       	sbiw	r28, 0x0b	; 11
    3b5e:	3b ad       	ldd	r19, Y+59	; 0x3b
    3b60:	23 0f       	add	r18, r19
    3b62:	2f 96       	adiw	r28, 0x0f	; 15
    3b64:	2f af       	std	Y+63, r18	; 0x3f
    3b66:	2f 97       	sbiw	r28, 0x0f	; 15
    3b68:	41 e0       	ldi	r20, 0x01	; 1
    3b6a:	60 96       	adiw	r28, 0x10	; 16
    3b6c:	4f af       	std	Y+63, r20	; 0x3f
    3b6e:	60 97       	sbiw	r28, 0x10	; 16
    3b70:	2f 96       	adiw	r28, 0x0f	; 15
    3b72:	5f ad       	ldd	r21, Y+63	; 0x3f
    3b74:	2f 97       	sbiw	r28, 0x0f	; 15
    3b76:	6b ad       	ldd	r22, Y+59	; 0x3b
    3b78:	56 17       	cp	r21, r22
    3b7a:	18 f0       	brcs	.+6      	; 0x3b82 <TIMER2_Set_Time_S+0x472>
    3b7c:	60 96       	adiw	r28, 0x10	; 16
    3b7e:	1f ae       	std	Y+63, r1	; 0x3f
    3b80:	60 97       	sbiw	r28, 0x10	; 16
    3b82:	2e 96       	adiw	r28, 0x0e	; 14
    3b84:	7f ad       	ldd	r23, Y+63	; 0x3f
    3b86:	2e 97       	sbiw	r28, 0x0e	; 14
    3b88:	60 96       	adiw	r28, 0x10	; 16
    3b8a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b8c:	60 97       	sbiw	r28, 0x10	; 16
    3b8e:	78 2b       	or	r23, r24
    3b90:	2e 96       	adiw	r28, 0x0e	; 14
    3b92:	7f af       	std	Y+63, r23	; 0x3f
    3b94:	2e 97       	sbiw	r28, 0x0e	; 14
    3b96:	2f 96       	adiw	r28, 0x0f	; 15
    3b98:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b9a:	2f 97       	sbiw	r28, 0x0f	; 15
    3b9c:	9b af       	std	Y+59, r25	; 0x3b
    3b9e:	e9 8d       	ldd	r30, Y+25	; 0x19
    3ba0:	f9 85       	ldd	r31, Y+9	; 0x09
    3ba2:	ef 0f       	add	r30, r31
    3ba4:	ec af       	std	Y+60, r30	; 0x3c
    3ba6:	2e 96       	adiw	r28, 0x0e	; 14
    3ba8:	8f ad       	ldd	r24, Y+63	; 0x3f
    3baa:	2e 97       	sbiw	r28, 0x0e	; 14
    3bac:	0c ad       	ldd	r16, Y+60	; 0x3c
    3bae:	80 0f       	add	r24, r16
    3bb0:	8c af       	std	Y+60, r24	; 0x3c
    3bb2:	1d a9       	ldd	r17, Y+53	; 0x35
    3bb4:	1a 8b       	std	Y+18, r17	; 0x12
    3bb6:	2e a9       	ldd	r18, Y+54	; 0x36
    3bb8:	2b 8b       	std	Y+19, r18	; 0x13
    3bba:	3f a9       	ldd	r19, Y+55	; 0x37
    3bbc:	3c 8b       	std	Y+20, r19	; 0x14
    3bbe:	48 ad       	ldd	r20, Y+56	; 0x38
    3bc0:	4d 8b       	std	Y+21, r20	; 0x15
    3bc2:	59 ad       	ldd	r21, Y+57	; 0x39
    3bc4:	5e 8b       	std	Y+22, r21	; 0x16
    3bc6:	6a ad       	ldd	r22, Y+58	; 0x3a
    3bc8:	6f 8b       	std	Y+23, r22	; 0x17
    3bca:	7b ad       	ldd	r23, Y+59	; 0x3b
    3bcc:	78 8f       	std	Y+24, r23	; 0x18
    3bce:	8c ad       	ldd	r24, Y+60	; 0x3c
    3bd0:	89 8f       	std	Y+25, r24	; 0x19
    3bd2:	2a 89       	ldd	r18, Y+18	; 0x12
    3bd4:	3b 89       	ldd	r19, Y+19	; 0x13
    3bd6:	4c 89       	ldd	r20, Y+20	; 0x14
    3bd8:	5d 89       	ldd	r21, Y+21	; 0x15
    3bda:	6e 89       	ldd	r22, Y+22	; 0x16
    3bdc:	7f 89       	ldd	r23, Y+23	; 0x17
    3bde:	88 8d       	ldd	r24, Y+24	; 0x18
    3be0:	99 8d       	ldd	r25, Y+25	; 0x19
    3be2:	03 e0       	ldi	r16, 0x03	; 3
    3be4:	0e 94 44 01 	call	0x288	; 0x288 <__ashldi3>
    3be8:	a2 2e       	mov	r10, r18
    3bea:	b3 2e       	mov	r11, r19
    3bec:	c4 2e       	mov	r12, r20
    3bee:	d5 2e       	mov	r13, r21
    3bf0:	e6 2e       	mov	r14, r22
    3bf2:	f7 2e       	mov	r15, r23
    3bf4:	08 2f       	mov	r16, r24
    3bf6:	19 2f       	mov	r17, r25
    3bf8:	2a 2d       	mov	r18, r10
    3bfa:	3b 2d       	mov	r19, r11
    3bfc:	4c 2d       	mov	r20, r12
    3bfe:	5d 2d       	mov	r21, r13
    3c00:	6e 2d       	mov	r22, r14
    3c02:	7f 2d       	mov	r23, r15
    3c04:	80 2f       	mov	r24, r16
    3c06:	91 2f       	mov	r25, r17
    3c08:	20 93 a7 01 	sts	0x01A7, r18
    3c0c:	30 93 a8 01 	sts	0x01A8, r19
    3c10:	40 93 a9 01 	sts	0x01A9, r20
    3c14:	50 93 aa 01 	sts	0x01AA, r21
    3c18:	60 93 ab 01 	sts	0x01AB, r22
    3c1c:	70 93 ac 01 	sts	0x01AC, r23
    3c20:	80 93 ad 01 	sts	0x01AD, r24
    3c24:	90 93 ae 01 	sts	0x01AE, r25
    T_OV_TIMER2 = (256*(f32)PRE_SCALAR_TIMER2)/8000 ;                                //time in ms
    3c28:	80 91 af 01 	lds	r24, 0x01AF
    3c2c:	90 91 b0 01 	lds	r25, 0x01B0
    3c30:	cc 01       	movw	r24, r24
    3c32:	a0 e0       	ldi	r26, 0x00	; 0
    3c34:	b0 e0       	ldi	r27, 0x00	; 0
    3c36:	bc 01       	movw	r22, r24
    3c38:	cd 01       	movw	r24, r26
    3c3a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__floatunsisf>
    3c3e:	dc 01       	movw	r26, r24
    3c40:	cb 01       	movw	r24, r22
    3c42:	bc 01       	movw	r22, r24
    3c44:	cd 01       	movw	r24, r26
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	40 e8       	ldi	r20, 0x80	; 128
    3c4c:	53 e4       	ldi	r21, 0x43	; 67
    3c4e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	bc 01       	movw	r22, r24
    3c58:	cd 01       	movw	r24, r26
    3c5a:	20 e0       	ldi	r18, 0x00	; 0
    3c5c:	30 e0       	ldi	r19, 0x00	; 0
    3c5e:	4a ef       	ldi	r20, 0xFA	; 250
    3c60:	55 e4       	ldi	r21, 0x45	; 69
    3c62:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    3c66:	dc 01       	movw	r26, r24
    3c68:	cb 01       	movw	r24, r22
    3c6a:	80 93 b1 01 	sts	0x01B1, r24
    3c6e:	90 93 b2 01 	sts	0x01B2, r25
    3c72:	a0 93 b3 01 	sts	0x01B3, r26
    3c76:	b0 93 b4 01 	sts	0x01B4, r27
	NUM_OV_TIMER2 = DESIRED_TIME_TIMER2 / T_OV_TIMER2 ;                              //number of overflow wanted in entered if
    3c7a:	a0 90 a7 01 	lds	r10, 0x01A7
    3c7e:	b0 90 a8 01 	lds	r11, 0x01A8
    3c82:	c0 90 a9 01 	lds	r12, 0x01A9
    3c86:	d0 90 aa 01 	lds	r13, 0x01AA
    3c8a:	e0 90 ab 01 	lds	r14, 0x01AB
    3c8e:	f0 90 ac 01 	lds	r15, 0x01AC
    3c92:	00 91 ad 01 	lds	r16, 0x01AD
    3c96:	10 91 ae 01 	lds	r17, 0x01AE
    3c9a:	2a 2d       	mov	r18, r10
    3c9c:	3b 2d       	mov	r19, r11
    3c9e:	4c 2d       	mov	r20, r12
    3ca0:	5d 2d       	mov	r21, r13
    3ca2:	6e 2d       	mov	r22, r14
    3ca4:	7f 2d       	mov	r23, r15
    3ca6:	80 2f       	mov	r24, r16
    3ca8:	91 2f       	mov	r25, r17
    3caa:	0e 94 ef 01 	call	0x3de	; 0x3de <__floatundisf>
    3cae:	dc 01       	movw	r26, r24
    3cb0:	cb 01       	movw	r24, r22
    3cb2:	20 91 b1 01 	lds	r18, 0x01B1
    3cb6:	30 91 b2 01 	lds	r19, 0x01B2
    3cba:	40 91 b3 01 	lds	r20, 0x01B3
    3cbe:	50 91 b4 01 	lds	r21, 0x01B4
    3cc2:	bc 01       	movw	r22, r24
    3cc4:	cd 01       	movw	r24, r26
    3cc6:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    3cca:	dc 01       	movw	r26, r24
    3ccc:	cb 01       	movw	r24, r22
    3cce:	80 93 b5 01 	sts	0x01B5, r24
    3cd2:	90 93 b6 01 	sts	0x01B6, r25
    3cd6:	a0 93 b7 01 	sts	0x01B7, r26
    3cda:	b0 93 b8 01 	sts	0x01B8, r27
	PRE_LOAD_TIMER2  = NUM_OV_TIMER2 -( (u32)(DESIRED_TIME_TIMER2 /T_OV_TIMER2) );   //the value which should be in TCNT to make time more accurate
    3cde:	60 90 b5 01 	lds	r6, 0x01B5
    3ce2:	70 90 b6 01 	lds	r7, 0x01B6
    3ce6:	80 90 b7 01 	lds	r8, 0x01B7
    3cea:	90 90 b8 01 	lds	r9, 0x01B8
    3cee:	a0 90 a7 01 	lds	r10, 0x01A7
    3cf2:	b0 90 a8 01 	lds	r11, 0x01A8
    3cf6:	c0 90 a9 01 	lds	r12, 0x01A9
    3cfa:	d0 90 aa 01 	lds	r13, 0x01AA
    3cfe:	e0 90 ab 01 	lds	r14, 0x01AB
    3d02:	f0 90 ac 01 	lds	r15, 0x01AC
    3d06:	00 91 ad 01 	lds	r16, 0x01AD
    3d0a:	10 91 ae 01 	lds	r17, 0x01AE
    3d0e:	2a 2d       	mov	r18, r10
    3d10:	3b 2d       	mov	r19, r11
    3d12:	4c 2d       	mov	r20, r12
    3d14:	5d 2d       	mov	r21, r13
    3d16:	6e 2d       	mov	r22, r14
    3d18:	7f 2d       	mov	r23, r15
    3d1a:	80 2f       	mov	r24, r16
    3d1c:	91 2f       	mov	r25, r17
    3d1e:	0e 94 ef 01 	call	0x3de	; 0x3de <__floatundisf>
    3d22:	dc 01       	movw	r26, r24
    3d24:	cb 01       	movw	r24, r22
    3d26:	20 91 b1 01 	lds	r18, 0x01B1
    3d2a:	30 91 b2 01 	lds	r19, 0x01B2
    3d2e:	40 91 b3 01 	lds	r20, 0x01B3
    3d32:	50 91 b4 01 	lds	r21, 0x01B4
    3d36:	bc 01       	movw	r22, r24
    3d38:	cd 01       	movw	r24, r26
    3d3a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    3d3e:	dc 01       	movw	r26, r24
    3d40:	cb 01       	movw	r24, r22
    3d42:	bc 01       	movw	r22, r24
    3d44:	cd 01       	movw	r24, r26
    3d46:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	bc 01       	movw	r22, r24
    3d50:	cd 01       	movw	r24, r26
    3d52:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__floatunsisf>
    3d56:	9b 01       	movw	r18, r22
    3d58:	ac 01       	movw	r20, r24
    3d5a:	c4 01       	movw	r24, r8
    3d5c:	b3 01       	movw	r22, r6
    3d5e:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__subsf3>
    3d62:	dc 01       	movw	r26, r24
    3d64:	cb 01       	movw	r24, r22
    3d66:	80 93 b9 01 	sts	0x01B9, r24
    3d6a:	90 93 ba 01 	sts	0x01BA, r25
    3d6e:	a0 93 bb 01 	sts	0x01BB, r26
    3d72:	b0 93 bc 01 	sts	0x01BC, r27
	if ( NUM_OV_TIMER2 > (u32)NUM_OV_TIMER2 ){
    3d76:	80 91 b5 01 	lds	r24, 0x01B5
    3d7a:	90 91 b6 01 	lds	r25, 0x01B6
    3d7e:	a0 91 b7 01 	lds	r26, 0x01B7
    3d82:	b0 91 b8 01 	lds	r27, 0x01B8
    3d86:	bc 01       	movw	r22, r24
    3d88:	cd 01       	movw	r24, r26
    3d8a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    3d8e:	dc 01       	movw	r26, r24
    3d90:	cb 01       	movw	r24, r22
    3d92:	bc 01       	movw	r22, r24
    3d94:	cd 01       	movw	r24, r26
    3d96:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__floatunsisf>
    3d9a:	dc 01       	movw	r26, r24
    3d9c:	cb 01       	movw	r24, r22
    3d9e:	20 91 b5 01 	lds	r18, 0x01B5
    3da2:	30 91 b6 01 	lds	r19, 0x01B6
    3da6:	40 91 b7 01 	lds	r20, 0x01B7
    3daa:	50 91 b8 01 	lds	r21, 0x01B8
    3dae:	bc 01       	movw	r22, r24
    3db0:	cd 01       	movw	r24, r26
    3db2:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__ltsf2>
    3db6:	88 23       	and	r24, r24
    3db8:	d4 f4       	brge	.+52     	; 0x3dee <TIMER2_Set_Time_S+0x6de>
		NUM_OV_TIMER2++;
    3dba:	80 91 b5 01 	lds	r24, 0x01B5
    3dbe:	90 91 b6 01 	lds	r25, 0x01B6
    3dc2:	a0 91 b7 01 	lds	r26, 0x01B7
    3dc6:	b0 91 b8 01 	lds	r27, 0x01B8
    3dca:	bc 01       	movw	r22, r24
    3dcc:	cd 01       	movw	r24, r26
    3dce:	20 e0       	ldi	r18, 0x00	; 0
    3dd0:	30 e0       	ldi	r19, 0x00	; 0
    3dd2:	40 e8       	ldi	r20, 0x80	; 128
    3dd4:	5f e3       	ldi	r21, 0x3F	; 63
    3dd6:	0e 94 bd 0a 	call	0x157a	; 0x157a <__addsf3>
    3dda:	dc 01       	movw	r26, r24
    3ddc:	cb 01       	movw	r24, r22
    3dde:	80 93 b5 01 	sts	0x01B5, r24
    3de2:	90 93 b6 01 	sts	0x01B6, r25
    3de6:	a0 93 b7 01 	sts	0x01B7, r26
    3dea:	b0 93 b8 01 	sts	0x01B8, r27
	}//end if

	//to begin from specific value
	TCNT2 = 256-(256*PRE_LOAD_TIMER2 );
    3dee:	04 e4       	ldi	r16, 0x44	; 68
    3df0:	10 e0       	ldi	r17, 0x00	; 0
    3df2:	80 91 b9 01 	lds	r24, 0x01B9
    3df6:	90 91 ba 01 	lds	r25, 0x01BA
    3dfa:	a0 91 bb 01 	lds	r26, 0x01BB
    3dfe:	b0 91 bc 01 	lds	r27, 0x01BC
    3e02:	bc 01       	movw	r22, r24
    3e04:	cd 01       	movw	r24, r26
    3e06:	20 e0       	ldi	r18, 0x00	; 0
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	40 e8       	ldi	r20, 0x80	; 128
    3e0c:	53 ec       	ldi	r21, 0xC3	; 195
    3e0e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    3e12:	dc 01       	movw	r26, r24
    3e14:	cb 01       	movw	r24, r22
    3e16:	bc 01       	movw	r22, r24
    3e18:	cd 01       	movw	r24, r26
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	30 e0       	ldi	r19, 0x00	; 0
    3e1e:	40 e8       	ldi	r20, 0x80	; 128
    3e20:	53 e4       	ldi	r21, 0x43	; 67
    3e22:	0e 94 bd 0a 	call	0x157a	; 0x157a <__addsf3>
    3e26:	dc 01       	movw	r26, r24
    3e28:	cb 01       	movw	r24, r22
    3e2a:	bc 01       	movw	r22, r24
    3e2c:	cd 01       	movw	r24, r26
    3e2e:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	f8 01       	movw	r30, r16
    3e38:	80 83       	st	Z, r24
}
    3e3a:	c1 5b       	subi	r28, 0xB1	; 177
    3e3c:	df 4f       	sbci	r29, 0xFF	; 255
    3e3e:	0f b6       	in	r0, 0x3f	; 63
    3e40:	f8 94       	cli
    3e42:	de bf       	out	0x3e, r29	; 62
    3e44:	0f be       	out	0x3f, r0	; 63
    3e46:	cd bf       	out	0x3d, r28	; 61
    3e48:	cf 91       	pop	r28
    3e4a:	df 91       	pop	r29
    3e4c:	1f 91       	pop	r17
    3e4e:	0f 91       	pop	r16
    3e50:	ff 90       	pop	r15
    3e52:	ef 90       	pop	r14
    3e54:	df 90       	pop	r13
    3e56:	cf 90       	pop	r12
    3e58:	bf 90       	pop	r11
    3e5a:	af 90       	pop	r10
    3e5c:	9f 90       	pop	r9
    3e5e:	8f 90       	pop	r8
    3e60:	7f 90       	pop	r7
    3e62:	6f 90       	pop	r6
    3e64:	08 95       	ret

00003e66 <TIMER2_Set_Time_mS>:

void TIMER2_Set_Time_mS (u16 Copy_U8Time){
    3e66:	6f 92       	push	r6
    3e68:	7f 92       	push	r7
    3e6a:	8f 92       	push	r8
    3e6c:	9f 92       	push	r9
    3e6e:	af 92       	push	r10
    3e70:	bf 92       	push	r11
    3e72:	cf 92       	push	r12
    3e74:	df 92       	push	r13
    3e76:	ef 92       	push	r14
    3e78:	ff 92       	push	r15
    3e7a:	0f 93       	push	r16
    3e7c:	1f 93       	push	r17
    3e7e:	df 93       	push	r29
    3e80:	cf 93       	push	r28
    3e82:	00 d0       	rcall	.+0      	; 0x3e84 <TIMER2_Set_Time_mS+0x1e>
    3e84:	cd b7       	in	r28, 0x3d	; 61
    3e86:	de b7       	in	r29, 0x3e	; 62
    3e88:	9a 83       	std	Y+2, r25	; 0x02
    3e8a:	89 83       	std	Y+1, r24	; 0x01
	DESIRED_TIME_TIMER2 = Copy_U8Time ;                         //time in ms
    3e8c:	89 81       	ldd	r24, Y+1	; 0x01
    3e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e90:	9c 01       	movw	r18, r24
    3e92:	40 e0       	ldi	r20, 0x00	; 0
    3e94:	50 e0       	ldi	r21, 0x00	; 0
    3e96:	60 e0       	ldi	r22, 0x00	; 0
    3e98:	70 e0       	ldi	r23, 0x00	; 0
    3e9a:	80 e0       	ldi	r24, 0x00	; 0
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	20 93 a7 01 	sts	0x01A7, r18
    3ea2:	30 93 a8 01 	sts	0x01A8, r19
    3ea6:	40 93 a9 01 	sts	0x01A9, r20
    3eaa:	50 93 aa 01 	sts	0x01AA, r21
    3eae:	60 93 ab 01 	sts	0x01AB, r22
    3eb2:	70 93 ac 01 	sts	0x01AC, r23
    3eb6:	80 93 ad 01 	sts	0x01AD, r24
    3eba:	90 93 ae 01 	sts	0x01AE, r25
    T_OV_TIMER2 = (256*(f32)PRE_SCALAR_TIMER2)/8000 ;                  //time in us
    3ebe:	80 91 af 01 	lds	r24, 0x01AF
    3ec2:	90 91 b0 01 	lds	r25, 0x01B0
    3ec6:	cc 01       	movw	r24, r24
    3ec8:	a0 e0       	ldi	r26, 0x00	; 0
    3eca:	b0 e0       	ldi	r27, 0x00	; 0
    3ecc:	bc 01       	movw	r22, r24
    3ece:	cd 01       	movw	r24, r26
    3ed0:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__floatunsisf>
    3ed4:	dc 01       	movw	r26, r24
    3ed6:	cb 01       	movw	r24, r22
    3ed8:	bc 01       	movw	r22, r24
    3eda:	cd 01       	movw	r24, r26
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	40 e8       	ldi	r20, 0x80	; 128
    3ee2:	53 e4       	ldi	r21, 0x43	; 67
    3ee4:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    3ee8:	dc 01       	movw	r26, r24
    3eea:	cb 01       	movw	r24, r22
    3eec:	bc 01       	movw	r22, r24
    3eee:	cd 01       	movw	r24, r26
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	4a ef       	ldi	r20, 0xFA	; 250
    3ef6:	55 e4       	ldi	r21, 0x45	; 69
    3ef8:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	80 93 b1 01 	sts	0x01B1, r24
    3f04:	90 93 b2 01 	sts	0x01B2, r25
    3f08:	a0 93 b3 01 	sts	0x01B3, r26
    3f0c:	b0 93 b4 01 	sts	0x01B4, r27
	NUM_OV_TIMER2 = DESIRED_TIME_TIMER2 / T_OV_TIMER2 ;                       //number of overflow wanted in entered if
    3f10:	a0 90 a7 01 	lds	r10, 0x01A7
    3f14:	b0 90 a8 01 	lds	r11, 0x01A8
    3f18:	c0 90 a9 01 	lds	r12, 0x01A9
    3f1c:	d0 90 aa 01 	lds	r13, 0x01AA
    3f20:	e0 90 ab 01 	lds	r14, 0x01AB
    3f24:	f0 90 ac 01 	lds	r15, 0x01AC
    3f28:	00 91 ad 01 	lds	r16, 0x01AD
    3f2c:	10 91 ae 01 	lds	r17, 0x01AE
    3f30:	2a 2d       	mov	r18, r10
    3f32:	3b 2d       	mov	r19, r11
    3f34:	4c 2d       	mov	r20, r12
    3f36:	5d 2d       	mov	r21, r13
    3f38:	6e 2d       	mov	r22, r14
    3f3a:	7f 2d       	mov	r23, r15
    3f3c:	80 2f       	mov	r24, r16
    3f3e:	91 2f       	mov	r25, r17
    3f40:	0e 94 ef 01 	call	0x3de	; 0x3de <__floatundisf>
    3f44:	dc 01       	movw	r26, r24
    3f46:	cb 01       	movw	r24, r22
    3f48:	20 91 b1 01 	lds	r18, 0x01B1
    3f4c:	30 91 b2 01 	lds	r19, 0x01B2
    3f50:	40 91 b3 01 	lds	r20, 0x01B3
    3f54:	50 91 b4 01 	lds	r21, 0x01B4
    3f58:	bc 01       	movw	r22, r24
    3f5a:	cd 01       	movw	r24, r26
    3f5c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    3f60:	dc 01       	movw	r26, r24
    3f62:	cb 01       	movw	r24, r22
    3f64:	80 93 b5 01 	sts	0x01B5, r24
    3f68:	90 93 b6 01 	sts	0x01B6, r25
    3f6c:	a0 93 b7 01 	sts	0x01B7, r26
    3f70:	b0 93 b8 01 	sts	0x01B8, r27
	PRE_LOAD_TIMER2  = NUM_OV_TIMER2 -( (u32)(DESIRED_TIME_TIMER2 /T_OV_TIMER2) );   //the value which should be in TCNT to make time more accurate
    3f74:	60 90 b5 01 	lds	r6, 0x01B5
    3f78:	70 90 b6 01 	lds	r7, 0x01B6
    3f7c:	80 90 b7 01 	lds	r8, 0x01B7
    3f80:	90 90 b8 01 	lds	r9, 0x01B8
    3f84:	a0 90 a7 01 	lds	r10, 0x01A7
    3f88:	b0 90 a8 01 	lds	r11, 0x01A8
    3f8c:	c0 90 a9 01 	lds	r12, 0x01A9
    3f90:	d0 90 aa 01 	lds	r13, 0x01AA
    3f94:	e0 90 ab 01 	lds	r14, 0x01AB
    3f98:	f0 90 ac 01 	lds	r15, 0x01AC
    3f9c:	00 91 ad 01 	lds	r16, 0x01AD
    3fa0:	10 91 ae 01 	lds	r17, 0x01AE
    3fa4:	2a 2d       	mov	r18, r10
    3fa6:	3b 2d       	mov	r19, r11
    3fa8:	4c 2d       	mov	r20, r12
    3faa:	5d 2d       	mov	r21, r13
    3fac:	6e 2d       	mov	r22, r14
    3fae:	7f 2d       	mov	r23, r15
    3fb0:	80 2f       	mov	r24, r16
    3fb2:	91 2f       	mov	r25, r17
    3fb4:	0e 94 ef 01 	call	0x3de	; 0x3de <__floatundisf>
    3fb8:	dc 01       	movw	r26, r24
    3fba:	cb 01       	movw	r24, r22
    3fbc:	20 91 b1 01 	lds	r18, 0x01B1
    3fc0:	30 91 b2 01 	lds	r19, 0x01B2
    3fc4:	40 91 b3 01 	lds	r20, 0x01B3
    3fc8:	50 91 b4 01 	lds	r21, 0x01B4
    3fcc:	bc 01       	movw	r22, r24
    3fce:	cd 01       	movw	r24, r26
    3fd0:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    3fd4:	dc 01       	movw	r26, r24
    3fd6:	cb 01       	movw	r24, r22
    3fd8:	bc 01       	movw	r22, r24
    3fda:	cd 01       	movw	r24, r26
    3fdc:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    3fe0:	dc 01       	movw	r26, r24
    3fe2:	cb 01       	movw	r24, r22
    3fe4:	bc 01       	movw	r22, r24
    3fe6:	cd 01       	movw	r24, r26
    3fe8:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__floatunsisf>
    3fec:	9b 01       	movw	r18, r22
    3fee:	ac 01       	movw	r20, r24
    3ff0:	c4 01       	movw	r24, r8
    3ff2:	b3 01       	movw	r22, r6
    3ff4:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__subsf3>
    3ff8:	dc 01       	movw	r26, r24
    3ffa:	cb 01       	movw	r24, r22
    3ffc:	80 93 b9 01 	sts	0x01B9, r24
    4000:	90 93 ba 01 	sts	0x01BA, r25
    4004:	a0 93 bb 01 	sts	0x01BB, r26
    4008:	b0 93 bc 01 	sts	0x01BC, r27
	if ( NUM_OV_TIMER2 > (u32)NUM_OV_TIMER2 ){
    400c:	80 91 b5 01 	lds	r24, 0x01B5
    4010:	90 91 b6 01 	lds	r25, 0x01B6
    4014:	a0 91 b7 01 	lds	r26, 0x01B7
    4018:	b0 91 b8 01 	lds	r27, 0x01B8
    401c:	bc 01       	movw	r22, r24
    401e:	cd 01       	movw	r24, r26
    4020:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4024:	dc 01       	movw	r26, r24
    4026:	cb 01       	movw	r24, r22
    4028:	bc 01       	movw	r22, r24
    402a:	cd 01       	movw	r24, r26
    402c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__floatunsisf>
    4030:	dc 01       	movw	r26, r24
    4032:	cb 01       	movw	r24, r22
    4034:	20 91 b5 01 	lds	r18, 0x01B5
    4038:	30 91 b6 01 	lds	r19, 0x01B6
    403c:	40 91 b7 01 	lds	r20, 0x01B7
    4040:	50 91 b8 01 	lds	r21, 0x01B8
    4044:	bc 01       	movw	r22, r24
    4046:	cd 01       	movw	r24, r26
    4048:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__ltsf2>
    404c:	88 23       	and	r24, r24
    404e:	d4 f4       	brge	.+52     	; 0x4084 <TIMER2_Set_Time_mS+0x21e>
		NUM_OV_TIMER2++;
    4050:	80 91 b5 01 	lds	r24, 0x01B5
    4054:	90 91 b6 01 	lds	r25, 0x01B6
    4058:	a0 91 b7 01 	lds	r26, 0x01B7
    405c:	b0 91 b8 01 	lds	r27, 0x01B8
    4060:	bc 01       	movw	r22, r24
    4062:	cd 01       	movw	r24, r26
    4064:	20 e0       	ldi	r18, 0x00	; 0
    4066:	30 e0       	ldi	r19, 0x00	; 0
    4068:	40 e8       	ldi	r20, 0x80	; 128
    406a:	5f e3       	ldi	r21, 0x3F	; 63
    406c:	0e 94 bd 0a 	call	0x157a	; 0x157a <__addsf3>
    4070:	dc 01       	movw	r26, r24
    4072:	cb 01       	movw	r24, r22
    4074:	80 93 b5 01 	sts	0x01B5, r24
    4078:	90 93 b6 01 	sts	0x01B6, r25
    407c:	a0 93 b7 01 	sts	0x01B7, r26
    4080:	b0 93 b8 01 	sts	0x01B8, r27
#if PRE_TYPE_TIMER2 != PRE_8
#error "YOU SELECTED PRE_SCALAR MAKE MORE THAN 1 ms"
#endif

	//to begin from specific value
	TCNT2 = 256-(256*PRE_LOAD_TIMER2 );
    4084:	04 e4       	ldi	r16, 0x44	; 68
    4086:	10 e0       	ldi	r17, 0x00	; 0
    4088:	80 91 b9 01 	lds	r24, 0x01B9
    408c:	90 91 ba 01 	lds	r25, 0x01BA
    4090:	a0 91 bb 01 	lds	r26, 0x01BB
    4094:	b0 91 bc 01 	lds	r27, 0x01BC
    4098:	bc 01       	movw	r22, r24
    409a:	cd 01       	movw	r24, r26
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	40 e8       	ldi	r20, 0x80	; 128
    40a2:	53 ec       	ldi	r21, 0xC3	; 195
    40a4:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    40a8:	dc 01       	movw	r26, r24
    40aa:	cb 01       	movw	r24, r22
    40ac:	bc 01       	movw	r22, r24
    40ae:	cd 01       	movw	r24, r26
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	40 e8       	ldi	r20, 0x80	; 128
    40b6:	53 e4       	ldi	r21, 0x43	; 67
    40b8:	0e 94 bd 0a 	call	0x157a	; 0x157a <__addsf3>
    40bc:	dc 01       	movw	r26, r24
    40be:	cb 01       	movw	r24, r22
    40c0:	bc 01       	movw	r22, r24
    40c2:	cd 01       	movw	r24, r26
    40c4:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
    40cc:	f8 01       	movw	r30, r16
    40ce:	80 83       	st	Z, r24
}
    40d0:	0f 90       	pop	r0
    40d2:	0f 90       	pop	r0
    40d4:	cf 91       	pop	r28
    40d6:	df 91       	pop	r29
    40d8:	1f 91       	pop	r17
    40da:	0f 91       	pop	r16
    40dc:	ff 90       	pop	r15
    40de:	ef 90       	pop	r14
    40e0:	df 90       	pop	r13
    40e2:	cf 90       	pop	r12
    40e4:	bf 90       	pop	r11
    40e6:	af 90       	pop	r10
    40e8:	9f 90       	pop	r9
    40ea:	8f 90       	pop	r8
    40ec:	7f 90       	pop	r7
    40ee:	6f 90       	pop	r6
    40f0:	08 95       	ret

000040f2 <__vector_11>:
    4) PRE_256  every 1sec need t_ov = 8.192ms  , num_ov = 122.0703125 , pre_load = 0.0703125
    5) PRE_1024 every 1sec need t_ov = 32.768ms , num_ov = 30.51757813 , pre_load = 0.51757813
*/

/****************************************************************************/
void __vector_11(void){
    40f2:	1f 92       	push	r1
    40f4:	0f 92       	push	r0
    40f6:	0f b6       	in	r0, 0x3f	; 63
    40f8:	0f 92       	push	r0
    40fa:	11 24       	eor	r1, r1
    40fc:	0f 93       	push	r16
    40fe:	1f 93       	push	r17
    4100:	2f 93       	push	r18
    4102:	3f 93       	push	r19
    4104:	4f 93       	push	r20
    4106:	5f 93       	push	r21
    4108:	6f 93       	push	r22
    410a:	7f 93       	push	r23
    410c:	8f 93       	push	r24
    410e:	9f 93       	push	r25
    4110:	af 93       	push	r26
    4112:	bf 93       	push	r27
    4114:	ef 93       	push	r30
    4116:	ff 93       	push	r31
    4118:	df 93       	push	r29
    411a:	cf 93       	push	r28
    411c:	cd b7       	in	r28, 0x3d	; 61
    411e:	de b7       	in	r29, 0x3e	; 62
	static u32 tick = 0 ;
	tick++ ;
    4120:	80 91 7f 01 	lds	r24, 0x017F
    4124:	90 91 80 01 	lds	r25, 0x0180
    4128:	a0 91 81 01 	lds	r26, 0x0181
    412c:	b0 91 82 01 	lds	r27, 0x0182
    4130:	01 96       	adiw	r24, 0x01	; 1
    4132:	a1 1d       	adc	r26, r1
    4134:	b1 1d       	adc	r27, r1
    4136:	80 93 7f 01 	sts	0x017F, r24
    413a:	90 93 80 01 	sts	0x0180, r25
    413e:	a0 93 81 01 	sts	0x0181, r26
    4142:	b0 93 82 01 	sts	0x0182, r27

	if (tick == (u32)NUM_OV_TIMER0 ){
    4146:	80 91 95 01 	lds	r24, 0x0195
    414a:	90 91 96 01 	lds	r25, 0x0196
    414e:	a0 91 97 01 	lds	r26, 0x0197
    4152:	b0 91 98 01 	lds	r27, 0x0198
    4156:	bc 01       	movw	r22, r24
    4158:	cd 01       	movw	r24, r26
    415a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    415e:	9b 01       	movw	r18, r22
    4160:	ac 01       	movw	r20, r24
    4162:	80 91 7f 01 	lds	r24, 0x017F
    4166:	90 91 80 01 	lds	r25, 0x0180
    416a:	a0 91 81 01 	lds	r26, 0x0181
    416e:	b0 91 82 01 	lds	r27, 0x0182
    4172:	28 17       	cp	r18, r24
    4174:	39 07       	cpc	r19, r25
    4176:	4a 07       	cpc	r20, r26
    4178:	5b 07       	cpc	r21, r27
    417a:	99 f5       	brne	.+102    	; 0x41e2 <__vector_11+0xf0>
		TIMER0_PFUNC();                                     //to toggle led
    417c:	e0 91 79 01 	lds	r30, 0x0179
    4180:	f0 91 7a 01 	lds	r31, 0x017A
    4184:	09 95       	icall
		TCNT0 = 256-(256*PRE_LOAD_TIMER0);                         //to begin from specific value
    4186:	02 e5       	ldi	r16, 0x52	; 82
    4188:	10 e0       	ldi	r17, 0x00	; 0
    418a:	80 91 99 01 	lds	r24, 0x0199
    418e:	90 91 9a 01 	lds	r25, 0x019A
    4192:	a0 91 9b 01 	lds	r26, 0x019B
    4196:	b0 91 9c 01 	lds	r27, 0x019C
    419a:	bc 01       	movw	r22, r24
    419c:	cd 01       	movw	r24, r26
    419e:	20 e0       	ldi	r18, 0x00	; 0
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	40 e8       	ldi	r20, 0x80	; 128
    41a4:	53 ec       	ldi	r21, 0xC3	; 195
    41a6:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    41aa:	dc 01       	movw	r26, r24
    41ac:	cb 01       	movw	r24, r22
    41ae:	bc 01       	movw	r22, r24
    41b0:	cd 01       	movw	r24, r26
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	40 e8       	ldi	r20, 0x80	; 128
    41b8:	53 e4       	ldi	r21, 0x43	; 67
    41ba:	0e 94 bd 0a 	call	0x157a	; 0x157a <__addsf3>
    41be:	dc 01       	movw	r26, r24
    41c0:	cb 01       	movw	r24, r22
    41c2:	bc 01       	movw	r22, r24
    41c4:	cd 01       	movw	r24, r26
    41c6:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    41ca:	dc 01       	movw	r26, r24
    41cc:	cb 01       	movw	r24, r22
    41ce:	f8 01       	movw	r30, r16
    41d0:	80 83       	st	Z, r24
		tick = 0 ;                                          //to start count from beginning again
    41d2:	10 92 7f 01 	sts	0x017F, r1
    41d6:	10 92 80 01 	sts	0x0180, r1
    41da:	10 92 81 01 	sts	0x0181, r1
    41de:	10 92 82 01 	sts	0x0182, r1
	}//end if
}//end ISR FUNC
    41e2:	cf 91       	pop	r28
    41e4:	df 91       	pop	r29
    41e6:	ff 91       	pop	r31
    41e8:	ef 91       	pop	r30
    41ea:	bf 91       	pop	r27
    41ec:	af 91       	pop	r26
    41ee:	9f 91       	pop	r25
    41f0:	8f 91       	pop	r24
    41f2:	7f 91       	pop	r23
    41f4:	6f 91       	pop	r22
    41f6:	5f 91       	pop	r21
    41f8:	4f 91       	pop	r20
    41fa:	3f 91       	pop	r19
    41fc:	2f 91       	pop	r18
    41fe:	1f 91       	pop	r17
    4200:	0f 91       	pop	r16
    4202:	0f 90       	pop	r0
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	0f 90       	pop	r0
    4208:	1f 90       	pop	r1
    420a:	18 95       	reti

0000420c <__vector_5>:


/****************************************************************************/

void __vector_5(void){
    420c:	1f 92       	push	r1
    420e:	0f 92       	push	r0
    4210:	0f b6       	in	r0, 0x3f	; 63
    4212:	0f 92       	push	r0
    4214:	11 24       	eor	r1, r1
    4216:	0f 93       	push	r16
    4218:	1f 93       	push	r17
    421a:	2f 93       	push	r18
    421c:	3f 93       	push	r19
    421e:	4f 93       	push	r20
    4220:	5f 93       	push	r21
    4222:	6f 93       	push	r22
    4224:	7f 93       	push	r23
    4226:	8f 93       	push	r24
    4228:	9f 93       	push	r25
    422a:	af 93       	push	r26
    422c:	bf 93       	push	r27
    422e:	ef 93       	push	r30
    4230:	ff 93       	push	r31
    4232:	df 93       	push	r29
    4234:	cf 93       	push	r28
    4236:	cd b7       	in	r28, 0x3d	; 61
    4238:	de b7       	in	r29, 0x3e	; 62
	static u32 tick = 0 ;
	tick++ ;
    423a:	80 91 83 01 	lds	r24, 0x0183
    423e:	90 91 84 01 	lds	r25, 0x0184
    4242:	a0 91 85 01 	lds	r26, 0x0185
    4246:	b0 91 86 01 	lds	r27, 0x0186
    424a:	01 96       	adiw	r24, 0x01	; 1
    424c:	a1 1d       	adc	r26, r1
    424e:	b1 1d       	adc	r27, r1
    4250:	80 93 83 01 	sts	0x0183, r24
    4254:	90 93 84 01 	sts	0x0184, r25
    4258:	a0 93 85 01 	sts	0x0185, r26
    425c:	b0 93 86 01 	sts	0x0186, r27

	if (tick == (u32)NUM_OV_TIMER2 ){
    4260:	80 91 b5 01 	lds	r24, 0x01B5
    4264:	90 91 b6 01 	lds	r25, 0x01B6
    4268:	a0 91 b7 01 	lds	r26, 0x01B7
    426c:	b0 91 b8 01 	lds	r27, 0x01B8
    4270:	bc 01       	movw	r22, r24
    4272:	cd 01       	movw	r24, r26
    4274:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4278:	9b 01       	movw	r18, r22
    427a:	ac 01       	movw	r20, r24
    427c:	80 91 83 01 	lds	r24, 0x0183
    4280:	90 91 84 01 	lds	r25, 0x0184
    4284:	a0 91 85 01 	lds	r26, 0x0185
    4288:	b0 91 86 01 	lds	r27, 0x0186
    428c:	28 17       	cp	r18, r24
    428e:	39 07       	cpc	r19, r25
    4290:	4a 07       	cpc	r20, r26
    4292:	5b 07       	cpc	r21, r27
    4294:	99 f5       	brne	.+102    	; 0x42fc <__vector_5+0xf0>
		TIMER2_PFUNC();                                     //to toggle led
    4296:	e0 91 7d 01 	lds	r30, 0x017D
    429a:	f0 91 7e 01 	lds	r31, 0x017E
    429e:	09 95       	icall
		TCNT2 = 256-(256*PRE_LOAD_TIMER2);                         //to begin from specific value
    42a0:	04 e4       	ldi	r16, 0x44	; 68
    42a2:	10 e0       	ldi	r17, 0x00	; 0
    42a4:	80 91 b9 01 	lds	r24, 0x01B9
    42a8:	90 91 ba 01 	lds	r25, 0x01BA
    42ac:	a0 91 bb 01 	lds	r26, 0x01BB
    42b0:	b0 91 bc 01 	lds	r27, 0x01BC
    42b4:	bc 01       	movw	r22, r24
    42b6:	cd 01       	movw	r24, r26
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	40 e8       	ldi	r20, 0x80	; 128
    42be:	53 ec       	ldi	r21, 0xC3	; 195
    42c0:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    42c4:	dc 01       	movw	r26, r24
    42c6:	cb 01       	movw	r24, r22
    42c8:	bc 01       	movw	r22, r24
    42ca:	cd 01       	movw	r24, r26
    42cc:	20 e0       	ldi	r18, 0x00	; 0
    42ce:	30 e0       	ldi	r19, 0x00	; 0
    42d0:	40 e8       	ldi	r20, 0x80	; 128
    42d2:	53 e4       	ldi	r21, 0x43	; 67
    42d4:	0e 94 bd 0a 	call	0x157a	; 0x157a <__addsf3>
    42d8:	dc 01       	movw	r26, r24
    42da:	cb 01       	movw	r24, r22
    42dc:	bc 01       	movw	r22, r24
    42de:	cd 01       	movw	r24, r26
    42e0:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    42e4:	dc 01       	movw	r26, r24
    42e6:	cb 01       	movw	r24, r22
    42e8:	f8 01       	movw	r30, r16
    42ea:	80 83       	st	Z, r24
		tick = 0 ;                                          //to start count from beginning again
    42ec:	10 92 83 01 	sts	0x0183, r1
    42f0:	10 92 84 01 	sts	0x0184, r1
    42f4:	10 92 85 01 	sts	0x0185, r1
    42f8:	10 92 86 01 	sts	0x0186, r1
	}//end if
}//end ISR FUNC
    42fc:	cf 91       	pop	r28
    42fe:	df 91       	pop	r29
    4300:	ff 91       	pop	r31
    4302:	ef 91       	pop	r30
    4304:	bf 91       	pop	r27
    4306:	af 91       	pop	r26
    4308:	9f 91       	pop	r25
    430a:	8f 91       	pop	r24
    430c:	7f 91       	pop	r23
    430e:	6f 91       	pop	r22
    4310:	5f 91       	pop	r21
    4312:	4f 91       	pop	r20
    4314:	3f 91       	pop	r19
    4316:	2f 91       	pop	r18
    4318:	1f 91       	pop	r17
    431a:	0f 91       	pop	r16
    431c:	0f 90       	pop	r0
    431e:	0f be       	out	0x3f, r0	; 63
    4320:	0f 90       	pop	r0
    4322:	1f 90       	pop	r1
    4324:	18 95       	reti

00004326 <NULL_FUNCTION>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include "Timer1_cfg.h"
#include "Timer1_private.h"

void NULL_FUNCTION(void){}
    4326:	df 93       	push	r29
    4328:	cf 93       	push	r28
    432a:	cd b7       	in	r28, 0x3d	; 61
    432c:	de b7       	in	r29, 0x3e	; 62
    432e:	cf 91       	pop	r28
    4330:	df 91       	pop	r29
    4332:	08 95       	ret

00004334 <TIMER1_VidCallback>:
void(*TIMER1_callback)(void)=&NULL_FUNCTION;
void(*TIMER1_ICU_callback)(void)=&NULL_FUNCTION;


void TIMER1_VidCallback(void(*pfun)(void))
{
    4334:	df 93       	push	r29
    4336:	cf 93       	push	r28
    4338:	00 d0       	rcall	.+0      	; 0x433a <TIMER1_VidCallback+0x6>
    433a:	cd b7       	in	r28, 0x3d	; 61
    433c:	de b7       	in	r29, 0x3e	; 62
    433e:	9a 83       	std	Y+2, r25	; 0x02
    4340:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_callback=pfun;
    4342:	89 81       	ldd	r24, Y+1	; 0x01
    4344:	9a 81       	ldd	r25, Y+2	; 0x02
    4346:	90 93 6d 01 	sts	0x016D, r25
    434a:	80 93 6c 01 	sts	0x016C, r24
}
    434e:	0f 90       	pop	r0
    4350:	0f 90       	pop	r0
    4352:	cf 91       	pop	r28
    4354:	df 91       	pop	r29
    4356:	08 95       	ret

00004358 <TIMER1_VidICUcallback>:

void  TIMER1_VidICUcallback(void(*pfun)(void))
{
    4358:	df 93       	push	r29
    435a:	cf 93       	push	r28
    435c:	00 d0       	rcall	.+0      	; 0x435e <TIMER1_VidICUcallback+0x6>
    435e:	cd b7       	in	r28, 0x3d	; 61
    4360:	de b7       	in	r29, 0x3e	; 62
    4362:	9a 83       	std	Y+2, r25	; 0x02
    4364:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_ICU_callback=pfun;
    4366:	89 81       	ldd	r24, Y+1	; 0x01
    4368:	9a 81       	ldd	r25, Y+2	; 0x02
    436a:	90 93 6f 01 	sts	0x016F, r25
    436e:	80 93 6e 01 	sts	0x016E, r24
}
    4372:	0f 90       	pop	r0
    4374:	0f 90       	pop	r0
    4376:	cf 91       	pop	r28
    4378:	df 91       	pop	r29
    437a:	08 95       	ret

0000437c <TIMER1_VidSetClock>:


void TIMER1_VidSetClock()
{
    437c:	df 93       	push	r29
    437e:	cf 93       	push	r28
    4380:	cd b7       	in	r28, 0x3d	; 61
    4382:	de b7       	in	r29, 0x3e	; 62
	/*Clear CS0,CS1,CS2	 bits*/
	TCCR1B=TCCR1B&0b11111000;
    4384:	ae e4       	ldi	r26, 0x4E	; 78
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	ee e4       	ldi	r30, 0x4E	; 78
    438a:	f0 e0       	ldi	r31, 0x00	; 0
    438c:	80 81       	ld	r24, Z
    438e:	88 7f       	andi	r24, 0xF8	; 248
    4390:	8c 93       	st	X, r24

#if TIMER1_CLOCK_MODE == MCU_CLOCK
	TCCR1B=TCCR1B|1;
#elif TIMER1_CLOCK_MODE == DIVIDE_8
	TCCR1B=TCCR1B|2;
    4392:	ae e4       	ldi	r26, 0x4E	; 78
    4394:	b0 e0       	ldi	r27, 0x00	; 0
    4396:	ee e4       	ldi	r30, 0x4E	; 78
    4398:	f0 e0       	ldi	r31, 0x00	; 0
    439a:	80 81       	ld	r24, Z
    439c:	82 60       	ori	r24, 0x02	; 2
    439e:	8c 93       	st	X, r24
	TCCR1B=TCCR1B|6;
#elif TIMER1_CLOCK_MODE == T0_RISING
	TCCR1B=TCCR1B|7;
#endif

}
    43a0:	cf 91       	pop	r28
    43a2:	df 91       	pop	r29
    43a4:	08 95       	ret

000043a6 <TIMER1_VidStop>:

void TIMER1_VidStop()
{
    43a6:	df 93       	push	r29
    43a8:	cf 93       	push	r28
    43aa:	cd b7       	in	r28, 0x3d	; 61
    43ac:	de b7       	in	r29, 0x3e	; 62
	TCCR1B=0;
    43ae:	ee e4       	ldi	r30, 0x4E	; 78
    43b0:	f0 e0       	ldi	r31, 0x00	; 0
    43b2:	10 82       	st	Z, r1
}
    43b4:	cf 91       	pop	r28
    43b6:	df 91       	pop	r29
    43b8:	08 95       	ret

000043ba <Servo>:


void Servo()
{
    43ba:	df 93       	push	r29
    43bc:	cf 93       	push	r28
    43be:	cd b7       	in	r28, 0x3d	; 61
    43c0:	de b7       	in	r29, 0x3e	; 62
	ICR1H=0;
    43c2:	e7 e4       	ldi	r30, 0x47	; 71
    43c4:	f0 e0       	ldi	r31, 0x00	; 0
    43c6:	10 82       	st	Z, r1
	ICR1L=255;
    43c8:	e6 e4       	ldi	r30, 0x46	; 70
    43ca:	f0 e0       	ldi	r31, 0x00	; 0
    43cc:	8f ef       	ldi	r24, 0xFF	; 255
    43ce:	80 83       	st	Z, r24
	OCR1AH=0;
    43d0:	eb e4       	ldi	r30, 0x4B	; 75
    43d2:	f0 e0       	ldi	r31, 0x00	; 0
    43d4:	10 82       	st	Z, r1
	OCR1AL=187;
    43d6:	ea e4       	ldi	r30, 0x4A	; 74
    43d8:	f0 e0       	ldi	r31, 0x00	; 0
    43da:	8b eb       	ldi	r24, 0xBB	; 187
    43dc:	80 83       	st	Z, r24

}
    43de:	cf 91       	pop	r28
    43e0:	df 91       	pop	r29
    43e2:	08 95       	ret

000043e4 <TIMER1_VidInit>:

void TIMER1_VidInit()
{
    43e4:	df 93       	push	r29
    43e6:	cf 93       	push	r28
    43e8:	cd b7       	in	r28, 0x3d	; 61
    43ea:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    43ec:	af e5       	ldi	r26, 0x5F	; 95
    43ee:	b0 e0       	ldi	r27, 0x00	; 0
    43f0:	ef e5       	ldi	r30, 0x5F	; 95
    43f2:	f0 e0       	ldi	r31, 0x00	; 0
    43f4:	80 81       	ld	r24, Z
    43f6:	80 68       	ori	r24, 0x80	; 128
    43f8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,WGM12);
	CLR_BIT(TCCR1B,WGM13);
	/*input capture*/
    SET_BIT(TCCR1B,6);
#elif TIMER1_OPERATING_MODE == FAST_PWM
	CLR_BIT(TCCR1A,COM1A0);
    43fa:	af e4       	ldi	r26, 0x4F	; 79
    43fc:	b0 e0       	ldi	r27, 0x00	; 0
    43fe:	ef e4       	ldi	r30, 0x4F	; 79
    4400:	f0 e0       	ldi	r31, 0x00	; 0
    4402:	80 81       	ld	r24, Z
    4404:	8f 7b       	andi	r24, 0xBF	; 191
    4406:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    4408:	af e4       	ldi	r26, 0x4F	; 79
    440a:	b0 e0       	ldi	r27, 0x00	; 0
    440c:	ef e4       	ldi	r30, 0x4F	; 79
    440e:	f0 e0       	ldi	r31, 0x00	; 0
    4410:	80 81       	ld	r24, Z
    4412:	80 68       	ori	r24, 0x80	; 128
    4414:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,COM1B0);
    4416:	af e4       	ldi	r26, 0x4F	; 79
    4418:	b0 e0       	ldi	r27, 0x00	; 0
    441a:	ef e4       	ldi	r30, 0x4F	; 79
    441c:	f0 e0       	ldi	r31, 0x00	; 0
    441e:	80 81       	ld	r24, Z
    4420:	8f 7e       	andi	r24, 0xEF	; 239
    4422:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
    4424:	af e4       	ldi	r26, 0x4F	; 79
    4426:	b0 e0       	ldi	r27, 0x00	; 0
    4428:	ef e4       	ldi	r30, 0x4F	; 79
    442a:	f0 e0       	ldi	r31, 0x00	; 0
    442c:	80 81       	ld	r24, Z
    442e:	80 62       	ori	r24, 0x20	; 32
    4430:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,FOC1A);
    4432:	af e4       	ldi	r26, 0x4F	; 79
    4434:	b0 e0       	ldi	r27, 0x00	; 0
    4436:	ef e4       	ldi	r30, 0x4F	; 79
    4438:	f0 e0       	ldi	r31, 0x00	; 0
    443a:	80 81       	ld	r24, Z
    443c:	87 7f       	andi	r24, 0xF7	; 247
    443e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,FOC1B);
    4440:	af e4       	ldi	r26, 0x4F	; 79
    4442:	b0 e0       	ldi	r27, 0x00	; 0
    4444:	ef e4       	ldi	r30, 0x4F	; 79
    4446:	f0 e0       	ldi	r31, 0x00	; 0
    4448:	80 81       	ld	r24, Z
    444a:	8b 7f       	andi	r24, 0xFB	; 251
    444c:	8c 93       	st	X, r24
	/*FAST PWM ICR1 as TOP*/
	CLR_BIT(TCCR1A,WGM10);
    444e:	af e4       	ldi	r26, 0x4F	; 79
    4450:	b0 e0       	ldi	r27, 0x00	; 0
    4452:	ef e4       	ldi	r30, 0x4F	; 79
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	80 81       	ld	r24, Z
    4458:	8e 7f       	andi	r24, 0xFE	; 254
    445a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    445c:	af e4       	ldi	r26, 0x4F	; 79
    445e:	b0 e0       	ldi	r27, 0x00	; 0
    4460:	ef e4       	ldi	r30, 0x4F	; 79
    4462:	f0 e0       	ldi	r31, 0x00	; 0
    4464:	80 81       	ld	r24, Z
    4466:	82 60       	ori	r24, 0x02	; 2
    4468:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    446a:	ae e4       	ldi	r26, 0x4E	; 78
    446c:	b0 e0       	ldi	r27, 0x00	; 0
    446e:	ee e4       	ldi	r30, 0x4E	; 78
    4470:	f0 e0       	ldi	r31, 0x00	; 0
    4472:	80 81       	ld	r24, Z
    4474:	88 60       	ori	r24, 0x08	; 8
    4476:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    4478:	ae e4       	ldi	r26, 0x4E	; 78
    447a:	b0 e0       	ldi	r27, 0x00	; 0
    447c:	ee e4       	ldi	r30, 0x4E	; 78
    447e:	f0 e0       	ldi	r31, 0x00	; 0
    4480:	80 81       	ld	r24, Z
    4482:	80 61       	ori	r24, 0x10	; 16
    4484:	8c 93       	st	X, r24
	/*Enable Timer interrupts*/
	/*SET_BIT(TIMSK,OCIE1A);
	SET_BIT(TIMSK,TOIE1);
	SET_BIT(TIMSK,TICIE1);*/
#endif
	TIMER1_VidSetClock();
    4486:	0e 94 be 21 	call	0x437c	; 0x437c <TIMER1_VidSetClock>
}
    448a:	cf 91       	pop	r28
    448c:	df 91       	pop	r29
    448e:	08 95       	ret

00004490 <TIMER1_VidICURisingEdge>:

void TIMER1_VidICURisingEdge()
{
    4490:	df 93       	push	r29
    4492:	cf 93       	push	r28
    4494:	cd b7       	in	r28, 0x3d	; 61
    4496:	de b7       	in	r29, 0x3e	; 62
	   SET_BIT(TCCR1B,6);
    4498:	ae e4       	ldi	r26, 0x4E	; 78
    449a:	b0 e0       	ldi	r27, 0x00	; 0
    449c:	ee e4       	ldi	r30, 0x4E	; 78
    449e:	f0 e0       	ldi	r31, 0x00	; 0
    44a0:	80 81       	ld	r24, Z
    44a2:	80 64       	ori	r24, 0x40	; 64
    44a4:	8c 93       	st	X, r24
}
    44a6:	cf 91       	pop	r28
    44a8:	df 91       	pop	r29
    44aa:	08 95       	ret

000044ac <TIMER1_VidICUFallingEdge>:

void TIMER1_VidICUFallingEdge()
{
    44ac:	df 93       	push	r29
    44ae:	cf 93       	push	r28
    44b0:	cd b7       	in	r28, 0x3d	; 61
    44b2:	de b7       	in	r29, 0x3e	; 62
	   CLR_BIT(TCCR1B,6);
    44b4:	ae e4       	ldi	r26, 0x4E	; 78
    44b6:	b0 e0       	ldi	r27, 0x00	; 0
    44b8:	ee e4       	ldi	r30, 0x4E	; 78
    44ba:	f0 e0       	ldi	r31, 0x00	; 0
    44bc:	80 81       	ld	r24, Z
    44be:	8f 7b       	andi	r24, 0xBF	; 191
    44c0:	8c 93       	st	X, r24
}
    44c2:	cf 91       	pop	r28
    44c4:	df 91       	pop	r29
    44c6:	08 95       	ret

000044c8 <TIMER1_VidSetCompareMatchRegA>:


void TIMER1_VidSetCompareMatchRegA(u16 value)
{
    44c8:	df 93       	push	r29
    44ca:	cf 93       	push	r28
    44cc:	00 d0       	rcall	.+0      	; 0x44ce <TIMER1_VidSetCompareMatchRegA+0x6>
    44ce:	cd b7       	in	r28, 0x3d	; 61
    44d0:	de b7       	in	r29, 0x3e	; 62
    44d2:	9a 83       	std	Y+2, r25	; 0x02
    44d4:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH=(u8)(value>>8);
    44d6:	eb e4       	ldi	r30, 0x4B	; 75
    44d8:	f0 e0       	ldi	r31, 0x00	; 0
    44da:	89 81       	ldd	r24, Y+1	; 0x01
    44dc:	9a 81       	ldd	r25, Y+2	; 0x02
    44de:	89 2f       	mov	r24, r25
    44e0:	99 27       	eor	r25, r25
    44e2:	80 83       	st	Z, r24
	OCR1AL=(u8)value;
    44e4:	ea e4       	ldi	r30, 0x4A	; 74
    44e6:	f0 e0       	ldi	r31, 0x00	; 0
    44e8:	89 81       	ldd	r24, Y+1	; 0x01
    44ea:	80 83       	st	Z, r24

}
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	cf 91       	pop	r28
    44f2:	df 91       	pop	r29
    44f4:	08 95       	ret

000044f6 <TIMER1_VidSetCompareMatchRegB>:

void TIMER1_VidSetCompareMatchRegB(u16 value)
{
    44f6:	df 93       	push	r29
    44f8:	cf 93       	push	r28
    44fa:	00 d0       	rcall	.+0      	; 0x44fc <TIMER1_VidSetCompareMatchRegB+0x6>
    44fc:	cd b7       	in	r28, 0x3d	; 61
    44fe:	de b7       	in	r29, 0x3e	; 62
    4500:	9a 83       	std	Y+2, r25	; 0x02
    4502:	89 83       	std	Y+1, r24	; 0x01

	OCR1BH=(u8)(value>>8);
    4504:	e9 e4       	ldi	r30, 0x49	; 73
    4506:	f0 e0       	ldi	r31, 0x00	; 0
    4508:	89 81       	ldd	r24, Y+1	; 0x01
    450a:	9a 81       	ldd	r25, Y+2	; 0x02
    450c:	89 2f       	mov	r24, r25
    450e:	99 27       	eor	r25, r25
    4510:	80 83       	st	Z, r24
	OCR1BL=(u8)value;
    4512:	e8 e4       	ldi	r30, 0x48	; 72
    4514:	f0 e0       	ldi	r31, 0x00	; 0
    4516:	89 81       	ldd	r24, Y+1	; 0x01
    4518:	80 83       	st	Z, r24
}
    451a:	0f 90       	pop	r0
    451c:	0f 90       	pop	r0
    451e:	cf 91       	pop	r28
    4520:	df 91       	pop	r29
    4522:	08 95       	ret

00004524 <TIMER1_VidSetICR1Reg>:

void TIMER1_VidSetICR1Reg(u16 value)
{
    4524:	df 93       	push	r29
    4526:	cf 93       	push	r28
    4528:	00 d0       	rcall	.+0      	; 0x452a <TIMER1_VidSetICR1Reg+0x6>
    452a:	cd b7       	in	r28, 0x3d	; 61
    452c:	de b7       	in	r29, 0x3e	; 62
    452e:	9a 83       	std	Y+2, r25	; 0x02
    4530:	89 83       	std	Y+1, r24	; 0x01
	ICR1H=(u8)(value>>8);
    4532:	e7 e4       	ldi	r30, 0x47	; 71
    4534:	f0 e0       	ldi	r31, 0x00	; 0
    4536:	89 81       	ldd	r24, Y+1	; 0x01
    4538:	9a 81       	ldd	r25, Y+2	; 0x02
    453a:	89 2f       	mov	r24, r25
    453c:	99 27       	eor	r25, r25
    453e:	80 83       	st	Z, r24
	ICR1L=(u8)value;
    4540:	e6 e4       	ldi	r30, 0x46	; 70
    4542:	f0 e0       	ldi	r31, 0x00	; 0
    4544:	89 81       	ldd	r24, Y+1	; 0x01
    4546:	80 83       	st	Z, r24
}
    4548:	0f 90       	pop	r0
    454a:	0f 90       	pop	r0
    454c:	cf 91       	pop	r28
    454e:	df 91       	pop	r29
    4550:	08 95       	ret

00004552 <TIMER1_VidSetCounterRegister>:

void TIMER1_VidSetCounterRegister(u16 value)
{
    4552:	df 93       	push	r29
    4554:	cf 93       	push	r28
    4556:	00 d0       	rcall	.+0      	; 0x4558 <TIMER1_VidSetCounterRegister+0x6>
    4558:	cd b7       	in	r28, 0x3d	; 61
    455a:	de b7       	in	r29, 0x3e	; 62
    455c:	9a 83       	std	Y+2, r25	; 0x02
    455e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1H=(u8)(value>>8);
    4560:	ed e4       	ldi	r30, 0x4D	; 77
    4562:	f0 e0       	ldi	r31, 0x00	; 0
    4564:	89 81       	ldd	r24, Y+1	; 0x01
    4566:	9a 81       	ldd	r25, Y+2	; 0x02
    4568:	89 2f       	mov	r24, r25
    456a:	99 27       	eor	r25, r25
    456c:	80 83       	st	Z, r24
	TCNT1L=(u8)value;
    456e:	ec e4       	ldi	r30, 0x4C	; 76
    4570:	f0 e0       	ldi	r31, 0x00	; 0
    4572:	89 81       	ldd	r24, Y+1	; 0x01
    4574:	80 83       	st	Z, r24
}
    4576:	0f 90       	pop	r0
    4578:	0f 90       	pop	r0
    457a:	cf 91       	pop	r28
    457c:	df 91       	pop	r29
    457e:	08 95       	ret

00004580 <TIMER1_VidGetCounterRegister>:

u16 TIMER1_VidGetCounterRegister()
{
    4580:	df 93       	push	r29
    4582:	cf 93       	push	r28
    4584:	00 d0       	rcall	.+0      	; 0x4586 <TIMER1_VidGetCounterRegister+0x6>
    4586:	00 d0       	rcall	.+0      	; 0x4588 <TIMER1_VidGetCounterRegister+0x8>
    4588:	cd b7       	in	r28, 0x3d	; 61
    458a:	de b7       	in	r29, 0x3e	; 62
	u8 Low=TCNT1L;
    458c:	ec e4       	ldi	r30, 0x4C	; 76
    458e:	f0 e0       	ldi	r31, 0x00	; 0
    4590:	80 81       	ld	r24, Z
    4592:	8c 83       	std	Y+4, r24	; 0x04
	u8 high=TCNT1H;
    4594:	ed e4       	ldi	r30, 0x4D	; 77
    4596:	f0 e0       	ldi	r31, 0x00	; 0
    4598:	80 81       	ld	r24, Z
    459a:	8b 83       	std	Y+3, r24	; 0x03
	u16 shifted_high=high<<8;
    459c:	8b 81       	ldd	r24, Y+3	; 0x03
    459e:	88 2f       	mov	r24, r24
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	98 2f       	mov	r25, r24
    45a4:	88 27       	eor	r24, r24
    45a6:	9a 83       	std	Y+2, r25	; 0x02
    45a8:	89 83       	std	Y+1, r24	; 0x01
	return(shifted_high+Low);
    45aa:	8c 81       	ldd	r24, Y+4	; 0x04
    45ac:	28 2f       	mov	r18, r24
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	89 81       	ldd	r24, Y+1	; 0x01
    45b2:	9a 81       	ldd	r25, Y+2	; 0x02
    45b4:	82 0f       	add	r24, r18
    45b6:	93 1f       	adc	r25, r19

}
    45b8:	0f 90       	pop	r0
    45ba:	0f 90       	pop	r0
    45bc:	0f 90       	pop	r0
    45be:	0f 90       	pop	r0
    45c0:	cf 91       	pop	r28
    45c2:	df 91       	pop	r29
    45c4:	08 95       	ret

000045c6 <TIMER1_VidGetICR1Register>:


u16 TIMER1_VidGetICR1Register()
{
    45c6:	df 93       	push	r29
    45c8:	cf 93       	push	r28
    45ca:	00 d0       	rcall	.+0      	; 0x45cc <TIMER1_VidGetICR1Register+0x6>
    45cc:	00 d0       	rcall	.+0      	; 0x45ce <TIMER1_VidGetICR1Register+0x8>
    45ce:	cd b7       	in	r28, 0x3d	; 61
    45d0:	de b7       	in	r29, 0x3e	; 62
	u8 Low=ICR1L;
    45d2:	e6 e4       	ldi	r30, 0x46	; 70
    45d4:	f0 e0       	ldi	r31, 0x00	; 0
    45d6:	80 81       	ld	r24, Z
    45d8:	8c 83       	std	Y+4, r24	; 0x04
	u8 high=ICR1H;
    45da:	e7 e4       	ldi	r30, 0x47	; 71
    45dc:	f0 e0       	ldi	r31, 0x00	; 0
    45de:	80 81       	ld	r24, Z
    45e0:	8b 83       	std	Y+3, r24	; 0x03
	u16 shifted_high=high<<8;
    45e2:	8b 81       	ldd	r24, Y+3	; 0x03
    45e4:	88 2f       	mov	r24, r24
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	98 2f       	mov	r25, r24
    45ea:	88 27       	eor	r24, r24
    45ec:	9a 83       	std	Y+2, r25	; 0x02
    45ee:	89 83       	std	Y+1, r24	; 0x01
	return(shifted_high+Low);
    45f0:	8c 81       	ldd	r24, Y+4	; 0x04
    45f2:	28 2f       	mov	r18, r24
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	89 81       	ldd	r24, Y+1	; 0x01
    45f8:	9a 81       	ldd	r25, Y+2	; 0x02
    45fa:	82 0f       	add	r24, r18
    45fc:	93 1f       	adc	r25, r19

}
    45fe:	0f 90       	pop	r0
    4600:	0f 90       	pop	r0
    4602:	0f 90       	pop	r0
    4604:	0f 90       	pop	r0
    4606:	cf 91       	pop	r28
    4608:	df 91       	pop	r29
    460a:	08 95       	ret

0000460c <TIMER1_VidPWMGenerationOC1A>:

void TIMER1_VidPWMGenerationOC1A(f32 PWMFreqKHz,f32 DutyPercentage)
{
    460c:	df 93       	push	r29
    460e:	cf 93       	push	r28
    4610:	cd b7       	in	r28, 0x3d	; 61
    4612:	de b7       	in	r29, 0x3e	; 62
    4614:	2a 97       	sbiw	r28, 0x0a	; 10
    4616:	0f b6       	in	r0, 0x3f	; 63
    4618:	f8 94       	cli
    461a:	de bf       	out	0x3e, r29	; 62
    461c:	0f be       	out	0x3f, r0	; 63
    461e:	cd bf       	out	0x3d, r28	; 61
    4620:	6b 83       	std	Y+3, r22	; 0x03
    4622:	7c 83       	std	Y+4, r23	; 0x04
    4624:	8d 83       	std	Y+5, r24	; 0x05
    4626:	9e 83       	std	Y+6, r25	; 0x06
    4628:	2f 83       	std	Y+7, r18	; 0x07
    462a:	38 87       	std	Y+8, r19	; 0x08
    462c:	49 87       	std	Y+9, r20	; 0x09
    462e:	5a 87       	std	Y+10, r21	; 0x0a
	u16 TOP=(MCU_INPUT_FREQ)/(PWMFreqKHz*1000*PRESCALER)-1;
    4630:	6b 81       	ldd	r22, Y+3	; 0x03
    4632:	7c 81       	ldd	r23, Y+4	; 0x04
    4634:	8d 81       	ldd	r24, Y+5	; 0x05
    4636:	9e 81       	ldd	r25, Y+6	; 0x06
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	4a e7       	ldi	r20, 0x7A	; 122
    463e:	54 e4       	ldi	r21, 0x44	; 68
    4640:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    4644:	dc 01       	movw	r26, r24
    4646:	cb 01       	movw	r24, r22
    4648:	bc 01       	movw	r22, r24
    464a:	cd 01       	movw	r24, r26
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	40 e0       	ldi	r20, 0x00	; 0
    4652:	51 e4       	ldi	r21, 0x41	; 65
    4654:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    4658:	dc 01       	movw	r26, r24
    465a:	cb 01       	movw	r24, r22
    465c:	9c 01       	movw	r18, r24
    465e:	ad 01       	movw	r20, r26
    4660:	60 e0       	ldi	r22, 0x00	; 0
    4662:	74 e2       	ldi	r23, 0x24	; 36
    4664:	84 ef       	ldi	r24, 0xF4	; 244
    4666:	9a e4       	ldi	r25, 0x4A	; 74
    4668:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    466c:	dc 01       	movw	r26, r24
    466e:	cb 01       	movw	r24, r22
    4670:	bc 01       	movw	r22, r24
    4672:	cd 01       	movw	r24, r26
    4674:	20 e0       	ldi	r18, 0x00	; 0
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	40 e8       	ldi	r20, 0x80	; 128
    467a:	5f e3       	ldi	r21, 0x3F	; 63
    467c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__subsf3>
    4680:	dc 01       	movw	r26, r24
    4682:	cb 01       	movw	r24, r22
    4684:	bc 01       	movw	r22, r24
    4686:	cd 01       	movw	r24, r26
    4688:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    468c:	dc 01       	movw	r26, r24
    468e:	cb 01       	movw	r24, r22
    4690:	9a 83       	std	Y+2, r25	; 0x02
    4692:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_VidSetICR1Reg(TOP);
    4694:	89 81       	ldd	r24, Y+1	; 0x01
    4696:	9a 81       	ldd	r25, Y+2	; 0x02
    4698:	0e 94 92 22 	call	0x4524	; 0x4524 <TIMER1_VidSetICR1Reg>
	TIMER1_VidSetCompareMatchRegA(TOP*DutyPercentage/100);
    469c:	89 81       	ldd	r24, Y+1	; 0x01
    469e:	9a 81       	ldd	r25, Y+2	; 0x02
    46a0:	cc 01       	movw	r24, r24
    46a2:	a0 e0       	ldi	r26, 0x00	; 0
    46a4:	b0 e0       	ldi	r27, 0x00	; 0
    46a6:	bc 01       	movw	r22, r24
    46a8:	cd 01       	movw	r24, r26
    46aa:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__floatunsisf>
    46ae:	dc 01       	movw	r26, r24
    46b0:	cb 01       	movw	r24, r22
    46b2:	bc 01       	movw	r22, r24
    46b4:	cd 01       	movw	r24, r26
    46b6:	2f 81       	ldd	r18, Y+7	; 0x07
    46b8:	38 85       	ldd	r19, Y+8	; 0x08
    46ba:	49 85       	ldd	r20, Y+9	; 0x09
    46bc:	5a 85       	ldd	r21, Y+10	; 0x0a
    46be:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    46c2:	dc 01       	movw	r26, r24
    46c4:	cb 01       	movw	r24, r22
    46c6:	bc 01       	movw	r22, r24
    46c8:	cd 01       	movw	r24, r26
    46ca:	20 e0       	ldi	r18, 0x00	; 0
    46cc:	30 e0       	ldi	r19, 0x00	; 0
    46ce:	48 ec       	ldi	r20, 0xC8	; 200
    46d0:	52 e4       	ldi	r21, 0x42	; 66
    46d2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    46d6:	dc 01       	movw	r26, r24
    46d8:	cb 01       	movw	r24, r22
    46da:	bc 01       	movw	r22, r24
    46dc:	cd 01       	movw	r24, r26
    46de:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    46e2:	dc 01       	movw	r26, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	0e 94 64 22 	call	0x44c8	; 0x44c8 <TIMER1_VidSetCompareMatchRegA>
}
    46ea:	2a 96       	adiw	r28, 0x0a	; 10
    46ec:	0f b6       	in	r0, 0x3f	; 63
    46ee:	f8 94       	cli
    46f0:	de bf       	out	0x3e, r29	; 62
    46f2:	0f be       	out	0x3f, r0	; 63
    46f4:	cd bf       	out	0x3d, r28	; 61
    46f6:	cf 91       	pop	r28
    46f8:	df 91       	pop	r29
    46fa:	08 95       	ret

000046fc <TIMER1_VidPWMGenerationOC1B>:

void TIMER1_VidPWMGenerationOC1B(f32 PWMFreqKHz,f32 DutyPercentage)
{
    46fc:	df 93       	push	r29
    46fe:	cf 93       	push	r28
    4700:	cd b7       	in	r28, 0x3d	; 61
    4702:	de b7       	in	r29, 0x3e	; 62
    4704:	2a 97       	sbiw	r28, 0x0a	; 10
    4706:	0f b6       	in	r0, 0x3f	; 63
    4708:	f8 94       	cli
    470a:	de bf       	out	0x3e, r29	; 62
    470c:	0f be       	out	0x3f, r0	; 63
    470e:	cd bf       	out	0x3d, r28	; 61
    4710:	6b 83       	std	Y+3, r22	; 0x03
    4712:	7c 83       	std	Y+4, r23	; 0x04
    4714:	8d 83       	std	Y+5, r24	; 0x05
    4716:	9e 83       	std	Y+6, r25	; 0x06
    4718:	2f 83       	std	Y+7, r18	; 0x07
    471a:	38 87       	std	Y+8, r19	; 0x08
    471c:	49 87       	std	Y+9, r20	; 0x09
    471e:	5a 87       	std	Y+10, r21	; 0x0a
	u16 TOP=(MCU_INPUT_FREQ)/(PWMFreqKHz*1000*PRESCALER)-1;
    4720:	6b 81       	ldd	r22, Y+3	; 0x03
    4722:	7c 81       	ldd	r23, Y+4	; 0x04
    4724:	8d 81       	ldd	r24, Y+5	; 0x05
    4726:	9e 81       	ldd	r25, Y+6	; 0x06
    4728:	20 e0       	ldi	r18, 0x00	; 0
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	4a e7       	ldi	r20, 0x7A	; 122
    472e:	54 e4       	ldi	r21, 0x44	; 68
    4730:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    4734:	dc 01       	movw	r26, r24
    4736:	cb 01       	movw	r24, r22
    4738:	bc 01       	movw	r22, r24
    473a:	cd 01       	movw	r24, r26
    473c:	20 e0       	ldi	r18, 0x00	; 0
    473e:	30 e0       	ldi	r19, 0x00	; 0
    4740:	40 e0       	ldi	r20, 0x00	; 0
    4742:	51 e4       	ldi	r21, 0x41	; 65
    4744:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    4748:	dc 01       	movw	r26, r24
    474a:	cb 01       	movw	r24, r22
    474c:	9c 01       	movw	r18, r24
    474e:	ad 01       	movw	r20, r26
    4750:	60 e0       	ldi	r22, 0x00	; 0
    4752:	74 e2       	ldi	r23, 0x24	; 36
    4754:	84 ef       	ldi	r24, 0xF4	; 244
    4756:	9a e4       	ldi	r25, 0x4A	; 74
    4758:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    475c:	dc 01       	movw	r26, r24
    475e:	cb 01       	movw	r24, r22
    4760:	bc 01       	movw	r22, r24
    4762:	cd 01       	movw	r24, r26
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	40 e8       	ldi	r20, 0x80	; 128
    476a:	5f e3       	ldi	r21, 0x3F	; 63
    476c:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__subsf3>
    4770:	dc 01       	movw	r26, r24
    4772:	cb 01       	movw	r24, r22
    4774:	bc 01       	movw	r22, r24
    4776:	cd 01       	movw	r24, r26
    4778:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    477c:	dc 01       	movw	r26, r24
    477e:	cb 01       	movw	r24, r22
    4780:	9a 83       	std	Y+2, r25	; 0x02
    4782:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_VidSetICR1Reg(TOP);
    4784:	89 81       	ldd	r24, Y+1	; 0x01
    4786:	9a 81       	ldd	r25, Y+2	; 0x02
    4788:	0e 94 92 22 	call	0x4524	; 0x4524 <TIMER1_VidSetICR1Reg>
	TIMER1_VidSetCompareMatchRegB(TOP*DutyPercentage/100);
    478c:	89 81       	ldd	r24, Y+1	; 0x01
    478e:	9a 81       	ldd	r25, Y+2	; 0x02
    4790:	cc 01       	movw	r24, r24
    4792:	a0 e0       	ldi	r26, 0x00	; 0
    4794:	b0 e0       	ldi	r27, 0x00	; 0
    4796:	bc 01       	movw	r22, r24
    4798:	cd 01       	movw	r24, r26
    479a:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__floatunsisf>
    479e:	dc 01       	movw	r26, r24
    47a0:	cb 01       	movw	r24, r22
    47a2:	bc 01       	movw	r22, r24
    47a4:	cd 01       	movw	r24, r26
    47a6:	2f 81       	ldd	r18, Y+7	; 0x07
    47a8:	38 85       	ldd	r19, Y+8	; 0x08
    47aa:	49 85       	ldd	r20, Y+9	; 0x09
    47ac:	5a 85       	ldd	r21, Y+10	; 0x0a
    47ae:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    47b2:	dc 01       	movw	r26, r24
    47b4:	cb 01       	movw	r24, r22
    47b6:	bc 01       	movw	r22, r24
    47b8:	cd 01       	movw	r24, r26
    47ba:	20 e0       	ldi	r18, 0x00	; 0
    47bc:	30 e0       	ldi	r19, 0x00	; 0
    47be:	48 ec       	ldi	r20, 0xC8	; 200
    47c0:	52 e4       	ldi	r21, 0x42	; 66
    47c2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    47c6:	dc 01       	movw	r26, r24
    47c8:	cb 01       	movw	r24, r22
    47ca:	bc 01       	movw	r22, r24
    47cc:	cd 01       	movw	r24, r26
    47ce:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    47d2:	dc 01       	movw	r26, r24
    47d4:	cb 01       	movw	r24, r22
    47d6:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <TIMER1_VidSetCompareMatchRegB>
}
    47da:	2a 96       	adiw	r28, 0x0a	; 10
    47dc:	0f b6       	in	r0, 0x3f	; 63
    47de:	f8 94       	cli
    47e0:	de bf       	out	0x3e, r29	; 62
    47e2:	0f be       	out	0x3f, r0	; 63
    47e4:	cd bf       	out	0x3d, r28	; 61
    47e6:	cf 91       	pop	r28
    47e8:	df 91       	pop	r29
    47ea:	08 95       	ret

000047ec <TIMER1_VidClearICF1>:

void TIMER1_VidClearICF1()
{
    47ec:	df 93       	push	r29
    47ee:	cf 93       	push	r28
    47f0:	cd b7       	in	r28, 0x3d	; 61
    47f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR,ICF1);
    47f4:	a8 e5       	ldi	r26, 0x58	; 88
    47f6:	b0 e0       	ldi	r27, 0x00	; 0
    47f8:	e8 e5       	ldi	r30, 0x58	; 88
    47fa:	f0 e0       	ldi	r31, 0x00	; 0
    47fc:	80 81       	ld	r24, Z
    47fe:	80 62       	ori	r24, 0x20	; 32
    4800:	8c 93       	st	X, r24
}
    4802:	cf 91       	pop	r28
    4804:	df 91       	pop	r29
    4806:	08 95       	ret

00004808 <TIMER1_U8GetICF1>:

u8 TIMER1_U8GetICF1()
{
    4808:	df 93       	push	r29
    480a:	cf 93       	push	r28
    480c:	cd b7       	in	r28, 0x3d	; 61
    480e:	de b7       	in	r29, 0x3e	; 62
	return(GET_BIT(TIFR,ICF1));
    4810:	e8 e5       	ldi	r30, 0x58	; 88
    4812:	f0 e0       	ldi	r31, 0x00	; 0
    4814:	80 81       	ld	r24, Z
    4816:	82 95       	swap	r24
    4818:	86 95       	lsr	r24
    481a:	87 70       	andi	r24, 0x07	; 7
    481c:	81 70       	andi	r24, 0x01	; 1
}
    481e:	cf 91       	pop	r28
    4820:	df 91       	pop	r29
    4822:	08 95       	ret

00004824 <TIMER1_VidReadPWMusingICU1>:


void TIMER1_VidReadPWMusingICU1(f128*Freq,f32*Duty_cycle)
{
    4824:	ef 92       	push	r14
    4826:	ff 92       	push	r15
    4828:	0f 93       	push	r16
    482a:	1f 93       	push	r17
    482c:	df 93       	push	r29
    482e:	cf 93       	push	r28
    4830:	cd b7       	in	r28, 0x3d	; 61
    4832:	de b7       	in	r29, 0x3e	; 62
    4834:	2e 97       	sbiw	r28, 0x0e	; 14
    4836:	0f b6       	in	r0, 0x3f	; 63
    4838:	f8 94       	cli
    483a:	de bf       	out	0x3e, r29	; 62
    483c:	0f be       	out	0x3f, r0	; 63
    483e:	cd bf       	out	0x3d, r28	; 61
    4840:	9c 87       	std	Y+12, r25	; 0x0c
    4842:	8b 87       	std	Y+11, r24	; 0x0b
    4844:	7e 87       	std	Y+14, r23	; 0x0e
    4846:	6d 87       	std	Y+13, r22	; 0x0d
	u16 Snap1,Snap2,Snap3,High,Period;
	TIMER1_VidSetCounterRegister(0);
    4848:	80 e0       	ldi	r24, 0x00	; 0
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	0e 94 a9 22 	call	0x4552	; 0x4552 <TIMER1_VidSetCounterRegister>
	TIMER1_VidClearICF1();  	/* Clear ICF (Input Capture flag) flag */
    4850:	0e 94 f6 23 	call	0x47ec	; 0x47ec <TIMER1_VidClearICF1>
	TIMER1_VidICURisingEdge(); 	/* Rising edge, no prescaler */
    4854:	0e 94 48 22 	call	0x4490	; 0x4490 <TIMER1_VidICURisingEdge>

	while (TIMER1_U8GetICF1()==0);
    4858:	0e 94 04 24 	call	0x4808	; 0x4808 <TIMER1_U8GetICF1>
    485c:	88 23       	and	r24, r24
    485e:	e1 f3       	breq	.-8      	; 0x4858 <TIMER1_VidReadPWMusingICU1+0x34>
	Snap1 = TIMER1_VidGetICR1Register();  		/* Take value of capture register */
    4860:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <TIMER1_VidGetICR1Register>
    4864:	9a 87       	std	Y+10, r25	; 0x0a
    4866:	89 87       	std	Y+9, r24	; 0x09
	TIMER1_VidClearICF1();  	/* Clear ICF flag */
    4868:	0e 94 f6 23 	call	0x47ec	; 0x47ec <TIMER1_VidClearICF1>

	TIMER1_VidICUFallingEdge();	/* Falling edge, no prescaler */
    486c:	0e 94 56 22 	call	0x44ac	; 0x44ac <TIMER1_VidICUFallingEdge>
	while (TIMER1_U8GetICF1()== 0);
    4870:	0e 94 04 24 	call	0x4808	; 0x4808 <TIMER1_U8GetICF1>
    4874:	88 23       	and	r24, r24
    4876:	e1 f3       	breq	.-8      	; 0x4870 <TIMER1_VidReadPWMusingICU1+0x4c>
	Snap2 = TIMER1_VidGetICR1Register();
    4878:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <TIMER1_VidGetICR1Register>
    487c:	98 87       	std	Y+8, r25	; 0x08
    487e:	8f 83       	std	Y+7, r24	; 0x07
	TIMER1_VidClearICF1();   	/* Clear ICF flag */
    4880:	0e 94 f6 23 	call	0x47ec	; 0x47ec <TIMER1_VidClearICF1>

	TIMER1_VidICURisingEdge();  	/* Rising edge, no prescaler */
    4884:	0e 94 48 22 	call	0x4490	; 0x4490 <TIMER1_VidICURisingEdge>
	while (TIMER1_U8GetICF1()== 0);
    4888:	0e 94 04 24 	call	0x4808	; 0x4808 <TIMER1_U8GetICF1>
    488c:	88 23       	and	r24, r24
    488e:	e1 f3       	breq	.-8      	; 0x4888 <TIMER1_VidReadPWMusingICU1+0x64>
	Snap3 = TIMER1_VidGetICR1Register(); /* Take value of capture register */
    4890:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <TIMER1_VidGetICR1Register>
    4894:	9e 83       	std	Y+6, r25	; 0x06
    4896:	8d 83       	std	Y+5, r24	; 0x05
	TIMER1_VidClearICF1();    	/* Clear ICF flag */
    4898:	0e 94 f6 23 	call	0x47ec	; 0x47ec <TIMER1_VidClearICF1>
	if(Snap1<Snap2 && Snap2<Snap3)
    489c:	29 85       	ldd	r18, Y+9	; 0x09
    489e:	3a 85       	ldd	r19, Y+10	; 0x0a
    48a0:	8f 81       	ldd	r24, Y+7	; 0x07
    48a2:	98 85       	ldd	r25, Y+8	; 0x08
    48a4:	28 17       	cp	r18, r24
    48a6:	39 07       	cpc	r19, r25
    48a8:	08 f0       	brcs	.+2      	; 0x48ac <TIMER1_VidReadPWMusingICU1+0x88>
    48aa:	64 c0       	rjmp	.+200    	; 0x4974 <TIMER1_VidReadPWMusingICU1+0x150>
    48ac:	2f 81       	ldd	r18, Y+7	; 0x07
    48ae:	38 85       	ldd	r19, Y+8	; 0x08
    48b0:	8d 81       	ldd	r24, Y+5	; 0x05
    48b2:	9e 81       	ldd	r25, Y+6	; 0x06
    48b4:	28 17       	cp	r18, r24
    48b6:	39 07       	cpc	r19, r25
    48b8:	08 f0       	brcs	.+2      	; 0x48bc <TIMER1_VidReadPWMusingICU1+0x98>
    48ba:	5c c0       	rjmp	.+184    	; 0x4974 <TIMER1_VidReadPWMusingICU1+0x150>
	{
		High=Snap2-Snap1;
    48bc:	2f 81       	ldd	r18, Y+7	; 0x07
    48be:	38 85       	ldd	r19, Y+8	; 0x08
    48c0:	89 85       	ldd	r24, Y+9	; 0x09
    48c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    48c4:	a9 01       	movw	r20, r18
    48c6:	48 1b       	sub	r20, r24
    48c8:	59 0b       	sbc	r21, r25
    48ca:	ca 01       	movw	r24, r20
    48cc:	9c 83       	std	Y+4, r25	; 0x04
    48ce:	8b 83       	std	Y+3, r24	; 0x03
		Period=Snap3-Snap1;
    48d0:	2d 81       	ldd	r18, Y+5	; 0x05
    48d2:	3e 81       	ldd	r19, Y+6	; 0x06
    48d4:	89 85       	ldd	r24, Y+9	; 0x09
    48d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48d8:	a9 01       	movw	r20, r18
    48da:	48 1b       	sub	r20, r24
    48dc:	59 0b       	sbc	r21, r25
    48de:	ca 01       	movw	r24, r20
    48e0:	9a 83       	std	Y+2, r25	; 0x02
    48e2:	89 83       	std	Y+1, r24	; 0x01
		*Freq=((MCU_INPUT_FREQ/PRESCALER)/Period);
    48e4:	89 81       	ldd	r24, Y+1	; 0x01
    48e6:	9a 81       	ldd	r25, Y+2	; 0x02
    48e8:	9c 01       	movw	r18, r24
    48ea:	40 e0       	ldi	r20, 0x00	; 0
    48ec:	50 e0       	ldi	r21, 0x00	; 0
    48ee:	80 e4       	ldi	r24, 0x40	; 64
    48f0:	92 e4       	ldi	r25, 0x42	; 66
    48f2:	af e0       	ldi	r26, 0x0F	; 15
    48f4:	b0 e0       	ldi	r27, 0x00	; 0
    48f6:	bc 01       	movw	r22, r24
    48f8:	cd 01       	movw	r24, r26
    48fa:	0e 94 31 26 	call	0x4c62	; 0x4c62 <__divmodsi4>
    48fe:	da 01       	movw	r26, r20
    4900:	c9 01       	movw	r24, r18
    4902:	bc 01       	movw	r22, r24
    4904:	cd 01       	movw	r24, r26
    4906:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__floatsisf>
    490a:	dc 01       	movw	r26, r24
    490c:	cb 01       	movw	r24, r22
    490e:	eb 85       	ldd	r30, Y+11	; 0x0b
    4910:	fc 85       	ldd	r31, Y+12	; 0x0c
    4912:	80 83       	st	Z, r24
    4914:	91 83       	std	Z+1, r25	; 0x01
    4916:	a2 83       	std	Z+2, r26	; 0x02
    4918:	b3 83       	std	Z+3, r27	; 0x03
		*Duty_cycle =((f32)High/(f32)Period)*100;
    491a:	8b 81       	ldd	r24, Y+3	; 0x03
    491c:	9c 81       	ldd	r25, Y+4	; 0x04
    491e:	cc 01       	movw	r24, r24
    4920:	a0 e0       	ldi	r26, 0x00	; 0
    4922:	b0 e0       	ldi	r27, 0x00	; 0
    4924:	bc 01       	movw	r22, r24
    4926:	cd 01       	movw	r24, r26
    4928:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__floatunsisf>
    492c:	7b 01       	movw	r14, r22
    492e:	8c 01       	movw	r16, r24
    4930:	89 81       	ldd	r24, Y+1	; 0x01
    4932:	9a 81       	ldd	r25, Y+2	; 0x02
    4934:	cc 01       	movw	r24, r24
    4936:	a0 e0       	ldi	r26, 0x00	; 0
    4938:	b0 e0       	ldi	r27, 0x00	; 0
    493a:	bc 01       	movw	r22, r24
    493c:	cd 01       	movw	r24, r26
    493e:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <__floatunsisf>
    4942:	9b 01       	movw	r18, r22
    4944:	ac 01       	movw	r20, r24
    4946:	c8 01       	movw	r24, r16
    4948:	b7 01       	movw	r22, r14
    494a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__divsf3>
    494e:	dc 01       	movw	r26, r24
    4950:	cb 01       	movw	r24, r22
    4952:	bc 01       	movw	r22, r24
    4954:	cd 01       	movw	r24, r26
    4956:	20 e0       	ldi	r18, 0x00	; 0
    4958:	30 e0       	ldi	r19, 0x00	; 0
    495a:	48 ec       	ldi	r20, 0xC8	; 200
    495c:	52 e4       	ldi	r21, 0x42	; 66
    495e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    4962:	dc 01       	movw	r26, r24
    4964:	cb 01       	movw	r24, r22
    4966:	ed 85       	ldd	r30, Y+13	; 0x0d
    4968:	fe 85       	ldd	r31, Y+14	; 0x0e
    496a:	80 83       	st	Z, r24
    496c:	91 83       	std	Z+1, r25	; 0x01
    496e:	a2 83       	std	Z+2, r26	; 0x02
    4970:	b3 83       	std	Z+3, r27	; 0x03
    4972:	14 c0       	rjmp	.+40     	; 0x499c <TIMER1_VidReadPWMusingICU1+0x178>

	}
	else
	{
		*Freq=-1;
    4974:	eb 85       	ldd	r30, Y+11	; 0x0b
    4976:	fc 85       	ldd	r31, Y+12	; 0x0c
    4978:	80 e0       	ldi	r24, 0x00	; 0
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	a0 e8       	ldi	r26, 0x80	; 128
    497e:	bf eb       	ldi	r27, 0xBF	; 191
    4980:	80 83       	st	Z, r24
    4982:	91 83       	std	Z+1, r25	; 0x01
    4984:	a2 83       	std	Z+2, r26	; 0x02
    4986:	b3 83       	std	Z+3, r27	; 0x03
		*Duty_cycle=-1;
    4988:	ed 85       	ldd	r30, Y+13	; 0x0d
    498a:	fe 85       	ldd	r31, Y+14	; 0x0e
    498c:	80 e0       	ldi	r24, 0x00	; 0
    498e:	90 e0       	ldi	r25, 0x00	; 0
    4990:	a0 e8       	ldi	r26, 0x80	; 128
    4992:	bf eb       	ldi	r27, 0xBF	; 191
    4994:	80 83       	st	Z, r24
    4996:	91 83       	std	Z+1, r25	; 0x01
    4998:	a2 83       	std	Z+2, r26	; 0x02
    499a:	b3 83       	std	Z+3, r27	; 0x03
	}

}
    499c:	2e 96       	adiw	r28, 0x0e	; 14
    499e:	0f b6       	in	r0, 0x3f	; 63
    49a0:	f8 94       	cli
    49a2:	de bf       	out	0x3e, r29	; 62
    49a4:	0f be       	out	0x3f, r0	; 63
    49a6:	cd bf       	out	0x3d, r28	; 61
    49a8:	cf 91       	pop	r28
    49aa:	df 91       	pop	r29
    49ac:	1f 91       	pop	r17
    49ae:	0f 91       	pop	r16
    49b0:	ff 90       	pop	r15
    49b2:	ef 90       	pop	r14
    49b4:	08 95       	ret

000049b6 <UART_Vidinit>:
#include "DIO_interface.h"
#include "UART_private.h"



void UART_Vidinit(){
    49b6:	df 93       	push	r29
    49b8:	cf 93       	push	r28
    49ba:	0f 92       	push	r0
    49bc:	cd b7       	in	r28, 0x3d	; 61
    49be:	de b7       	in	r29, 0x3e	; 62

	u8 UCSRC_REG_help=0b10000000;
    49c0:	80 e8       	ldi	r24, 0x80	; 128
    49c2:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(UCSRB_REG,4); //Enable Receiver
    49c4:	aa e2       	ldi	r26, 0x2A	; 42
    49c6:	b0 e0       	ldi	r27, 0x00	; 0
    49c8:	ea e2       	ldi	r30, 0x2A	; 42
    49ca:	f0 e0       	ldi	r31, 0x00	; 0
    49cc:	80 81       	ld	r24, Z
    49ce:	80 61       	ori	r24, 0x10	; 16
    49d0:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG,3); //Enable Transmitter
    49d2:	aa e2       	ldi	r26, 0x2A	; 42
    49d4:	b0 e0       	ldi	r27, 0x00	; 0
    49d6:	ea e2       	ldi	r30, 0x2A	; 42
    49d8:	f0 e0       	ldi	r31, 0x00	; 0
    49da:	80 81       	ld	r24, Z
    49dc:	88 60       	ori	r24, 0x08	; 8
    49de:	8c 93       	st	X, r24

	/*UCSRC_REG*/
	//SET(UCSRC_REG_help,7); //URSEL Register Select
	/*USART Mode Select-> Asynchronous*/
	CLR_BIT(UCSRC_REG_help,6); //UMSEL (Asynchronous)
    49e0:	89 81       	ldd	r24, Y+1	; 0x01
    49e2:	8f 7b       	andi	r24, 0xBF	; 191
    49e4:	89 83       	std	Y+1, r24	; 0x01
	/*Parity Mode Disabled*/
	CLR_BIT(UCSRC_REG_help,5); //UPM1
    49e6:	89 81       	ldd	r24, Y+1	; 0x01
    49e8:	8f 7d       	andi	r24, 0xDF	; 223
    49ea:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRC_REG_help,4); //UPM0
    49ec:	89 81       	ldd	r24, Y+1	; 0x01
    49ee:	8f 7e       	andi	r24, 0xEF	; 239
    49f0:	89 83       	std	Y+1, r24	; 0x01
	/*Stop Bit Select*/
	CLR_BIT(UCSRC_REG_help,3);  //USBS 1-bit
    49f2:	89 81       	ldd	r24, Y+1	; 0x01
    49f4:	87 7f       	andi	r24, 0xF7	; 247
    49f6:	89 83       	std	Y+1, r24	; 0x01
	/* Character Size 8-bits */
	SET_BIT(UCSRC_REG_help,2);  //UCSZ1
    49f8:	89 81       	ldd	r24, Y+1	; 0x01
    49fa:	84 60       	ori	r24, 0x04	; 4
    49fc:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRC_REG_help,1);  //UCSZ0
    49fe:	89 81       	ldd	r24, Y+1	; 0x01
    4a00:	82 60       	ori	r24, 0x02	; 2
    4a02:	89 83       	std	Y+1, r24	; 0x01
	/*Clock Polarity For Sync*/
	CLR_BIT(UCSRC_REG_help,0);
    4a04:	89 81       	ldd	r24, Y+1	; 0x01
    4a06:	8e 7f       	andi	r24, 0xFE	; 254
    4a08:	89 83       	std	Y+1, r24	; 0x01

	UCSRC_REG=UCSRC_REG_help;
    4a0a:	e0 e4       	ldi	r30, 0x40	; 64
    4a0c:	f0 e0       	ldi	r31, 0x00	; 0
    4a0e:	89 81       	ldd	r24, Y+1	; 0x01
    4a10:	80 83       	st	Z, r24

	UBRRH_REG=0;
    4a12:	e0 e4       	ldi	r30, 0x40	; 64
    4a14:	f0 e0       	ldi	r31, 0x00	; 0
    4a16:	10 82       	st	Z, r1
	UBRRL_REG=51;
    4a18:	e9 e2       	ldi	r30, 0x29	; 41
    4a1a:	f0 e0       	ldi	r31, 0x00	; 0
    4a1c:	83 e3       	ldi	r24, 0x33	; 51
    4a1e:	80 83       	st	Z, r24

}
    4a20:	0f 90       	pop	r0
    4a22:	cf 91       	pop	r28
    4a24:	df 91       	pop	r29
    4a26:	08 95       	ret

00004a28 <UART_U8GetChar>:

u8 UART_U8GetChar(){
    4a28:	df 93       	push	r29
    4a2a:	cf 93       	push	r28
    4a2c:	cd b7       	in	r28, 0x3d	; 61
    4a2e:	de b7       	in	r29, 0x3e	; 62
	  // Wait until Reception Complete
	  while(!GET_BIT(UCSRA_REG,7)); //RXC
    4a30:	eb e2       	ldi	r30, 0x2B	; 43
    4a32:	f0 e0       	ldi	r31, 0x00	; 0
    4a34:	80 81       	ld	r24, Z
    4a36:	88 23       	and	r24, r24
    4a38:	dc f7       	brge	.-10     	; 0x4a30 <UART_U8GetChar+0x8>
	  return UDR_REG;
    4a3a:	ec e2       	ldi	r30, 0x2C	; 44
    4a3c:	f0 e0       	ldi	r31, 0x00	; 0
    4a3e:	80 81       	ld	r24, Z
}
    4a40:	cf 91       	pop	r28
    4a42:	df 91       	pop	r29
    4a44:	08 95       	ret

00004a46 <UART_U8SendChar>:


void UART_U8SendChar(u8 data){
    4a46:	df 93       	push	r29
    4a48:	cf 93       	push	r28
    4a4a:	0f 92       	push	r0
    4a4c:	cd b7       	in	r28, 0x3d	; 61
    4a4e:	de b7       	in	r29, 0x3e	; 62
    4a50:	89 83       	std	Y+1, r24	; 0x01
	  // Wait until transmission Register Empty
	  while(!GET_BIT(UCSRA_REG,5)); //UDRE
    4a52:	eb e2       	ldi	r30, 0x2B	; 43
    4a54:	f0 e0       	ldi	r31, 0x00	; 0
    4a56:	80 81       	ld	r24, Z
    4a58:	82 95       	swap	r24
    4a5a:	86 95       	lsr	r24
    4a5c:	87 70       	andi	r24, 0x07	; 7
    4a5e:	88 23       	and	r24, r24
    4a60:	c1 f3       	breq	.-16     	; 0x4a52 <UART_U8SendChar+0xc>
	  UDR_REG = data;
    4a62:	ec e2       	ldi	r30, 0x2C	; 44
    4a64:	f0 e0       	ldi	r31, 0x00	; 0
    4a66:	89 81       	ldd	r24, Y+1	; 0x01
    4a68:	80 83       	st	Z, r24
}
    4a6a:	0f 90       	pop	r0
    4a6c:	cf 91       	pop	r28
    4a6e:	df 91       	pop	r29
    4a70:	08 95       	ret

00004a72 <UART_U8StringWriter>:



void UART_U8StringWriter(u8  *str)
{
    4a72:	df 93       	push	r29
    4a74:	cf 93       	push	r28
    4a76:	cd b7       	in	r28, 0x3d	; 61
    4a78:	de b7       	in	r29, 0x3e	; 62
    4a7a:	61 97       	sbiw	r28, 0x11	; 17
    4a7c:	0f b6       	in	r0, 0x3f	; 63
    4a7e:	f8 94       	cli
    4a80:	de bf       	out	0x3e, r29	; 62
    4a82:	0f be       	out	0x3f, r0	; 63
    4a84:	cd bf       	out	0x3d, r28	; 61
    4a86:	99 8b       	std	Y+17, r25	; 0x11
    4a88:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 Local_u8Counter=0; str[Local_u8Counter] != '\0' ; Local_u8Counter++)
    4a8a:	1f 86       	std	Y+15, r1	; 0x0f
    4a8c:	80 c0       	rjmp	.+256    	; 0x4b8e <UART_U8StringWriter+0x11c>
	{
		  UART_U8SendChar(str[Local_u8Counter]);
    4a8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a90:	28 2f       	mov	r18, r24
    4a92:	30 e0       	ldi	r19, 0x00	; 0
    4a94:	88 89       	ldd	r24, Y+16	; 0x10
    4a96:	99 89       	ldd	r25, Y+17	; 0x11
    4a98:	fc 01       	movw	r30, r24
    4a9a:	e2 0f       	add	r30, r18
    4a9c:	f3 1f       	adc	r31, r19
    4a9e:	80 81       	ld	r24, Z
    4aa0:	0e 94 23 25 	call	0x4a46	; 0x4a46 <UART_U8SendChar>
    4aa4:	80 e0       	ldi	r24, 0x00	; 0
    4aa6:	90 e0       	ldi	r25, 0x00	; 0
    4aa8:	a0 e8       	ldi	r26, 0x80	; 128
    4aaa:	bf e3       	ldi	r27, 0x3F	; 63
    4aac:	8b 87       	std	Y+11, r24	; 0x0b
    4aae:	9c 87       	std	Y+12, r25	; 0x0c
    4ab0:	ad 87       	std	Y+13, r26	; 0x0d
    4ab2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    4abc:	20 e0       	ldi	r18, 0x00	; 0
    4abe:	30 e0       	ldi	r19, 0x00	; 0
    4ac0:	4a ef       	ldi	r20, 0xFA	; 250
    4ac2:	54 e4       	ldi	r21, 0x44	; 68
    4ac4:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    4ac8:	dc 01       	movw	r26, r24
    4aca:	cb 01       	movw	r24, r22
    4acc:	8f 83       	std	Y+7, r24	; 0x07
    4ace:	98 87       	std	Y+8, r25	; 0x08
    4ad0:	a9 87       	std	Y+9, r26	; 0x09
    4ad2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    4ad6:	78 85       	ldd	r23, Y+8	; 0x08
    4ad8:	89 85       	ldd	r24, Y+9	; 0x09
    4ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    4adc:	20 e0       	ldi	r18, 0x00	; 0
    4ade:	30 e0       	ldi	r19, 0x00	; 0
    4ae0:	40 e8       	ldi	r20, 0x80	; 128
    4ae2:	5f e3       	ldi	r21, 0x3F	; 63
    4ae4:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__ltsf2>
    4ae8:	88 23       	and	r24, r24
    4aea:	2c f4       	brge	.+10     	; 0x4af6 <UART_U8StringWriter+0x84>
		__ticks = 1;
    4aec:	81 e0       	ldi	r24, 0x01	; 1
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	9e 83       	std	Y+6, r25	; 0x06
    4af2:	8d 83       	std	Y+5, r24	; 0x05
    4af4:	3f c0       	rjmp	.+126    	; 0x4b74 <UART_U8StringWriter+0x102>
	else if (__tmp > 65535)
    4af6:	6f 81       	ldd	r22, Y+7	; 0x07
    4af8:	78 85       	ldd	r23, Y+8	; 0x08
    4afa:	89 85       	ldd	r24, Y+9	; 0x09
    4afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    4afe:	20 e0       	ldi	r18, 0x00	; 0
    4b00:	3f ef       	ldi	r19, 0xFF	; 255
    4b02:	4f e7       	ldi	r20, 0x7F	; 127
    4b04:	57 e4       	ldi	r21, 0x47	; 71
    4b06:	0e 94 90 0c 	call	0x1920	; 0x1920 <__gtsf2>
    4b0a:	18 16       	cp	r1, r24
    4b0c:	4c f5       	brge	.+82     	; 0x4b60 <UART_U8StringWriter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b16:	20 e0       	ldi	r18, 0x00	; 0
    4b18:	30 e0       	ldi	r19, 0x00	; 0
    4b1a:	40 e2       	ldi	r20, 0x20	; 32
    4b1c:	51 e4       	ldi	r21, 0x41	; 65
    4b1e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3>
    4b22:	dc 01       	movw	r26, r24
    4b24:	cb 01       	movw	r24, r22
    4b26:	bc 01       	movw	r22, r24
    4b28:	cd 01       	movw	r24, r26
    4b2a:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4b2e:	dc 01       	movw	r26, r24
    4b30:	cb 01       	movw	r24, r22
    4b32:	9e 83       	std	Y+6, r25	; 0x06
    4b34:	8d 83       	std	Y+5, r24	; 0x05
    4b36:	0f c0       	rjmp	.+30     	; 0x4b56 <UART_U8StringWriter+0xe4>
    4b38:	88 ec       	ldi	r24, 0xC8	; 200
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	9c 83       	std	Y+4, r25	; 0x04
    4b3e:	8b 83       	std	Y+3, r24	; 0x03
    4b40:	8b 81       	ldd	r24, Y+3	; 0x03
    4b42:	9c 81       	ldd	r25, Y+4	; 0x04
    4b44:	01 97       	sbiw	r24, 0x01	; 1
    4b46:	f1 f7       	brne	.-4      	; 0x4b44 <UART_U8StringWriter+0xd2>
    4b48:	9c 83       	std	Y+4, r25	; 0x04
    4b4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    4b50:	01 97       	sbiw	r24, 0x01	; 1
    4b52:	9e 83       	std	Y+6, r25	; 0x06
    4b54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b56:	8d 81       	ldd	r24, Y+5	; 0x05
    4b58:	9e 81       	ldd	r25, Y+6	; 0x06
    4b5a:	00 97       	sbiw	r24, 0x00	; 0
    4b5c:	69 f7       	brne	.-38     	; 0x4b38 <UART_U8StringWriter+0xc6>
    4b5e:	14 c0       	rjmp	.+40     	; 0x4b88 <UART_U8StringWriter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b60:	6f 81       	ldd	r22, Y+7	; 0x07
    4b62:	78 85       	ldd	r23, Y+8	; 0x08
    4b64:	89 85       	ldd	r24, Y+9	; 0x09
    4b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b68:	0e 94 c3 01 	call	0x386	; 0x386 <__fixunssfsi>
    4b6c:	dc 01       	movw	r26, r24
    4b6e:	cb 01       	movw	r24, r22
    4b70:	9e 83       	std	Y+6, r25	; 0x06
    4b72:	8d 83       	std	Y+5, r24	; 0x05
    4b74:	8d 81       	ldd	r24, Y+5	; 0x05
    4b76:	9e 81       	ldd	r25, Y+6	; 0x06
    4b78:	9a 83       	std	Y+2, r25	; 0x02
    4b7a:	89 83       	std	Y+1, r24	; 0x01
    4b7c:	89 81       	ldd	r24, Y+1	; 0x01
    4b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b80:	01 97       	sbiw	r24, 0x01	; 1
    4b82:	f1 f7       	brne	.-4      	; 0x4b80 <UART_U8StringWriter+0x10e>
    4b84:	9a 83       	std	Y+2, r25	; 0x02
    4b86:	89 83       	std	Y+1, r24	; 0x01



void UART_U8StringWriter(u8  *str)
{
	for(u8 Local_u8Counter=0; str[Local_u8Counter] != '\0' ; Local_u8Counter++)
    4b88:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b8a:	8f 5f       	subi	r24, 0xFF	; 255
    4b8c:	8f 87       	std	Y+15, r24	; 0x0f
    4b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b90:	28 2f       	mov	r18, r24
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	88 89       	ldd	r24, Y+16	; 0x10
    4b96:	99 89       	ldd	r25, Y+17	; 0x11
    4b98:	fc 01       	movw	r30, r24
    4b9a:	e2 0f       	add	r30, r18
    4b9c:	f3 1f       	adc	r31, r19
    4b9e:	80 81       	ld	r24, Z
    4ba0:	88 23       	and	r24, r24
    4ba2:	09 f0       	breq	.+2      	; 0x4ba6 <UART_U8StringWriter+0x134>
    4ba4:	74 cf       	rjmp	.-280    	; 0x4a8e <UART_U8StringWriter+0x1c>
	{
		  UART_U8SendChar(str[Local_u8Counter]);
		  _delay_ms(1);
	}

}
    4ba6:	61 96       	adiw	r28, 0x11	; 17
    4ba8:	0f b6       	in	r0, 0x3f	; 63
    4baa:	f8 94       	cli
    4bac:	de bf       	out	0x3e, r29	; 62
    4bae:	0f be       	out	0x3f, r0	; 63
    4bb0:	cd bf       	out	0x3d, r28	; 61
    4bb2:	cf 91       	pop	r28
    4bb4:	df 91       	pop	r29
    4bb6:	08 95       	ret

00004bb8 <WDT_VidEnable>:
#include "bit_math.h"
#include "DIO_interface.h"
#include "WDT_private.h"


void WDT_VidEnable(){
    4bb8:	df 93       	push	r29
    4bba:	cf 93       	push	r28
    4bbc:	cd b7       	in	r28, 0x3d	; 61
    4bbe:	de b7       	in	r29, 0x3e	; 62
	/*16.3 ms*/
	CLR_BIT(WDTCR_REG,0);
    4bc0:	a1 e4       	ldi	r26, 0x41	; 65
    4bc2:	b0 e0       	ldi	r27, 0x00	; 0
    4bc4:	e1 e4       	ldi	r30, 0x41	; 65
    4bc6:	f0 e0       	ldi	r31, 0x00	; 0
    4bc8:	80 81       	ld	r24, Z
    4bca:	8e 7f       	andi	r24, 0xFE	; 254
    4bcc:	8c 93       	st	X, r24
	CLR_BIT(WDTCR_REG,1);
    4bce:	a1 e4       	ldi	r26, 0x41	; 65
    4bd0:	b0 e0       	ldi	r27, 0x00	; 0
    4bd2:	e1 e4       	ldi	r30, 0x41	; 65
    4bd4:	f0 e0       	ldi	r31, 0x00	; 0
    4bd6:	80 81       	ld	r24, Z
    4bd8:	8d 7f       	andi	r24, 0xFD	; 253
    4bda:	8c 93       	st	X, r24
	CLR_BIT(WDTCR_REG,2);
    4bdc:	a1 e4       	ldi	r26, 0x41	; 65
    4bde:	b0 e0       	ldi	r27, 0x00	; 0
    4be0:	e1 e4       	ldi	r30, 0x41	; 65
    4be2:	f0 e0       	ldi	r31, 0x00	; 0
    4be4:	80 81       	ld	r24, Z
    4be6:	8b 7f       	andi	r24, 0xFB	; 251
    4be8:	8c 93       	st	X, r24
	// 1.0 s
	SET_BIT(WDTCR_REG,1);
	SET_BIT(WDTCR_REG,2);
*/

	SET_BIT(WDTCR_REG,4);
    4bea:	a1 e4       	ldi	r26, 0x41	; 65
    4bec:	b0 e0       	ldi	r27, 0x00	; 0
    4bee:	e1 e4       	ldi	r30, 0x41	; 65
    4bf0:	f0 e0       	ldi	r31, 0x00	; 0
    4bf2:	80 81       	ld	r24, Z
    4bf4:	80 61       	ori	r24, 0x10	; 16
    4bf6:	8c 93       	st	X, r24
	SET_BIT(WDTCR_REG,3);
    4bf8:	a1 e4       	ldi	r26, 0x41	; 65
    4bfa:	b0 e0       	ldi	r27, 0x00	; 0
    4bfc:	e1 e4       	ldi	r30, 0x41	; 65
    4bfe:	f0 e0       	ldi	r31, 0x00	; 0
    4c00:	80 81       	ld	r24, Z
    4c02:	88 60       	ori	r24, 0x08	; 8
    4c04:	8c 93       	st	X, r24

}
    4c06:	cf 91       	pop	r28
    4c08:	df 91       	pop	r29
    4c0a:	08 95       	ret

00004c0c <WDT_VidDisable>:


void WDT_VidDisable(){
    4c0c:	df 93       	push	r29
    4c0e:	cf 93       	push	r28
    4c10:	cd b7       	in	r28, 0x3d	; 61
    4c12:	de b7       	in	r29, 0x3e	; 62
	WDTCR_REG= (1<<4) | (1<<3);
    4c14:	e1 e4       	ldi	r30, 0x41	; 65
    4c16:	f0 e0       	ldi	r31, 0x00	; 0
    4c18:	88 e1       	ldi	r24, 0x18	; 24
    4c1a:	80 83       	st	Z, r24
	WDTCR_REG=0;
    4c1c:	e1 e4       	ldi	r30, 0x41	; 65
    4c1e:	f0 e0       	ldi	r31, 0x00	; 0
    4c20:	10 82       	st	Z, r1
}
    4c22:	cf 91       	pop	r28
    4c24:	df 91       	pop	r29
    4c26:	08 95       	ret

00004c28 <main>:
#include "CURT2_interface.h"
#include "SERVOMOTOR_interface.h"
#include <util/delay.h>

int main()
{
    4c28:	df 93       	push	r29
    4c2a:	cf 93       	push	r28
    4c2c:	cd b7       	in	r28, 0x3d	; 61
    4c2e:	de b7       	in	r29, 0x3e	; 62
	CURT2_VidInit();
    4c30:	0e 94 9c 11 	call	0x2338	; 0x2338 <CURT2_VidInit>
	while(1)
	{

		Check_States();
    4c34:	0e 94 5f 12 	call	0x24be	; 0x24be <Check_States>
    4c38:	fd cf       	rjmp	.-6      	; 0x4c34 <main+0xc>

00004c3a <__udivmodhi4>:
    4c3a:	aa 1b       	sub	r26, r26
    4c3c:	bb 1b       	sub	r27, r27
    4c3e:	51 e1       	ldi	r21, 0x11	; 17
    4c40:	07 c0       	rjmp	.+14     	; 0x4c50 <__udivmodhi4_ep>

00004c42 <__udivmodhi4_loop>:
    4c42:	aa 1f       	adc	r26, r26
    4c44:	bb 1f       	adc	r27, r27
    4c46:	a6 17       	cp	r26, r22
    4c48:	b7 07       	cpc	r27, r23
    4c4a:	10 f0       	brcs	.+4      	; 0x4c50 <__udivmodhi4_ep>
    4c4c:	a6 1b       	sub	r26, r22
    4c4e:	b7 0b       	sbc	r27, r23

00004c50 <__udivmodhi4_ep>:
    4c50:	88 1f       	adc	r24, r24
    4c52:	99 1f       	adc	r25, r25
    4c54:	5a 95       	dec	r21
    4c56:	a9 f7       	brne	.-22     	; 0x4c42 <__udivmodhi4_loop>
    4c58:	80 95       	com	r24
    4c5a:	90 95       	com	r25
    4c5c:	bc 01       	movw	r22, r24
    4c5e:	cd 01       	movw	r24, r26
    4c60:	08 95       	ret

00004c62 <__divmodsi4>:
    4c62:	97 fb       	bst	r25, 7
    4c64:	09 2e       	mov	r0, r25
    4c66:	05 26       	eor	r0, r21
    4c68:	0e d0       	rcall	.+28     	; 0x4c86 <__divmodsi4_neg1>
    4c6a:	57 fd       	sbrc	r21, 7
    4c6c:	04 d0       	rcall	.+8      	; 0x4c76 <__divmodsi4_neg2>
    4c6e:	33 d0       	rcall	.+102    	; 0x4cd6 <__udivmodsi4>
    4c70:	0a d0       	rcall	.+20     	; 0x4c86 <__divmodsi4_neg1>
    4c72:	00 1c       	adc	r0, r0
    4c74:	38 f4       	brcc	.+14     	; 0x4c84 <__divmodsi4_exit>

00004c76 <__divmodsi4_neg2>:
    4c76:	50 95       	com	r21
    4c78:	40 95       	com	r20
    4c7a:	30 95       	com	r19
    4c7c:	21 95       	neg	r18
    4c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c80:	4f 4f       	sbci	r20, 0xFF	; 255
    4c82:	5f 4f       	sbci	r21, 0xFF	; 255

00004c84 <__divmodsi4_exit>:
    4c84:	08 95       	ret

00004c86 <__divmodsi4_neg1>:
    4c86:	f6 f7       	brtc	.-4      	; 0x4c84 <__divmodsi4_exit>
    4c88:	90 95       	com	r25
    4c8a:	80 95       	com	r24
    4c8c:	70 95       	com	r23
    4c8e:	61 95       	neg	r22
    4c90:	7f 4f       	sbci	r23, 0xFF	; 255
    4c92:	8f 4f       	sbci	r24, 0xFF	; 255
    4c94:	9f 4f       	sbci	r25, 0xFF	; 255
    4c96:	08 95       	ret

00004c98 <__mulsi3>:
    4c98:	62 9f       	mul	r22, r18
    4c9a:	d0 01       	movw	r26, r0
    4c9c:	73 9f       	mul	r23, r19
    4c9e:	f0 01       	movw	r30, r0
    4ca0:	82 9f       	mul	r24, r18
    4ca2:	e0 0d       	add	r30, r0
    4ca4:	f1 1d       	adc	r31, r1
    4ca6:	64 9f       	mul	r22, r20
    4ca8:	e0 0d       	add	r30, r0
    4caa:	f1 1d       	adc	r31, r1
    4cac:	92 9f       	mul	r25, r18
    4cae:	f0 0d       	add	r31, r0
    4cb0:	83 9f       	mul	r24, r19
    4cb2:	f0 0d       	add	r31, r0
    4cb4:	74 9f       	mul	r23, r20
    4cb6:	f0 0d       	add	r31, r0
    4cb8:	65 9f       	mul	r22, r21
    4cba:	f0 0d       	add	r31, r0
    4cbc:	99 27       	eor	r25, r25
    4cbe:	72 9f       	mul	r23, r18
    4cc0:	b0 0d       	add	r27, r0
    4cc2:	e1 1d       	adc	r30, r1
    4cc4:	f9 1f       	adc	r31, r25
    4cc6:	63 9f       	mul	r22, r19
    4cc8:	b0 0d       	add	r27, r0
    4cca:	e1 1d       	adc	r30, r1
    4ccc:	f9 1f       	adc	r31, r25
    4cce:	bd 01       	movw	r22, r26
    4cd0:	cf 01       	movw	r24, r30
    4cd2:	11 24       	eor	r1, r1
    4cd4:	08 95       	ret

00004cd6 <__udivmodsi4>:
    4cd6:	a1 e2       	ldi	r26, 0x21	; 33
    4cd8:	1a 2e       	mov	r1, r26
    4cda:	aa 1b       	sub	r26, r26
    4cdc:	bb 1b       	sub	r27, r27
    4cde:	fd 01       	movw	r30, r26
    4ce0:	0d c0       	rjmp	.+26     	; 0x4cfc <__udivmodsi4_ep>

00004ce2 <__udivmodsi4_loop>:
    4ce2:	aa 1f       	adc	r26, r26
    4ce4:	bb 1f       	adc	r27, r27
    4ce6:	ee 1f       	adc	r30, r30
    4ce8:	ff 1f       	adc	r31, r31
    4cea:	a2 17       	cp	r26, r18
    4cec:	b3 07       	cpc	r27, r19
    4cee:	e4 07       	cpc	r30, r20
    4cf0:	f5 07       	cpc	r31, r21
    4cf2:	20 f0       	brcs	.+8      	; 0x4cfc <__udivmodsi4_ep>
    4cf4:	a2 1b       	sub	r26, r18
    4cf6:	b3 0b       	sbc	r27, r19
    4cf8:	e4 0b       	sbc	r30, r20
    4cfa:	f5 0b       	sbc	r31, r21

00004cfc <__udivmodsi4_ep>:
    4cfc:	66 1f       	adc	r22, r22
    4cfe:	77 1f       	adc	r23, r23
    4d00:	88 1f       	adc	r24, r24
    4d02:	99 1f       	adc	r25, r25
    4d04:	1a 94       	dec	r1
    4d06:	69 f7       	brne	.-38     	; 0x4ce2 <__udivmodsi4_loop>
    4d08:	60 95       	com	r22
    4d0a:	70 95       	com	r23
    4d0c:	80 95       	com	r24
    4d0e:	90 95       	com	r25
    4d10:	9b 01       	movw	r18, r22
    4d12:	ac 01       	movw	r20, r24
    4d14:	bd 01       	movw	r22, r26
    4d16:	cf 01       	movw	r24, r30
    4d18:	08 95       	ret

00004d1a <__prologue_saves__>:
    4d1a:	2f 92       	push	r2
    4d1c:	3f 92       	push	r3
    4d1e:	4f 92       	push	r4
    4d20:	5f 92       	push	r5
    4d22:	6f 92       	push	r6
    4d24:	7f 92       	push	r7
    4d26:	8f 92       	push	r8
    4d28:	9f 92       	push	r9
    4d2a:	af 92       	push	r10
    4d2c:	bf 92       	push	r11
    4d2e:	cf 92       	push	r12
    4d30:	df 92       	push	r13
    4d32:	ef 92       	push	r14
    4d34:	ff 92       	push	r15
    4d36:	0f 93       	push	r16
    4d38:	1f 93       	push	r17
    4d3a:	cf 93       	push	r28
    4d3c:	df 93       	push	r29
    4d3e:	cd b7       	in	r28, 0x3d	; 61
    4d40:	de b7       	in	r29, 0x3e	; 62
    4d42:	ca 1b       	sub	r28, r26
    4d44:	db 0b       	sbc	r29, r27
    4d46:	0f b6       	in	r0, 0x3f	; 63
    4d48:	f8 94       	cli
    4d4a:	de bf       	out	0x3e, r29	; 62
    4d4c:	0f be       	out	0x3f, r0	; 63
    4d4e:	cd bf       	out	0x3d, r28	; 61
    4d50:	09 94       	ijmp

00004d52 <__epilogue_restores__>:
    4d52:	2a 88       	ldd	r2, Y+18	; 0x12
    4d54:	39 88       	ldd	r3, Y+17	; 0x11
    4d56:	48 88       	ldd	r4, Y+16	; 0x10
    4d58:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d60:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d62:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d64:	b9 84       	ldd	r11, Y+9	; 0x09
    4d66:	c8 84       	ldd	r12, Y+8	; 0x08
    4d68:	df 80       	ldd	r13, Y+7	; 0x07
    4d6a:	ee 80       	ldd	r14, Y+6	; 0x06
    4d6c:	fd 80       	ldd	r15, Y+5	; 0x05
    4d6e:	0c 81       	ldd	r16, Y+4	; 0x04
    4d70:	1b 81       	ldd	r17, Y+3	; 0x03
    4d72:	aa 81       	ldd	r26, Y+2	; 0x02
    4d74:	b9 81       	ldd	r27, Y+1	; 0x01
    4d76:	ce 0f       	add	r28, r30
    4d78:	d1 1d       	adc	r29, r1
    4d7a:	0f b6       	in	r0, 0x3f	; 63
    4d7c:	f8 94       	cli
    4d7e:	de bf       	out	0x3e, r29	; 62
    4d80:	0f be       	out	0x3f, r0	; 63
    4d82:	cd bf       	out	0x3d, r28	; 61
    4d84:	ed 01       	movw	r28, r26
    4d86:	08 95       	ret

00004d88 <_exit>:
    4d88:	f8 94       	cli

00004d8a <__stop_program>:
    4d8a:	ff cf       	rjmp	.-2      	; 0x4d8a <__stop_program>
